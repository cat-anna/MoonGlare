/*
  * Generated by cppsrc.sh
  * On 2015-08-08 19:50:25,77
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/

#include PCH_HEADER
#include "RemoteConsole.h"

using namespace MoonGlare::Debug::InsiderApi;

InsiderApi::u32 RemoteConsoleObserver::_RequestCounter = 1;

RemoteConsoleObserver::RemoteConsoleObserver(InsiderApi::MessageTypes MessageType, RemoteConsoleRequestQueue *Queue):
		m_RequestId(++_RequestCounter),
		m_MessageType(MessageType),
		m_Timeout(10 * 1000),
		m_Attempts(0),
		m_Queue(Queue),
		m_MaxAttempts(10) {
	m_Timer = std::make_unique<QTimer>(this);
	m_Timer->setSingleShot(true);
	connect(m_Timer.get(), SIGNAL(timeout()), SLOT(Expired()));
}

void RemoteConsoleObserver::SetRetriesCount(unsigned timeout, unsigned attempts) {
	m_Timeout = timeout;
	m_Attempts = attempts;
}

void RemoteConsoleObserver::OnSend() {
	m_Timer->start(m_Timeout);
}

void RemoteConsoleObserver::OnRecive() {
	m_Timer->stop();
}

RemoteConsoleObserver::TimeOutAction RemoteConsoleObserver::TimedOut() {
	++m_Attempts;
	if (m_Attempts > m_MaxAttempts)
		return TimeOutAction::Remove;
	else
		return TimeOutAction::Resend;
};

void RemoteConsoleObserver::Expired() {
	auto shared_this = shared_from_this();
	if (!shared_this)
		return;
	switch (TimedOut()) {
	case TimeOutAction::Remove:
		if (m_Queue)
			m_Queue->RequestFinished(this);
		OnError(ErrorStatus::TimedOut);
		GetRemoteConsole().RequestTimedout(shared_from_this());
		break;
	case TimeOutAction::Resend:
		GetRemoteConsole().MakeRequest(shared_from_this());
		break;
	default:
		break;
	}
} 

//-----------------------------------------

void RemoteConsoleEnumerationObserver::BuildMessage(InsiderApi::InsiderMessageBuffer &buffer) {
	auto hdr = buffer.AllocAndZero<InsiderApi::PayLoad_EnumerateRequest>();
	hdr->PathLen = (InsiderApi::u16)m_Location.length() + 1;
	buffer.PushString(m_Location);
}

//-----------------------------------------
//-----------------------------------------
//-----------------------------------------

void RemoteConsoleRequestQueue::CancelRequests() {
	m_RequestList.clear();
}

void RemoteConsoleRequestQueue::RequestFinished(RemoteConsoleObserver *sender) {
	m_RequestList.pop_front();
	if (m_RequestList.empty())
		return;
	GetRemoteConsole().MakeRequest(std::static_pointer_cast<RemoteConsoleObserver>(m_RequestList.front()));
}

void RemoteConsoleRequestQueue::QueueRequest(SharedLuaStateRequest request) {
	request->SetQueueOwner(this);
	if (m_RequestList.empty())
		GetRemoteConsole().MakeRequest(std::static_pointer_cast<RemoteConsoleObserver>(request));
	m_RequestList.push_back(request);
}
