/*
	Generated by cppsrc.sh
	On 2015-01-03 19:14:38,93
	by Paweu
*/

#pragma once
#ifndef Pipeline_H
#define Pipeline_H

#include <MoonGlare.h>
#include "work.h"

namespace modc {
namespace pipeline {	
	
struct PipelineStageInfo {
	const char *Name;
	std::function<void(Pipeline &p)> StartFunc;
};

struct Pipeline {
	typedef std::function<void(WorkConfiguration &data)> PipeStageFunc;

	struct PipeStage {
		PipeStageFunc func;
		int prority;
		bool operator<(const PipeStage &other) const {
			return prority < other.prority;
		}
	};

	enum class Priority : int {
		First		= 100000,
		Second		= First - 1,
		Third		= Second - 1,

		None		= 0,
		Later		= None - 1,
			
		Last		= -100000,

		FreeTime	= Last - 1,
	};

	typedef std::priority_queue<PipeStage> PipelineQueue;
	using StageQueue = std::queue < PipelineStageInfo > ;

	void Execute(WorkConfiguration &data);

	void QueueAction(PipeStageFunc func, Priority p = Priority::None) { m_pipeline.push(PipeStage{ func, (int)p }); }

	void QueueFirstAction(PipeStageFunc func) { m_pipeline.push(PipeStage{ func, (int)Priority::First }); }
	void QueueLastAction(PipeStageFunc func) { m_pipeline.push(PipeStage{ func, (int)Priority::Last }); }

	void PushStage(PipelineStageInfo psi) { m_StageQueue.push(psi); }
protected:
	PipelineQueue m_pipeline;
	StageQueue m_StageQueue;
};

struct PipelineStage : public std::enable_shared_from_this<PipelineStage> {
	virtual ~PipelineStage() {};
protected:
	template<class T>
	static std::shared_ptr<T> Init(Pipeline& p) {
		return std::make_shared<T>();
	}

	template<class T>
	std::shared_ptr<T> shared() {
		auto ptr = std::dynamic_pointer_cast<T, PipelineStage>(shared_from_this());
		return ptr;
	}

private:
};

}// namespace pipeline
}// namespace modc

#include "EntryStage.h"
#include "ValidationStage.h"
#include "MediaTest.h"
#include "InputStage.h"
#include "DumpStage.h"
#include "RemoveUnnecessaryStage.h"
#include "OutputStage.h"

using namespace std;
using namespace modc;

#endif
