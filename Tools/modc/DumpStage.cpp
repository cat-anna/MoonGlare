/*
  * Generated by cppsrc.sh
  * On 2015-03-11 18:10:38,51
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/
#include <pch.h>
#include "Pipeline.h"

namespace modc {
namespace pipeline {

void Dump_FileList(WorkConfiguration &data) {
	char buf[256];
	const char* fmt = "%-40s %-40s %-3s "
					  "%-8s %-7s %-10s %-9s %-9s "
					  "%-10s %-40s";
	sprintf(buf, fmt, "FileName", "Virtual path", "Src", 
			"Injected", "Ignored", "Validation", "MediaTest", "Generated",
			"Size", "System path");
	cout << data.StageCounter() << "Dumping file list\n";
	cout << buf << "\n";

	struct T {
		static const char* b2s(bool b) {
			if (b) return "  Y";
			return "  N";
		}
		static const char* src2s(FileSource fs) {
			switch (fs) {
			case modc::FileSource::FileSystem:
				return "fs ";
			case modc::FileSource::Container:
				return "mgc";
			case modc::FileSource::Unknown:
			default:
				return " ? ";
			}
		}
		static const char* size2s(unsigned __int64 size) {
			float s = static_cast<float>(size);
			const char *sizes[] ={ "b", "kib", "Mib", "Gib", "TiB" };
			static char buf[64];
			int idx = 0;
			while (s >= 1000.0f) {
				++idx;
				s /= 1024.0f;
			}
			if (idx == 0)
				sprintf(buf, "%db", static_cast<int>(s));
			else
				sprintf(buf, "%5.1f%s", s, sizes[idx]);
			char *ret = buf; 
			while (*ret == ' ') ++ret;
			return ret;
		}

		static const char* TR2s(bool T, bool R, char* buf) {
			sprintf(buf, "T:%s  R:%s", (T?"y":"n"), (R?"y":"n"));
			return buf;
		}
	};

	for (auto &it : data.FileList) {
		char buf1[16], buf2[16];
		sprintf(buf, fmt, it.Name.c_str(), it.VirtualPath.c_str(), T::src2s(it.Source), 
				T::b2s(it.Injected),  T::b2s(it.Ignore), 
				T::TR2s(it.Validated, it.Needed, buf1), T::TR2s(it.Tested, it.Correct, buf2), 
				T::b2s(it.Generated), 
				(it.PreloadedSize >=0 ? T::size2s(it.PreloadedSize): "?"),
				it.FileSystemPath.c_str());
		cout << buf << "\n";
	}
}

void DumpStage::ValidateStage(WorkConfiguration &data) {
	auto fs = shared<DumpStage>();
	if (Dump::FileList())
		data->pipeline->QueueAction([fs](WorkConfiguration &data) { Dump_FileList(data); });
}


/*
struct FileInfo {
	FileSource Source = FileSource::Unknown;
	string Name = "{badname}";
	string VirtualPath = "{badvpath}";

	FileSystem::iContainer *SrcContainer = nullptr;
	string FileSystemPath = "{badsyspath}";

	bool Injected = false;
	bool Ignore = false;
	bool Validated = false;
};
*/

} //namespace pipeline 
} //namespace modc 
