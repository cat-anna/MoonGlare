/*
	Generated by cppsrc.sh
	On 2015-01-04  8:08:24,71
	by Paweu
*/

#pragma once
#ifndef ValidationStage_H
#define ValidationStage_H
namespace modc {
namespace pipeline {	

class ValidationStage : public PipelineStage {
public:
	static PipelineStageInfo GetInfo() {
		return PipelineStageInfo{ "MediaTestStage", &Queue };
	}
	static PipelineStageInfo GetSkippedInfo() {
		return PipelineStageInfo{ "SkippedMediaTestStage", &QueueSkipped };
	}
protected:
	static void Queue(Pipeline &p) {
		auto fs = Init<ValidationStage>(p);
		p.QueueFirstAction([fs](WorkConfiguration &data) { fs->ValidateStage(data); });
	}
	static void QueueSkipped(Pipeline &p) {
		auto fs = Init<ValidationStage>(p);
		p.QueueFirstAction([fs](WorkConfiguration &data) { fs->SkipStage(data); });
	}
	
	void ValidateStage(WorkConfiguration &data);
	void SkipStage(WorkConfiguration &data);
protected:

public:
#if 0
friend struct NodeInfo;
 	ValidationStage();
 	~ValidationStage();

	static void Queue(WorkConfiguration &data);

	struct ResInfo {
		string Name;
		string Class;
	};

	void RegisterFile(WorkConfiguration &data, const string& SrcFile, const string& parentfile = string());
	void RegisterResource(const string& List, const string &Name, const string& Class) {
		ResInfo ri{ Name, Class };
		m_Resources[List][Name] = ri;
	}
protected: 
	struct ClassInfo {
		string Name;
		string ClassName;
	};

	typedef std::map<string, xml_node> PatternMap;
	typedef std::map<string, ClassInfo> ClassListMap;
	typedef std::map<string, ClassListMap> ClassListsMap;
	typedef std::map<string, ResInfo> ResoureceInfoMap;
	typedef std::map<string, ResoureceInfoMap> ResoureceInfoDB;

	xml_document m_PatternsDoc;
	PatternMap m_Patterns;
	ClassListsMap m_Classes;
	ResoureceInfoDB m_Resources;
	std::list<string> m_SrcFileList;

	std::weak_ptr<ValidationStage> m_WeakThis;

	unsigned m_Errors;

	void PreTest(WorkConfiguration &data);
	void LoadPatterns(WorkConfiguration &data);
	void LoadClasses(WorkConfiguration &data);
	void BeginProcess(WorkConfiguration &data);
	void EndProcess(WorkConfiguration &data);

	void ValidateXML(string filepath, string pattern, WorkConfiguration &data);
	void DoValidation(const string& xmlfileName, xml_node root, xml_node pattern, WorkConfiguration &data);
#endif
};

}// namespace pipeline
}// namespace modc


#endif