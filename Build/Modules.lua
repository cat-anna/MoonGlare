--Moonglare build subscript
--Engine modules build script generator

local ModuleManager_t = { }
ModuleManager_t.__index = ModuleManager_t

local CreateModuleManager = function ()
    local t = { }
    setmetatable(t, ModuleManager_t)
    t.Modules = { }
    t.Libs =  { }
    t.ConfigFile = "MoonGlareConfiguration.lua"
    t.RootDir = nil
    t.Settings = nil
    return t;
end

ModuleManager = CreateModuleManager()

function define_module(data) 
	return ModuleManager:addModule(data)
end

-------------------

function ModuleManager_t:init(filen)
    if self.root_dir then
        self:fail("ModuleManager is allready initialized!")
    end
	
	self.RootDir = os.realpath(os.getcwd() .. "/../")
	
	print("MoonGlare build root: " .. self.RootDir)

    if filen then
        self.ConfigFile = filen
    end

    local f = io.open(self.RootDir .. self.ConfigFile, "rb")
    local settings_ok = false
    if f then
        f:close()
        self.OverwriteConfig = false;
        self.Settings = dofile(self.RootDir .. self.ConfigFile)
        settings_ok = true
        if      not self.Settings or 
                not self.Settings.Libs or
                not self.Settings.Modules then
            settings_ok = false
        end
    end

    if not settings_ok then
        print("Config file does not exists or file is invalid!")
        self.OverwriteConfig = true;
        
        self.Settings = {
            Modules = {
            },
            Libs = {
            }
        }
    end

    self:search()

    if self.OverwriteConfig then
        self:saveConfig()
    end
end

function ModuleManager_t:fail(message)
	print(message)
	error(message)
end;

function ModuleManager_t:search()
	local modlist = os.matchfiles(self.RootDir .. "source/**/moduleinfo.lua")
	table.foreach(modlist, function(k,v) include(v); end)
end

function ModuleManager_t:addModule(data)
	data.script = _SCRIPT
    local out_table = nil
    local test_table = nil
	local typetable = {
		module = function(data) 
			data.addsources = true
            out_table = self.Modules
            test_table = self.Settings.Modules
		end,
		lib = function(data)
			data.addsources = true
            out_table = self.Libs
            test_table = self.Settings.Libs
		end,
	}
    local fun = typetable[data.type]	
	if not fun then
    	self:fail("Unknown module type: " .. data.name)
	else 
		fun(data)
    end

	if out_table[data.name] then
		self:fail("Error: module " .. data.name .. " allredy exists")
		return
	end

    out_table[data.name] = data

    local test = test_table[data.name]

    if test == nil then
        print("Found new " .. data.type .. ": " .. data.name .. " - adding to included " .. data.type .. "s");
        data.excluded = false
        test_table[data.name] = true;
        self.OverwriteConfig = true;
        return
    end

    if not test then
        data.excluded = true
        print("Found excluded " .. data.type .. ": " .. data.name);
    else
        data.excluded = false
        print("Found " .. data.type .. ": " .. data.name);
    end

end

function ModuleManager_t:saveConfig()
    local f = io.open(self.RootDir .. self.ConfigFile, "w")
    if not f then
        self:fail("Uable to open config file for writting")
        return
    end
    print("Writting changed configuration")
    local dump
    
    dump = function (value, loc)
        local t = type(value)
        local action = {
            table = function(value, loc)
                f:write("{\n")
                for v,k in pairs(value) do
                    for i = 1,(loc+1) do f:write("\t"); end
                    f:write(v, " = ")
                    dump(k, loc+1)
                end
                for i = 1,loc do f:write("\t"); end
                f:write("}")
            end,
            number = function(value, loc)
                f:write(value)
            end,
            string = function(value, loc)
                f:write("\"", value, "\"")
            end,
            boolean = function(value, loc)
                f:write(tostring(value))
            end,
            ["nil"] = function(value, loc)
                f:write("nil")
            end,
        }
        (action[type(value)])(value, loc);
        if loc > 0 then
            f:write(",\n")
        else
            f:write("\n")
        end
    end

    f:write([[
--Automatically generated file. Be careful while editing.
--File may be overwritten and your changes may be lost
--Generated by MoonGlare Engine build script generator

--To exclude module from being build set its value to 0 or false

local Settings = ]])
dump(self.Settings, 0)
f:write([[

return Settings
]])

    f:close()
end

function ModuleManager_t:addSources()
	table.foreach(self.Modules, 
		function(k,data)			
			self:addCommon(data)
		end
	)
end

function ModuleManager_t:addLibs()
	table.foreach(self.Libs, 
		function(k,data)			
			self:addCommon(data)
		end
	)
end

function ModuleManager_t:addCommon(data)
    if not data or data.excluded or not data.addsources then
        return
    end

	local subpath = path.getrelative(os.getcwd(), data.script);
	subpath = path.getdirectory(subpath) .. "/"	
	
	filter { }
	table.foreach(data.files, 
		function(k,v) 
			files(subpath .. v)
		end
	)	
	files(subpath .. "moduleinfo.lua")
			
	if data.libs then links(data.libs.common); end
	if data.defines then links(data.defines.common); end		
		
	if data.premakecommand then
		data.premakecommand()
	end		
	
	local ConfigSettings = {
		Release = function()
			if data.libs then links(data.libs.release); end
			if data.defines then defines(data.defines.release); end		
		end,
		Debug = function()
			if data.libs then links(data.libs.debug); end
			if data.Defines then defines(data.defines.debug); end	
		end,
	}
	
	local k
	local v
	for k,v in pairs(MoonGlare.Configurations) do
		filter("configurations:" .. v.Name)
		ConfigSettings[v.Type]()
	end
		
end
