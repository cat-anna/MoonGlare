--Moonglare build subscript
--Engine modules build script generator

local ModuleManager_t = { }
ModuleManager_t.__index = ModuleManager_t

local CreateModuleManager = function ()
    local t = { }
    setmetatable(t, ModuleManager_t)
    t.Groups = { }
    t.ConfigFile = "MoonGlareConfiguration.lua"
    t.Settings = { }
    return t;
end

ModuleManager = CreateModuleManager()

local DoAddModule = false

function define_module(data) 
	if DoAddModule then
		filter { }
		if not data.Add then
			ModuleManager:fail(string.format("Module %s:%s does not have valid add function", data.group, data.name))
		end	
		data.Add()
		DoAddModule = false
		return
	end

	return ModuleManager:RegisterModule(data)
end

-------------------

function ModuleManager_t:init(filen)

    if filen then
        self.ConfigFile = filen
	else
		self.ConfigFile = dir.root .. "ModuleConfiguration.lua"
    end
	
	print ("Module configuration file: " .. self.ConfigFile)

    local f = io.open(self.ConfigFile, "rb")
    if f then
        f:close()
        self.Settings = dofile(self.ConfigFile)
		if not self.Settings then
			print "Failed to read module configuration file"
			self.Settings = { }
		end
    end

    self:search()
    self:saveConfig()
end

function ModuleManager_t:fail(message)
	print(message)
	error(message)
	os.exit(1)
end;

function ModuleManager_t:search()
	local modlist = os.matchfiles(dir.base .. "**/module.lua")
	table.foreach(modlist, function(k,v) include(v); end)
end

function ModuleManager_t:RegisterModule(data)
	data.script = _SCRIPT

	local modgroup = self.Groups[data.group]
	if not modgroup then
		modgroup = { }
		self.Groups[data.group] = modgroup
	end
	
	if modgroup[data.name] then
		self:fail("Error: module " .. data.name .. " allredy exists in group " .. data.group)
		return
	end

    modgroup[data.name] = data

    local settingsgroup = self.Settings[data.group]

    if not settingsgroup or settingsgroup[data.name] == nil then
        print(string.format("Found new module %s in group %s - Excluding from build", data.name, data.group))
        data.excluded = true
		if not settingsgroup then
			settingsgroup = { }
			self.Settings[data.group] = settingsgroup
		end
        settingsgroup[data.name] = false;
        return
    end

    if not settingsgroup[data.name] then
        data.excluded = true
		print(string.format("Found excluded module %s:%s", data.group, data.name))
    else
        data.excluded = false
		print(string.format("Found module %s:%s", data.group, data.name))
    end
end

function ModuleManager_t:saveConfig()
    local f = io.open(self.ConfigFile, "w")
    if not f then
        self:fail("Uable to open config file for writting")
        return
    end
    print("Writting configuration")
    local dump
    
    dump = function (value, loc)
        local t = type(value)
        local action = {
            table = function(value, loc)
                f:write("{\n")
                for v,k in pairs(value) do
                    for i = 1,(loc+1) do f:write("\t"); end
                    f:write(v, " = ")
                    dump(k, loc+1)
                end
                for i = 1,loc do f:write("\t"); end
                f:write("}")
            end,
            number = function(value, loc)
                f:write(value)
            end,
            string = function(value, loc)
                f:write("\"", value, "\"")
            end,
            boolean = function(value, loc)
                f:write(tostring(value))
            end,
            ["nil"] = function(value, loc)
                f:write("nil")
            end,
        }
        (action[type(value)])(value, loc);
        if loc > 0 then
            f:write(",\n")
        else
            f:write("\n")
        end
    end

    f:write([[
--Automatically generated file. Be careful while editing.
--File may be overwritten and your changes may be lost
--Generated by MoonGlare Engine build script generator

--To exclude module from being build set its value to 0 or false

local Settings = ]])
dump(self.Settings, 0)
f:write([[

return Settings
]])

    f:close()
end

function ModuleManager_t:AddModules(GroupName)
	local k,v
	local Group = self.Groups[GroupName]
	if not Group then
		print(string.format("Module group %s is empty!", GroupName))
		return 
	end
	for k,v in pairs(Group) do
		self:AddModule(v)
	end
end

function ModuleManager_t:AddModule(data)
    if not data or data.excluded then
        return
    end

	DoAddModule = true
	dofile(data.script)
end

