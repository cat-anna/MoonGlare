/*
  * Generated by cppsrc.sh
  * On 
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/

#pragma once
#ifndef luainterface_H
#define luainterface_H

#include <memory>

#include "luasupport.h"

struct LuaDeleter {
	void operator()(lua_State *l) {
		lua_close(l);
	}
};

struct Lua;
using SharedLua = std::shared_ptr<Lua>;

struct Lua {
	static SharedLua New() {
		struct L : public Lua { };
		return std::make_shared<L>();
	}

	lua_State *GetState() { return m_Lua.get(); }
	
	bool Initialize();

	bool LoadLibrary(const char *c);
	bool ExecuteScriptFile(const char *fname);
	bool ExecuteScriptChunk(const char *code, const char *name = nullptr);
    bool ExecuteChunk(const unsigned char *data, long len, const char *name);
protected:
	Lua();
	virtual ~Lua() { }

	void RegisterAPI();
private:
	std::unique_ptr<lua_State, LuaDeleter> m_Lua;
};

#endif
