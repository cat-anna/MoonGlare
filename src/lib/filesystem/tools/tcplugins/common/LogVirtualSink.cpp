/*
  * Generated by cppsrc.sh
  * On 2016-01-08 22:38:03,59
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/

#include <sstream>
#include <cassert>

#include "LogVirtualSink.h"
#include <core/Container/VirtualFileContainer.h>

//-----------------------------------------------------------------------------

using namespace StarVFS::Containers;

static std::stringstream s_Buffer;

static void LogLineInsert(const char *file, const char *function, unsigned line, const char *log, const char *type) {
	char buf[8192];
	sprintf(buf, "[%s][%s:%d] SVFS: %s\n", type, function, line, log);
	s_Buffer << buf;
}

struct LogVirtualSink::Impl {
	VirtualFileContainer *m_Container;
	std::vector<SharedVirtualFileInterface> m_MetaFiles;
};

struct LogVirtualSink::LogFile : public BaseDynamicFileInterface {
	void GenerateContent(std::ostream &out) override {
		out << s_Buffer.str();
	}
};

//-----------------------------------------------------------------------------

LogVirtualSink::LogVirtualSink(StarVFS::StarVFS *svfs): StarVFS::Modules::iModule(svfs) {
	::StarVFS::StarVFSLogSink = LogLineInsert;
	m_Impl = std::make_unique<Impl>();
}

LogVirtualSink::~LogVirtualSink() {
}

//-------------------------------------------------------------------------------------------------

bool LogVirtualSink::Enable() {
	if (m_Impl->m_Container)
		return true;

	auto ret = GetVFS()->CreateContainer<VirtualFileContainer>("/");
	if (!ret.second)
		return false;
	m_Impl->m_Container = dynamic_cast<VirtualFileContainer*>(ret.second);
	if (!m_Impl->m_Container)
		return false;

	{
		auto f = std::make_shared<LogFile>();
		m_Impl->m_MetaFiles.emplace_back(f);
		m_Impl->m_Container->AddFile(f, "/$Log");
	}
	return true;
}

bool LogVirtualSink::Disable() {
	if (m_Impl->m_Container)
		return true;

	m_Impl->m_MetaFiles.clear();

	//	m_MetaContainer = nullptr;
	return false;
}

//-----------------------------------------------------------------------------
