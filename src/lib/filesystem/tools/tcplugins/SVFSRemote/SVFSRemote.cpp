/*
  * Generated by cppsrc.sh
  * On 
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/

#include "SVFSRemote.h"
#include <cassert>
#include <cstring>
#include <fstream>

SVFSRemote::SVFSRemote() {
}

SVFSRemote::~SVFSRemote() {
}

//-----------------------------------------------------------------------------

void SVFSRemote::Init(int PluginNr, tProgressProc pProgressProc, tLogProc pLogProc, tRequestProc pRequestProc) {
	m_PluginNr = m_PluginNr;
	m_ProgressProc = pProgressProc;
	m_LogProc = pLogProc;
	m_RequestProc = pRequestProc;

	m_SVFS = std::make_unique<::StarVFS::StarVFS>();
	m_SVFS->AddModule<LogVirtualSink>();
	DoSVFSScan();
}

//-----------------------------------------------------------------------------

void SVFSRemote::DoSVFSScan() {
//	m_SVFS->OpenContainer("d:\\bin\\", "/");
	m_SVFS->OpenContainer("tcp://127.0.0.1:5555", "/");
}

//-----------------------------------------------------------------------------

bool SVFSRemote::GetFile(const char *src, const char *dst) {

	STARVFSDebugLog("GetFile %s->%s", src, dst);

	ProgressProc(src, dst, 0);

	auto h = m_SVFS->OpenFile(src);
	if (!h)
		return false;

	StarVFS::ByteTable ct;
	if (!h.GetFileData(ct))
		return false;

	std::ofstream f(dst, std::ios::out | std::ios::binary);
	f.write(ct.get(), ct.byte_size());
	f.close();

	ProgressProc(src, dst, 100);

	return true;
}

//-----------------------------------------------------------------------------

TCSearchData* SVFSRemote::FindFirst(const char *Path, WIN32_FIND_DATA *FindData) {
	if (!m_SVFS)
		return nullptr;

	STARVFSDebugLog("FF: %s", Path);

	auto h = m_SVFS->OpenFile(Path);
	if (!h) {
		STARVFSDebugLog("FF: Failed to OpenFile!");
		return nullptr;
	}

	std::vector<StarVFS::FileID> fidvect;
	h.EnumerateChildren([&fidvect](::StarVFS::FileID fid) {
		fidvect.push_back(fid);
		return true;
	});

	if (fidvect.empty()) {
		SetLastError(ERROR_NO_MORE_FILES);
		STARVFSDebugLog("FF: No files!");
		return nullptr;
	}

	auto tcd = new TCSearchData;
	tcd->m_FileIDs.swap(fidvect);

	if (!FindNext(tcd, FindData)) {
		delete tcd;
		STARVFSDebugLog("FF: FNext failed!");
		return nullptr;
	}

	return tcd;
}

bool SVFSRemote::FindNext(TCSearchData *data, WIN32_FIND_DATA *FindData) {
	memset(FindData, 0, sizeof(WIN32_FIND_DATA));
	if (data->m_FileIDs.empty())
		return false;

	FindData->ftLastWriteTime.dwHighDateTime = 0xFFFFFFFF;	FindData->ftLastWriteTime.dwLowDateTime = 0xFFFFFFFE;

	auto fid = data->m_FileIDs.back();
	data->m_FileIDs.pop_back();

	FindData->nFileSizeLow = m_SVFS->GetFileSize(fid);

	if (m_SVFS->IsFileDirectory(fid)) 
		FindData->dwFileAttributes |= FILE_ATTRIBUTE_DIRECTORY;
	
	auto fn = m_SVFS->GetFileName(fid);
	strncpy(FindData->cFileName, fn, MAX_PATH);

	return true;
}

int SVFSRemote::FindClose(TCSearchData *data) {
	assert(data);
	delete data;
	return 0;
}
