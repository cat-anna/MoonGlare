/*
  * Generated by cppsrc.sh
  * On 2015-12-12  9:44:59,49
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/
#define _WIN32_WINNT 0x0501

#include "../StarVFSInternal.h"
#include "MetaModule.h"

namespace StarVFS {
namespace Modules {

struct FileTableMetaFile : public Containers::BaseDynamicFileInterface {
	FileTableMetaFile(StarVFS *svfs): m_svfs(svfs) {
		StarVFSAssert(svfs);
	}
	virtual void GenerateContent(std::ostream &out) override {
		auto ft = m_svfs->GetFileTable();
		ft->DumpFileTable(out);
	}
private:
	StarVFS *m_svfs;
};

struct FileTableStructureMetaFile : public Containers::BaseDynamicFileInterface {
	FileTableStructureMetaFile(StarVFS *svfs) : m_svfs(svfs) {
		StarVFSAssert(svfs);
	}
	virtual void GenerateContent(std::ostream &out) override {
		auto ft = m_svfs->GetFileTable();
		ft->DumpStructure(out);
	}
private:
	StarVFS *m_svfs;
};

struct StatisticsMetaFile : public Containers::BaseDynamicFileInterface {
	StatisticsMetaFile(StarVFS *svfs) : m_svfs(svfs) {
		StarVFSAssert(svfs);
	}
	void GenerateContent(std::ostream &o) override {
		auto ft = m_svfs->GetFileTable();
		
		o << "Allocated files: " << ft->GetAllocatedFileCount() << "\n";
		o << "Loaded containers: " << (int)m_svfs->GetContainerCount() << "\n";
		o << "Loaded modules: " << (int)m_svfs->GetModuleCount() << "\n";
		o << "\n";
		//	o << "Registered container types:\n";
		//	o << "Registered module types:\n";
		//	o << "Registered exporter types:\n";
	}
private:
	StarVFS *m_svfs;
};

struct HashTableMetaFile : public Containers::BaseDynamicFileInterface {
	HashTableMetaFile(StarVFS *svfs) : m_svfs(svfs) {
		StarVFSAssert(svfs);
	}
	void GenerateContent(std::ostream &o) override {
		auto ft = m_svfs->GetFileTable();
		ft->DumpHashTable(o);
	}
private:
	StarVFS *m_svfs;
};

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

MetaModule::MetaModule(StarVFS *svfs): iModule(svfs), m_MetaContainer(nullptr){
}

MetaModule::~MetaModule() {
	Disable();
}

//-------------------------------------------------------------------------------------------------

bool MetaModule::Enable() {
	if (m_MetaContainer)
		return true;

	auto ret = GetVFS()->CreateContainer<Containers::VirtualFileContainer>("/");
	if (!ret.second)
		return false;
	m_MetaContainer = dynamic_cast<Containers::VirtualFileContainer*>(ret.second);
	if (!m_MetaContainer)
		return false;

	{
		auto f = std::make_shared<FileTableMetaFile>(GetVFS());
		m_MetaFiles.emplace_back(f);
		m_MetaContainer->AddFile(f, "/$FileTable");
	}
	{
		auto f = std::make_shared<FileTableStructureMetaFile>(GetVFS());
		m_MetaFiles.emplace_back(f);
		m_MetaContainer->AddFile(f, "/$Structure");
	}
	{
		auto f = std::make_shared<StatisticsMetaFile>(GetVFS());
		m_MetaFiles.emplace_back(f);
		m_MetaContainer->AddFile(f, "/$Statistics");
	}
	{
		auto f = std::make_shared<HashTableMetaFile>(GetVFS());
		m_MetaFiles.emplace_back(f);
		m_MetaContainer->AddFile(f, "/$HashTable");
	}
	return true;
}

bool MetaModule::Disable() {
	if (!m_MetaContainer)
		return true;

	m_MetaFiles.clear();

//	m_MetaContainer = nullptr;
	return false;
}

} //namespace Modules 
} //namespace StarVFS 
