/*
  * Generated by cppsrc.sh
  * On 
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/

#include "../nRDC.h"
#include "../../Utils/ZlibCompression.h"

namespace StarVFS {
namespace RDC {
namespace Version_1 {

BlockProcessor::BlockProcessor() {
}

BlockProcessor::~BlockProcessor() {
}

//-----------------------------------------------------------------------------

BlockProcessingResult BlockProcessor::ReadBlock(const BlockFileDevice *device, ByteTable &out, const DataBlock &block) const {
	StarVFSAssert(device);
	out.reset();
	ByteTable bt;
	bt.make_new(block.ContainerSize);
	if (!device->ReadFromBegining(block.FileLocation, (char*)bt.get(), bt.byte_size())) {
		STARVFSErrorLog("Failed to read device!");
		return BlockProcessingResult::IOFailure();
	}

	BlockProcessingResult ret = ProcessInputBlock(bt, block);
	ret.m_DeviceIORequested = true;
	ret.m_DeviceIOResult = true;

	out.swap(bt);
	return ret;
}

BlockProcessingResult BlockProcessor::ReadBlock(const BlockFileDevice *device, ByteTable &out, const OffsetDataBlock &offset, const DataBlock &block) const {
	StarVFSAssert(device);
	out.reset();
	ByteTable bt;
	bt.make_new(offset.ContainerSize);
	if (!device->ReadFromBegining(block.FileLocation + offset.SectionOffset, (char*)bt.get(), bt.byte_size())) {
		STARVFSErrorLog("Failed to read device!");
		return BlockProcessingResult::IOFailure();
	}

	BlockProcessingResult ret = ProcessInputBlock(bt, offset);
	ret.m_DeviceIOResult = true;
	ret.m_DeviceIORequested = true;

	out.swap(bt);
	return ret;
}

//-----------------------------------------------------------------------------

BlockProcessingResult BlockProcessor::WriteBlock(const BlockFileDevice *device, ByteTable in, DataBlock &block)  {
	StarVFSAssert(device);

	BlockProcessingResult ret = ProcessOutputBlock(in, block);

	block.FileLocation = device->GetSize();
	block.ContainerSize = in.byte_size();

	ret.m_DeviceIORequested = true;
	ret.m_DeviceIOResult = false;
	if (!device->WriteAtEnd((char*)in.get(), in.byte_size())) {
		STARVFSErrorLog("Failed to read device!");
	}
	else
		ret.m_DeviceIOResult = true;
	return ret;
}

BlockProcessingResult BlockProcessor::WriteBlock(const BlockFileDevice *device, ByteTable in, OffsetDataBlock &offset, DataBlock &block) {
	StarVFSAssert(device);

	BlockProcessingResult ret = ProcessOutputBlock(in, offset);

	offset.SectionOffset = device->GetSize() - block.FileLocation;
	offset.ContainerSize = in.byte_size();

	ret.m_DeviceIORequested = true;
	ret.m_DeviceIOResult = false;
	if (!device->WriteAtEnd((char*)in.get(), in.byte_size())) {
		STARVFSErrorLog("Failed to read device!");
	}
	else
		ret.m_DeviceIOResult = true;
	return ret;
}

//-----------------------------------------------------------------------------

BlockProcessingResult BlockProcessor::ProcessInputBlock(ByteTable &inout, const DataBlock &block) const {
	BlockProcessingResult ret;

	if (block.Compression.Mode != CompressionMode::None) {
		ret.m_Compression = ProcessDecompression(inout, block.Compression);
	}

	return ret;
}

BlockProcessingResult BlockProcessor::ProcessInputBlock(ByteTable &inout, const OffsetDataBlock &block) const {
	BlockProcessingResult ret;

	if (block.Compression.Mode != CompressionMode::None) {
		ret.m_Compression = ProcessDecompression(inout, block.Compression);
	}

	return ret;
}

BlockProcessingResult BlockProcessor::ProcessOutputBlock(ByteTable &inout, DataBlock &block) {
	BlockProcessingResult ret;

	if (block.Compression.Mode != CompressionMode::None) {
		ret.m_Compression = ProcessCompression(inout, block.Compression);
	}

	return ret;
}

BlockProcessingResult BlockProcessor::ProcessOutputBlock(ByteTable &inout, OffsetDataBlock &block) {
	BlockProcessingResult ret;

	if (block.Compression.Mode != CompressionMode::None) {
		ret.m_Compression = ProcessCompression(inout, block.Compression);
	}

	return ret;
}

//-----------------------------------------------------------------------------

Compression::CompressionResult BlockProcessor::ProcessCompression(ByteTable &inout, CompressionInfo &config) {
	ByteTable output;
	Compression::CompressionResult ret = Compression::CompressionResult::Failure;

	switch (config.Mode) {
	case CompressionMode::None:
		return Compression::CompressionResult::Success;
	case CompressionMode::ZLib: {
#ifndef STARVFS_DISABLE_ZLIB
		Compression::Zlib zlib;
		zlib.SetCompressionlevel((Compression::Compressionlevel)config.Level);
		config.RawSize = inout.byte_size();
		ret = zlib.Compress(inout, output);
		break;
#else
		STARVFSErrorLog("ZLib compression is disabled! (mode %u)", (unsigned)config.Mode);
		break;
#endif
	}
	default:
		STARVFSErrorLog("Unknown compression mode: %u", (unsigned)config.Mode);
		break;
	}

	switch (ret) {
	case Compression::CompressionResult::Success:
		inout.swap(output);
		return ret;
	case Compression::CompressionResult::UnableToReduceSize:
		config.Reset();
		return ret;
	case Compression::CompressionResult::Failure:
		return ret;
	default:
		STARVFSErrorLog("Unknown CompressionResult (%d)", (int)ret);
		return Compression::CompressionResult::Failure;
	}
}

//-----------------------------------------------------------------------------

Compression::CompressionResult BlockProcessor::ProcessDecompression(ByteTable &inout, const CompressionInfo &config) const {
	ByteTable output;
	Compression::CompressionResult ret = Compression::CompressionResult::Failure;

	switch (config.Mode) {
	case CompressionMode::None:
		return Compression::CompressionResult::Success;
	case CompressionMode::ZLib: {
#ifndef STARVFS_DISABLE_ZLIB
		Compression::Zlib zlib;
		output.make_new(config.RawSize);
		ret = zlib.Decompress(inout, output);
		break;
#else
		STARVFSErrorLog("ZLib compression is disabled! (mode %u)", (unsigned)config.Mode);
		break;
#endif
	}
	default:
		STARVFSErrorLog("Unknown compression mode: %u", (unsigned)config.Mode);
		break;
	}

	switch (ret) {
	case Compression::CompressionResult::Success:
		inout.swap(output);
		return ret;
	case Compression::CompressionResult::UnableToReduceSize:
		return ret;
	case Compression::CompressionResult::Failure:
		return ret;
	default:
		STARVFSErrorLog("Unknown CompressionResult (%d)", (int)ret);
		return Compression::CompressionResult::Failure;
	}
}

} //namespace Version_1
} //namespace RDC 
} //namespace StarVFS 
