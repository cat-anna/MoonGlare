/*
  * Generated by cppsrc.sh
  * On 2016-01-01  0:24:38,60
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/

#pragma once
#ifndef BlockFileDevice_H
#define BlockFileDevice_H

namespace StarVFS {
namespace RDC {

class BlockFileDevice final {
public:
 	BlockFileDevice();
 	~BlockFileDevice();
	
	bool CreateFile(const String& FileName);
	bool OpenForRead(const String& FileName);
	bool Close();

	bool IsOk() const;
	bool CanWrite() const;
	bool CanRead() const;

	bool ReadFromBegining(size_t Offset, char *data, size_t ToRead, size_t *read = nullptr) const;
	bool ReadFromEnd(size_t Offset, char *data, size_t ToRead, size_t *read = nullptr) const;

	bool WriteAt(size_t Offset, const char *data, size_t ToWrite, size_t *written = nullptr) const;
	bool WriteAtEnd(const char *data, size_t ToWrite, size_t *written = nullptr) const;

	size_t GetSize() const;

//	bool ReadFromSection(size_t SectionOffset, size_t Offset, ByteTable &data, size_t ToRead, size_t *read = nullptr) const;

	operator bool() const { return IsOk(); }

	void SetBlockAlignValue(unsigned value) { m_BlockWriteAllign = value; }
private: 
	union {
		struct {
			uint8_t CanRead : 1;
			uint8_t CanWrite: 1;
			uint8_t Ok : 1;
			uint8_t Opened : 1;
		};
		uint32_t _uintvalue;
	} Flags;
	unsigned m_BlockWriteAllign;

	struct FILEDeleter {
		void operator()(FILE *f);
	};
	std::unique_ptr<FILE, FILEDeleter> m_File;
	
	bool SeekBeg(size_t Offset) const;
	bool SeekEnd(size_t Offset) const;
	bool RawRead(char *data, size_t ToRead, size_t *read = nullptr) const;
	bool RawWrite(const char *data, size_t ToWrite, size_t *written = nullptr) const;
	bool CheckWriteAligment(bool DoFill) const;
};

} //namespace RDC 
} //namespace StarVFS 

#endif
