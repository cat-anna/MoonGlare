/*
  * Generated by cppsrc.sh
  * On 2016-01-03 22:42:45,89
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/

#pragma once
#ifndef Reader_H
#define Reader_H

namespace StarVFS {
namespace RDC {

class Reader {
public:
 	Reader();
 	virtual ~Reader();

	static bool CanOpenFile(const String& FileName);

	static bool TestHeaderIntegrity(UniqueBlockFileDevice &device, FileHeader *header = nullptr);

	const FileHeader& GetHeader() const { return m_Header; }
protected:
	BlockFileDevice* GetDevice() { return m_FileDevice.get(); }
	const BlockFileDevice* GetDevice() const { return m_FileDevice.get(); }
	FileHeader m_Header;

	void SetDevice(std::unique_ptr<BlockFileDevice> dev) {
		m_FileDevice.swap(dev);
	}
private:
	std::unique_ptr<BlockFileDevice> m_FileDevice;
};

} //namespace RDC 
} //namespace StarVFS 

#endif
