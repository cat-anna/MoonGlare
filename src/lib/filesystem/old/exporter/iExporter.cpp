/*
  * Generated by cppsrc.sh
  * On 2015-12-17 21:58:58,71
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/
#include "../StarVFSInternal.h"

namespace StarVFS {
namespace Exporters {

iExporter::iExporter(StarVFS *svfs): m_SVFS(svfs) {
}

iExporter::~iExporter() {
}

//-------------------------------------------------------------------------------------------------

ExportResult iExporter::DoExport(const String &VFSBase, const String &LocalFileName) {
	if (!GenerateFileList(VFSBase)) {
		//todo: log
		return ExportResult::FatalError;
	}

	return WriteLocalFile(LocalFileName);
}

//-------------------------------------------------------------------------------------------------

bool iExporter::GenerateFileList(const String &VFSBase) {
	m_FileList.clear();

	auto svfs = GetSVFS();
//	auto ft = svfs->GetFileTable();

	auto NewFile = [this]() -> ExporterFile& {
		m_FileList.emplace_back();
		auto &f = m_FileList.back();
		memset(&f, 0, sizeof(f));
		f.m_FileID = (FileID)(m_FileList.size() - 1);
		f.m_Flags.Valid = 1;
		return f;
	};

	bool NeedRehash = VFSBase.compare("/") != 0;

	auto h = svfs->OpenFile(VFSBase);
	if (!h) {
		STARVFSErrorLog("%s is not a valid. Cannot export!", VFSBase.c_str());
		return false;
	}
	if (!h.IsDirectory()) {
		STARVFSErrorLog("%s is not a directory. Cannot export!", VFSBase.c_str());
		return false;
	}

	NewFile();
	auto &root = NewFile();
	root.m_Flags.Directory = 1;
	root.m_Hash = FilePathHashAlgorithm::Hash("/", 1);

	std::function<bool(FileID, FileID pid)> ScanFid;

	ScanFid = [this, svfs, &NewFile, &ScanFid, NeedRehash](FileID inputfid, FileID pid) {
		auto handler = [this, pid, svfs, &NewFile, &ScanFid, NeedRehash](FileID fid) {
			auto &f = NewFile();
			auto &parent = m_FileList[pid];
			//		std::cout << "marked file: " << svfs->GetFullFilePath(fid) << " " << m_Files.size() << " " << &f << "\n";
			f.m_VFSFileID = fid;
			f.m_ParentID = parent.m_FileID;
			f.m_NextSiblingID = parent.m_FirstChildID;
			parent.m_FirstChildID = f.m_FileID;
			f.m_FileName = svfs->GetFileName(fid);

			auto fptr = svfs->GetFileTable()->GetFile(fid);

			if (!NeedRehash) {
				f.m_Hash = fptr->m_Hash;
			} else {
				StarVFSAssert(false);
			}

			f.m_Flags = svfs->GetFileTable()->GetFileFlags(fid);
			if (f.m_Flags.Directory) {
				ScanFid(fid, f.m_FileID);
			}

			return true;
		};

		auto h = svfs->OpenFile(inputfid);
		if (!h.EnumerateChildren(handler))
			return false;
		h.Close();
		return true;
	};

	return ScanFid(h.GetFID(), root.m_FileID);
}

} //namespace Exporters 
} //namespace StarVFS 
