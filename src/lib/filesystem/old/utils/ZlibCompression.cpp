/*
  * Generated by cppsrc.sh
  * On 2016-01-10 15:31:17,47
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/
#ifndef STARVFS_DISABLE_ZLIB

#include "../StarVFSInternal.h"
#include "ZlibCompression.h"

#include <zlib.h>

namespace StarVFS {
namespace Compression {

Zlib::Zlib() :m_Level(Compressionlevel::Medium) {
}

Zlib::~Zlib() {
}

//-----------------------------------------------------------------------------

int Zlib::GetZLibLevel() const {
	switch (m_Level) {
	case Compressionlevel::NoCompression:
		return Z_NO_COMPRESSION;
	case Compressionlevel::Low:
		return Z_BEST_SPEED;
	case Compressionlevel::Medium:
		return Z_DEFAULT_COMPRESSION;
	case Compressionlevel::High:
		return Z_BEST_COMPRESSION;
	default:
		STARVFSErrorLog("Unknown compression mode: %d", (int)m_Level);
		return Z_DEFAULT_COMPRESSION;
	}
}

//-----------------------------------------------------------------------------

CompressionResult Zlib::Compress(const ByteTable &in, ByteTable &out) {
	z_stream stream = {};

	auto ret = deflateInit(&stream, GetZLibLevel());
	if (ret != Z_OK)
		return CompressionResult::Failure;
	
	stream.avail_in = in.byte_size();
	stream.next_in = (Bytef*)in.get();

	ByteTable zout;
	zout.make_new(in.byte_size());

	stream.next_out = (Bytef*)zout.get();
	stream.avail_out = zout.byte_size();

	ret = deflate(&stream, Z_FINISH);    /* no bad return value */
	StarVFSAssert(ret != Z_STREAM_ERROR);  /* state not clobbered */

	if (ret == Z_OK) {
		deflateEnd(&stream);
		return CompressionResult::UnableToReduceSize;
	}

	StarVFSAssert(ret == Z_STREAM_END);

	size_t have = zout.byte_size() - stream.avail_out;
	zout.trim_table(have);

	deflateEnd(&stream);

	out.swap(zout);
	return CompressionResult::Success;
}

CompressionResult Zlib::Decompress(const ByteTable &in, ByteTable &out) {
	z_stream stream = {};
	if (!out)
		return CompressionResult::Success;

	auto ret = inflateInit(&stream);
	if (ret != Z_OK)
		return CompressionResult::Failure;

	stream.avail_in = in.byte_size();
	stream.next_in = (Bytef*)in.get();

	stream.next_out = (Bytef*)out.get();
	stream.avail_out = out.byte_size();

	ret = inflate(&stream, Z_FINISH);
	assert(ret != Z_STREAM_ERROR);  /* state not clobbered */

	StarVFSAssert(ret == Z_STREAM_END);

//	switch (ret) {
//	case Z_NEED_DICT:
//		ret = Z_DATA_ERROR;     /* and fall through */
//	case Z_DATA_ERROR:
//	case Z_MEM_ERROR:
//		(void)inflateEnd(&strm);
//		return ret;
//	}
//	have = CHUNK - strm.avail_out;
//	if (fwrite(out, 1, have, dest) != have || ferror(dest)) {
//		(void)inflateEnd(&strm);
//		return Z_ERRNO;
//	}          

	inflateEnd(&stream);
	return CompressionResult::Success;
}

} //namespace Compression 
} //namespace StarVFS 

#endif // STARVFS_DISABLE_ZLIB
