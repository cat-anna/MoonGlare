/*
* Generated by cppsrc.sh
* On 2015-02-26  2:51:49,93
* by Paweu
*/
/*--END OF HEADER BLOCK--*/

#pragma once
#ifndef InternalContainerHeaders_H
#define InternalContainerHeaders_H

#include "../config.h"

namespace StarVFS {
namespace Containers {
namespace InternalContainerHeaders {

//struct InternalFileFlags {
//	enum {
//		Valid = 0x01,
//		HasChildren = 0x02,
//
//		Folder = Valid | HasChildren,
//		File = Valid,
//	};
//};

//struct InternalFileNode : public RawFilePointer {
//	unsigned Flags = 0;
//	const void *Data = nullptr;
//	unsigned Size = 0;
//	const InternalFileNode* Children = nullptr;
//	const char *Name = 0;
//
////{Flags::Folder, 0, 0, Root_folder, "Internal", },
//
//	InternalFileNode() { }
//	InternalFileNode(unsigned flag, const void *data, unsigned size, const InternalFileNode *children, const char* name):
//		Flags(flag), Data(data), Size(size), Children(children), Name(name) { }
//
//	virtual FileSize GetFileSize() const override { return Size; };
//};

struct InternalFileFlags {
	enum {
		Valid		= 0x01,
		Directory	= 0x02,
	};
};

struct InternalFile {
	uint8_t m_Flags;
	uint8_t m_unused;

	CString m_FileName;
	FileSize m_Size;
	FileSize m_DataOffset;
	FilePathHash m_Hash;

	FileID m_FileID;
	FileID m_ParentID;
	FileID m_NextSiblingID;
	FileID m_FirstChildID;
};

enum class VersionMagic : uint32_t {
	Version0	= 0xDAED0001,
};

struct ContainerMeta {
	VersionMagic m_VersionMagic;
	uint8_t m_Flags;
	uint8_t m_unused;
	CString m_Name;
	FileID m_FileCount;

	const InternalFile *m_FileTable;
	const unsigned char *m_FileDataTable;
};

} //namespace InternalContainer 
} //namespace Containers 
} //namespace StarVFS

#endif
