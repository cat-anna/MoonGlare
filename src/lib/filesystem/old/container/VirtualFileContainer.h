/*
  * Generated by cppsrc.sh
  * On 2015-12-27 21:51:19,30
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/

#pragma once
#ifndef VirtualFileContainer_H
#define VirtualFileContainer_H

namespace StarVFS {
namespace Containers {

class VirtualFileInterface {
public:
	VirtualFileInterface();
	virtual ~VirtualFileInterface();

	virtual FileSize GetSize() const;

	virtual bool ReadFile(ByteTable &out) const;
	//write - tbd
};

class BaseDynamicFileInterface : public VirtualFileInterface {
public:
	BaseDynamicFileInterface();
	virtual ~BaseDynamicFileInterface();

	virtual FileSize GetSize() const final;
	virtual bool ReadFile(ByteTable &out) const final;

	virtual void GenerateContent(std::ostream &out) = 0;
private:
	mutable FileSize m_LastSize;
};

class InjectedFileInterface : public VirtualFileInterface {
public:
    InjectedFileInterface(std::string systemPath);
    virtual ~InjectedFileInterface();

    virtual FileSize GetSize() const final;
    virtual bool ReadFile(ByteTable &out) const final;
private:
    std::string systemPath;
};

using SharedVirtualFileInterface = std::shared_ptr<VirtualFileInterface>;
using WeakVirtualFileInterface = std::weak_ptr<VirtualFileInterface>;

class VirtualFileContainer : public iContainer {
public:
	VirtualFileContainer(FileTableInterface *fti);
 	virtual ~VirtualFileContainer();

	/** Container does not own registered files. */
	bool RegisterFile(SharedVirtualFileInterface SharedFile, const String& Path, bool ForcePath = false);
	/** Container do own added files. */
	bool AddFile(SharedVirtualFileInterface SharedFile, const String& Path, bool ForcePath = false);
	/** Drop ownership of file. Has effect only on added files. */
	bool DropFile(SharedVirtualFileInterface SharedFile);

    bool InjectFile(std::string systemPath, std::string virtualPath, bool ForcePath = false);

	virtual FileID GetFileCount() const override;
	virtual bool ReloadContainer() override;
	virtual bool RegisterContent() const override;

	virtual bool GetFileData(FileID ContainerFID, ByteTable &out) const override;
	virtual FileID FindFile(const String& ContainerFileName) const override;

	virtual String GetContainerURI() const override;
	virtual RWMode GetRWMode() const override { return RWMode::RW; };
private: 
	struct FileInfo {
		FileID m_InternalID;
		FileID m_GlobalID;
		WeakVirtualFileInterface m_WeakPtr;
		SharedVirtualFileInterface m_SharedPtr;
		String m_FullPath;

		SharedVirtualFileInterface GetPtr() const {
			if (m_SharedPtr)
				return m_SharedPtr;
			return m_WeakPtr.lock();
		}
	};
	std::vector<FileInfo> m_Files;
	FileID m_InternalIDCounter;

	bool ReloadFile(FileInfo &fi);
};

} //namespace Containers 
} //namespace StarVFS 

#endif
