/*
  * Generated by cppsrc.sh
  * On 
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/

#pragma once
#ifndef BlockProcessor_v1_H
#define BlockProcessor_v1_H

namespace StarVFS {
namespace RDC {
namespace Version_1 {

struct BlockProcessingResult {
	Compression::CompressionResult m_Compression = Compression::CompressionResult::NotEnabled;
	bool m_DeviceIOResult = false;
	bool m_DeviceIORequested = false;

	static BlockProcessingResult IOFailure() {
		BlockProcessingResult ret;
		ret.m_DeviceIORequested = true;
		ret.m_DeviceIOResult = false;
		return ret;
	}

	static BlockProcessingResult IOSuccess() {
		BlockProcessingResult ret;
		ret.m_DeviceIORequested = true;
		ret.m_DeviceIOResult = true;
		return ret;
	}

	operator bool() const {
		if (m_DeviceIORequested && !m_DeviceIOResult)
			return false;

		switch (m_Compression) {
		case Compression::CompressionResult::Success:
		case Compression::CompressionResult::NotEnabled:
		case Compression::CompressionResult::UnableToReduceSize:
			break;
		default:
			return false;
		}

		return true;
	}
};

class BlockProcessor {
public:
 	BlockProcessor();
 	~BlockProcessor();
	
	BlockProcessingResult ReadBlock(const BlockFileDevice *device, ByteTable &out, const DataBlock &block) const;
	BlockProcessingResult ReadBlock(const BlockFileDevice *device, ByteTable &out, const OffsetDataBlock &offset, const DataBlock &block) const;

	///write block at current position
	BlockProcessingResult WriteBlock(const BlockFileDevice *device, ByteTable in, DataBlock &block);
	BlockProcessingResult WriteBlock(const BlockFileDevice *device, ByteTable in, OffsetDataBlock &offset, DataBlock &block);

	BlockProcessingResult ProcessInputBlock(ByteTable &inout, const DataBlock &block) const;
	BlockProcessingResult ProcessInputBlock(ByteTable &inout, const OffsetDataBlock &block) const;
											 
	BlockProcessingResult ProcessOutputBlock(ByteTable &inout, DataBlock &block);
	BlockProcessingResult ProcessOutputBlock(ByteTable &inout, OffsetDataBlock &block);
protected:
	Compression::CompressionResult ProcessCompression(ByteTable &inout, CompressionInfo &config);
	Compression::CompressionResult ProcessDecompression(ByteTable &inout, const CompressionInfo &config) const;
private: 
};

} //namespace Version_1
} //namespace RDC 
} //namespace StarVFS 

#endif
