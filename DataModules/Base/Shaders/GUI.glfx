#include "Common.glsl"

uniform sampler2D Texture0;

uniform float Border;
uniform vec4 PanelColor;

uniform vec2 gPanelSize;
uniform float gPanelAspect;
uniform ivec2 gTileMode;

//---------------

interface VSOutput {
	vec2 VertexPosition;
};

//---------------

const float TextureDivs = 3.0f;
const float TextureRatio = 1.0f / TextureDivs;

shader VSmain(in vec3 Pos : 0, in vec3 Color : 3, out VSOutput VSout) {
	vec4 vpos = WorldMatrix * vec4(Pos, 1.0);

	gl_Position = vpos;
	VSout.VertexPosition = Pos.xy / gPanelSize;
};

float ProcessTile(float pos, int TileMode, float Border) {
	if(TileMode == 0) {
		return pos;
	} else {
		float InvBorder = 1.0f / Border;
		float BorderRatio = InvBorder / 3.0f;

		if (pos < Border) {
			return pos * BorderRatio;
		} else {
			if (pos >= 1.0f - Border){
				return (1.0f - pos) * BorderRatio;
			} else {
				float d = (pos - Border) / (1.0f - 2 * Border);
				if(TileMode < 0) {
					if(InvBorder > TextureDivs)
						d *= int(InvBorder) - TextureDivs + 1.0f;
				} else {
					d *= TileMode;
				}
				d -= int(d);

		//		d = 1.0f - d;
				return TextureRatio * ( 1.0f + d);
			}
		}
	}

	return pos;//bug catcher, shall not reach here
}

shader FSmain(in VSOutput FSin, out vec4 FragColor) {
	vec2 posin = FSin.VertexPosition;

	vec2 tex;
	tex.x = ProcessTile(posin.x, gTileMode.x, Border / gPanelAspect);
	tex.y = ProcessTile(posin.y, gTileMode.y, Border);

	FragColor = vec4(texture2D(Texture0, tex));
	FragColor.xyz = FragColor.xyz * PanelColor.xyz;
	FragColor *= PanelColor.a;
};

//---------------

program Panel {
	vs(330) = VSmain();
	fs(330) = FSmain();
};
