#include "Common.glsl"

uniform sampler2D Texture0;
uniform vec3 LightPosition;

//---------------

interface VSOutput {
    vec2 VertexUV0; 
    vec3 VertexNormal; 
	vec3 VertexWorldPos;
};

//---------------

shader Shadow_vs(in vec3 Pos : 0, in vec2 TexCoord : 1, in vec3 Normal : 2, out VSOutput VSout) { 
	gl_Position = WorldMatrix * vec4(Pos, 1.0);
    VSout.VertexUV0 = TexCoord;
//	VSout.VertexNormal = (ModelMatrix * vec4(Normal, 0.0)).xyz;
//	VSout.VertexWorldPos = (ModelMatrix * vec4(Pos, 1.0)).xyz;
}; 

shader Shadow_fs(in VSOutput FSin) {
	//vec4 color = texture2D(Texture0, FSin.VertexUV0);
	//FragColor = color;
	//if(color.a < Material.AlphaThreshold) {
	////	discard;
	//	color.a = 0.0;
	//	return;
	//}
	//DiffuseOut	= color.xyz * Material.BackColor;
	//WorldPosOut	= FSin.VertexWorldPos;					 out vec3 WorldPosOut : 0, out vec3 DiffuseOut : 1, out vec3 NormalOut : 2
	//NormalOut	=  vec3(distance(LightPosition, WorldPosOut) / 20.0);
};

//--------------- 

program default {
	vs(420) = Shadow_vs();
	fs(420) = Shadow_fs();
};
