#include "Common.glsl"
#include "Light.glsl"
#include "ShadowTest.glsl"
#include "Gamma.glsl"
#include "StaticFog.glsl"

uniform sampler2D Texture0;

//---------------

interface VSOutput {
    vec2 VertexUV0;
    vec3 VertexNormal;
	vec3 VertexWorldPos;
};

//-----------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------

shader Geometry_vs(in vec3 Pos : 0, in vec2 TexCoord : 1, in vec3 Normal : 2, out VSOutput VSout) {
	gl_Position = (CameraMatrix * ModelMatrix) * vec4(Pos, 1.0);
    VSout.VertexUV0 = TexCoord;
	VSout.VertexNormal = (ModelMatrix * vec4(Normal, 0.0)).xyz;
	VSout.VertexWorldPos = (ModelMatrix * vec4(Pos, 1.0)).xyz;
};

shader Geometry_fs(in VSOutput FSin, out vec3 WorldPosOut : 1, out vec3 DiffuseOut : 2, out vec3 NormalOut : 3) {
	vec4 color = texture2D(Texture0, FSin.VertexUV0);
	if(color.a < Material.AlphaThreshold) {
		color = vec4(0.0);
	//	discard;
	}
	DiffuseOut	= color.xyz * Material.BackColor;
	WorldPosOut	= FSin.VertexWorldPos;
	NormalOut	= FSin.VertexNormal;
};

program Geometry {
	vs(420) = Geometry_vs();
	fs(420) = Geometry_fs();
};

//---------------------

vec2 CalcTexCoord(vec4 Pos) {
    return vec2(Pos) / ScreenSize;
}

//---------------------

uniform sampler2D PositionMap;
uniform sampler2D ColorMap;
uniform sampler2D NormalMap;

shader Light_point_fs(in VSOutput FSin, out vec4 FragColor) {
    vec2 TexCoord = CalcTexCoord(gl_FragCoord);
	vec3 WorldPos = texture(PositionMap, TexCoord).xyz;
	vec3 Color = texture(ColorMap, TexCoord).xyz;
	vec3 Normal = texture(NormalMap, TexCoord).xyz;
//	Normal = normalize(Normal);
	FragColor = vec4(Color, 1.0) * CalcPointLight(WorldPos, Normal);
	FragColor.xyz *= CalcStaticShadow(WorldPos);
};

shader Light_directional_fs(in VSOutput FSin, out vec4 FragColor) {
    vec2 TexCoord = CalcTexCoord(gl_FragCoord);
	vec3 WorldPos = texture(PositionMap, TexCoord).xyz;
	vec3 Color = texture(ColorMap, TexCoord).xyz;//ColorMap
	vec3 Normal = texture(NormalMap, TexCoord).xyz;
	//Normal = normalize(Normal);
	FragColor = vec4(Color, 1.0) * CalcDirectionalLight(WorldPos, Normal);
	FragColor.xyz *= CalcStaticShadow(WorldPos);
};

shader Light_spot_fs(in VSOutput FSin, out vec4 FragColor) {
    vec2 TexCoord = CalcTexCoord(gl_FragCoord);
	vec3 WorldPos = texture(PositionMap, TexCoord).xyz;
	vec3 Color = texture(ColorMap, TexCoord).xyz;
	vec3 Normal = texture(NormalMap, TexCoord).xyz;
	//Normal = normalize(Normal);

	FragColor = vec4(Color, 1) * CalcSpotLight(WorldPos, Normal);

	if(EnableShadowTest) {
		FragColor.xyz *= PlanarShadowTest(WorldPos, Normal);
	}
	FragColor.xyz *= CalcStaticShadow(WorldPos);
};

shader Light_vs(in vec3 Position : 0, out VSOutput VSout) {
    gl_Position = WorldMatrix * vec4(Position, 1.0);
};

program Light_point {
	vs(420) = Light_vs();
	fs(420) = Light_point_fs();
};

program Light_directional {
	vs(420) = Light_vs();
	fs(420) = Light_directional_fs();
};

program Light_spot {
	vs(420) = Light_vs();
	fs(420) = Light_spot_fs();
};
//---------------------

shader ds_stencil_fs(in VSOutput FSin) {
};

program Stencil {
	vs(420) = Light_vs();
	fs(420) = ds_stencil_fs();
};
