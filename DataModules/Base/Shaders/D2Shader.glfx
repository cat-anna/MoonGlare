#include "Common.glsl"

uniform sampler2D Texture0;
uniform float gVisibility;

//---------------

interface VSOutput {
    vec2 VertexUV0; 
    // vec3 VertexNormal; 
	// vec3 VertexWorldPos;
};

//-----------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------

shader d2_vs(in vec3 Pos : 0, in vec2 TexCoord : 1, in vec3 Normal : 2, out VSOutput VSout) { 
	vec4 vpos = WorldMatrix * vec4(Pos, 1.0);
	
	gl_Position = vpos;
	// VSout.VertexPosition = vpos;
    VSout.VertexUV0 = TexCoord;
	// VSout.VertexNormal = (ModelMatrix * vec4(Normal, 0.0)).xyz;
	// VSout.VertexWorldPos = (ModelMatrix * vec4(Pos, 1.0));
};

shader d2_fs(in VSOutput FSin, out vec4 FragColor) {
	 FragColor = vec4(texture2D(Texture0, FSin.VertexUV0));
	// FragColor = vec4(1);
	// vec3 pos = vec3(5, 0.5, -0.5);
	// vec3 v = vec3();
	// FragColor.x = texture( Texture0, v );
	// FragColor=vec4(0, v, 0,  1);
	// if(FragColor.a < Material.AlphaThreshold) 
		// discard;
	FragColor.xyz *= Material.BackColor;
	//FragColor = ApplyStaticFog(FragColor, FSin.VertexPosition);
};

program default {
	vs(420) = d2_vs();
	fs(420) = d2_fs();
};

//---------------------

uniform sampler2D PositionMap;
uniform sampler2D ColorMap;
uniform sampler2D NormalMap;

shader Light_point_fs(in VSOutput FSin, out vec4 FragColor) {
    vec2 TexCoord = CalcTexCoord();
	vec3 WorldPos = texture(PositionMap, TexCoord).xyz;
	vec3 Color = texture(ColorMap, TexCoord).xyz;
	vec3 Normal = texture(NormalMap, TexCoord).xyz;
//	Normal = normalize(Normal);
	FragColor = vec4(Color, 1.0) * CalcPointLight(WorldPos, Normal);	
};

shader Light_directional_fs(in VSOutput FSin, out vec4 FragColor) {
    vec2 TexCoord = CalcTexCoord();
	vec3 WorldPos = texture(PositionMap, TexCoord).xyz;
	vec3 Color = texture(ColorMap, TexCoord).xyz;//ColorMap
	vec3 Normal = texture(NormalMap, TexCoord).xyz;
	//Normal = normalize(Normal);
	FragColor = vec4(Color, 1.0) * CalcDirectionalLight(WorldPos, Normal);	
};

shader Light_spot_fs(in VSOutput FSin, out vec4 FragColor) {
    vec2 TexCoord = CalcTexCoord();
	vec3 WorldPos = texture(PositionMap, TexCoord).xyz;
	vec3 Color = texture(ColorMap, TexCoord).xyz;
	vec3 Normal = texture(NormalMap, TexCoord).xyz;
	//Normal = normalize(Normal);

	FragColor = vec4(Color, 1) * CalcSpotLight(WorldPos, Normal);

	if(EnableShadowTest) {
		FragColor.xyz *= PlanarShadowTest(WorldPos, Normal);
	}

//	s = texture(PlaneShadowMap, ShadowCoord.xy).z;
//	if(s < ShadowCoord.z - bias)
//		v = 0;

};

shader Light_vs(in vec3 Position : 0, out VSOutput VSout) {          
    gl_Position = WorldMatrix * vec4(Position, 1.0);
};

program Light_point {
	vs(420) = Light_vs();
	fs(420) = Light_point_fs();
};

program Light_directional {
	vs(420) = Light_vs();
	fs(420) = Light_directional_fs();
};

program Light_spot {
	vs(420) = Light_vs();
	fs(420) = Light_spot_fs();
};
