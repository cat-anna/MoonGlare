/*
	Generated by cppsrc.sh
	On 2015-01-07  0:05:01,17
	by Paweu
*/

#pragma once
#ifndef StaticMoveController_H
#define StaticMoveController_H

namespace MoveControllers {

DECLARE_SCRIPT_EVENT_VECTOR(StaticMoveControllerEvents, MoveControllerScriptEvents,
	SCRIPT_EVENT_ADD(),
	SCRIPT_EVENT_REMOVE());

class StaticMoveController : public iMoveController {
	GABI_DECLARE_CLASS(StaticMoveController, iMoveController);
	DECLARE_SCRIPT_HANDLERS(StaticMoveControllerEvents);
	DECLARE_EXCACT_SCRIPT_CLASS_GETTER();
public:
	StaticMoveController(::Core::Objects::Object *Owner = 0);
 	virtual ~StaticMoveController();

	virtual void DoMove(const ::Core::MoveConfig& conf);

	virtual bool LoadFromXML(const xml_node Node);
	virtual iMoveController* Duplicate(::Core::Objects::Object *NewOwner) const;

	virtual int InvokeOnStart();
	virtual int InvokeOnStop();

	void SetStaticRotation(float x, float y, float z);
	void SetStaticSpeed(float x, float y, float z);
	void SetStaticAcceleration(float x, float y, float z);
	static void RegisterScriptApi(ApiInitializer &api);
protected:
	StaticMoveController(const StaticMoveController& source, ::Core::Objects::Object *Owner);
	Physics::vec3 m_StaticRotation, m_StaticSpeed, m_Acceleration;
	Physics::vec3 m_Rotation;
private:
};

} //namespace MoveControllers 

#endif
