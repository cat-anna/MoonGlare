/*
  * Generated by cppsrc.sh
  * On 2015-03-01  7:01:47,55
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/

#pragma once
#ifndef GUIEngine_H
#define GUIEngine_H
#pragma once

#include <source/Utils/Memory.h>

namespace MoonGlare {
namespace GUI {

struct EventDispatcherTable;

using GuiEventBuffer = Utils::Memory::DynamicCyclicBuffer < 100, Events::Event, Utils::Memory::MemoryNoLockPolicy> ;

class GUIEngine : public cRootClass {
	//GABI_DECLARE_CLASS_SINGLETON(GUIEngine, cRootClass)
	GABI_DECLARE_STATIC_CLASS(GUIEngine, cRootClass)
	DECLARE_EXCACT_SCRIPT_CLASS_GETTER();
	friend struct EventDispatcherTable;
public:
 	GUIEngine();
 	virtual ~GUIEngine();

	bool Initialize(Graphic::Window *Window);
	bool Finalize();

	void Draw(Graphic::cRenderDevice &dev);
	void Process(const Core::MoveConfig &conf);

	iWidget* FindWidget(const string& name) const;
	void SetFocus(iWidget *widget);
	void SetHovered(iWidget *widget);

	Screen* GetRootWidget() { return m_RootWidget.get(); }
	StyleManager* GetStyleManager() { return m_StyleManager.get(); }
	Mouse* GetCursor() { return m_Mouse.get(); }

	void Activate();
	void Deactivate();

	void EnableCursor(bool state);

	enum class Flags : unsigned {
		CursorInputEnabled		= 0x00000001,
		KeyboardInputEnabled	= 0x00000002,
	};

	DefineFlagGetter(m_Flags, (unsigned)Flags::CursorInputEnabled, CursorInputEnabled);
	DefineFlagGetter(m_Flags, (unsigned)Flags::KeyboardInputEnabled, KeyboardInputEnabled);

	template<class T>
	bool PostEvent(T &&event) {
		if (m_EventQueue.push(event))
			return true;
		AddLogf(Warning, "Failed to post event of type %s", typeid(T).name());
		return false;
		//m_EventQueueMutex.lock();
		//m_EventQueue.emplace_back(std::forward<T>(event));
		//m_EventQueueMutex.unlock();
	}

	static void RegisterScriptApi(ApiInitializer &api);
protected:
	std::unique_ptr<Screen> m_RootWidget;
	std::unique_ptr<StyleManager> m_StyleManager;
	std::unique_ptr<Mouse> m_Mouse;
	std::unique_ptr<::Core::MouseEventDispatcher> m_MouseObserver;
	Graphic::Window *m_Window;

	iWidget *m_FocusedWidget;

	unsigned m_Flags;
	DefineFlagSetter(m_Flags, (unsigned)Flags::CursorInputEnabled, CursorInputEnabled)
	DefineFlagSetter(m_Flags, (unsigned)Flags::KeyboardInputEnabled, KeyboardInputEnabled)

	void ConstructGUI(Utils::Scripts::TableDispatcher &table);

	void DispatchPendingEvents();
	void EventUnknownAction(Events::Event &);
	void EventMouseUpAction(Events::MouseUpEvent &);
	void EventMouseDownAction(Events::MouseDownEvent &);
private:
	GuiEventBuffer m_EventQueue;
	//std::recursive_mutex m_EventQueueMutex;
	//std::list<std::unique_ptr<Events::Event>> m_EventQueue;
};

} //namespace GUI 
} //namespace MoonGlare 

#endif
