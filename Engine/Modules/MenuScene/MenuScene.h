/*
  * Generated by cppsrc.sh
  * On 2015-03-07 23:01:04,40
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/

#pragma once
#ifndef MenuScene_H
#define MenuScene_H

namespace MoonGlare {
namespace Modules {
namespace MenuScene {

struct MenuSceneConfig {
	string StyleName;
	string StringTable;
	GUI::Point ItemSize;
	
	bool Load(const xml_node node);
};

class MenuScene : public ::Core::Scene::ciScene {
	GABI_DECLARE_CLASS(MenuScene, ::Core::Scene::ciScene)
	DECLARE_EXCACT_SCRIPT_CLASS_GETTER();
	DISABLE_COPY();
public:
 	MenuScene();
 	virtual ~MenuScene();

	virtual int InvokeOnTimer(int TimerID) override;
	virtual int InvokeOnEscape() override;
	virtual int InvokeOnBeginScene() override;
	virtual int InvokeOnEndScene() override;
	virtual int InvokeOnInitialize() override;
	virtual int InvokeOnFinalize() override;

	virtual void BeginScene() override;
	virtual void EndScene() override;

	virtual void DoMove(const Core::MoveConfig &conf) override;

	static void RegisterScriptApi(ApiInitializer &api);

	const MenuSceneConfig& GetConfiguration() const { return m_Config; }

	void GoBack() {
		m_ActionQueue.Add([this]() {
			GoBackImpl();
		});
	}
	void EnterMenu(SharedMenuItemInfo MenuItem) {
		m_ActionQueue.Add([this, MenuItem]() {
			EnterMenuImpl(MenuItem);
		});
	}
protected:
	SharedMenuItemInfo m_MenuTreeRoot;
	struct MenuState {
		SharedMenuItemInfo MenuItem;
	};
	std::list<MenuState> m_MenuStack;
	MenuSceneConfig m_Config;
	Utils::ActionQueue m_ActionQueue;

	GUI::Widgets::Table *m_MenuTable = nullptr;
	GUI::Widgets::Panel *m_OuterPanel = nullptr;

	virtual bool DoInitialize() override;
	virtual bool DoFinalize() override;

	virtual bool LoadMeta(const xml_node Node) override;

	bool RebuildMenu();
	bool EnterMenuImpl(SharedMenuItemInfo MenuItem);
	bool GoBackImpl();
private: 
};

} //namespace MenuScene 
} //namespace Modules 
} //namespace MoonGlare 

#endif
