/*
	Generated by cppsrc.sh
	On 2015-01-14 22:33:57,87
	by Paweu
*/

#pragma once
#ifndef DerefferedPipeline_H
#define DerefferedPipeline_H

namespace Graphic {
namespace Dereferred {

class DereferredPipeline : public cRootClass {
	GABI_DECLARE_CLASS_NOCREATOR(DereferredPipeline, cRootClass);
public:
 	DereferredPipeline();
 	virtual ~DereferredPipeline();

	bool Initialize();
	bool Finalize();

	bool Execute(::Core::ciScene *scene, cRenderDevice& dev);

	void BeginFrame(cRenderDevice& dev);
	bool RenderShadows(::Core::ciScene *scene, cRenderDevice& dev);
	bool RenderGeometry(::Core::ciScene *scene, cRenderDevice& dev);
	bool RenderLights(::Core::ciScene *scene, cRenderDevice& dev);

	//bool RenderPointLightsShadows(Core::ciScene *scene, Light::PointLightList &lights, cRenderDevice& dev);
	bool RenderSpotLightsShadows(::Core::ciScene *scene, Light::SpotLightList &lights, cRenderDevice& dev);

	bool RenderPointLights(Light::PointLightList &lights, cRenderDevice& dev);
	bool RenderDirectionalLights(Light::DirectionalLightList &lights, cRenderDevice& dev);
	bool RenderSpotLights(Light::SpotLightList &lights, cRenderDevice& dev);

	void FinalPass(const uvec2 &size);
	void EndFrame();
	DereferredFrameBuffer m_Buffer;

	struct Flags {
		enum {
			Ready		= 1,
		};
	};

	DefineFlagGetter(m_Flags, Flags::Ready, Ready);
private: 
	unsigned m_Flags;
	Shader *m_StencilShader;
	Shaders::ShadowMapShader *m_ShadowMapShader;
	GeometryPassShader *m_GeometryShader;
	PointLightShader *m_PointLightShader;
	DirectionalLightShader *m_DirectionalLightShader;
	SpotLightShader *m_SpotLightShader;
	
	::DataClasses::ModelPtr m_Sphere, m_Cone;
	VAO m_DirectionalQuad;

	DefineFlagSetter(m_Flags, Flags::Ready, Ready);

	bool InitializeDirectionalQuad();
};

} //namespace Dereferred
} //namespace Graphic 

#endif
