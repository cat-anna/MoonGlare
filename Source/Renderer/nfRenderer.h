/*
* Generated by cppsrc.sh
* On 2017-02-09 21:40:01,47
* by Kalessin
*/
/*--END OF HEADER BLOCK--*/

#pragma once

#include "OpenGLTypes.h"
#include "Handles.h"

namespace MoonGlare::Renderer {

class RendererFacade;
using UniqueRenderer = std::unique_ptr<RendererFacade>;

class Frame;
class RenderDevice;
class Context;
class ScriptApi;

class alignas(16) TextureRenderTask;

struct alignas(16) VirtualCamera;

struct ContextCreationInfo {
	uint32_t m_Width = 800;
	uint32_t m_Height = 600;
	int32_t MonitorIndex = -1;
	bool FullScreen = false;
	const char *Title = "Window";
};

namespace Commands {
	class alignas(16) CommandQueue;
}

namespace Resources {
	class alignas(16) ResourceManager;
	class alignas(16) TextureResource;
}


class RendererException : public std::runtime_error {
public:
	RendererException(std::string msg) : std::runtime_error(std::move(msg)) {}
};

class CriticalException : public RendererException {
public:
	CriticalException(std::string msg) : RendererException(std::move(msg)){}
};

class InitFailureException : public CriticalException {
public:
	InitFailureException(std::string msg) : CriticalException(std::move(msg)) {}
};

#define RendererAssert(COND) assert(COND)

} //namespace MoonGlare::Renderer
