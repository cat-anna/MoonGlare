/*
* Generated by cppsrc.sh
* On 2017-02-09 21:40:01,47
* by Kalessin
*/
/*--END OF HEADER BLOCK--*/

#pragma once

#include <Assets/nfAssets.h>

#include "Device/Types.h"
#include "Handles.h"

#include "Exceptions.h"

namespace MoonGlare::Renderer {

class iContext;
class iContextInputHandler;
class iRendererFacade;

using StackAllocator = ::Space::Memory::StackAllocator<::Space::Memory::StaticTableMemory>;

template<uint32_t SIZE>
struct StackAllocatorMemory {
    StackAllocator m_Allocator;
    StackAllocator::Item_t m_Memory[SIZE];

    StackAllocatorMemory() : m_Allocator(m_Memory, SIZE)  {
        m_Allocator.Clear();
        memset(m_Memory, 0, sizeof(m_Memory));
    }
};

class RendererFacade;
using UniqueRenderer = std::unique_ptr<RendererFacade>;

class Frame;
class RenderDevice;
class Context;
class ScriptApi;

class iAsyncLoader;
class iAsyncFileSystemRequest;

class alignas(16) TextureRenderTask;

struct alignas(16) VirtualCamera;

struct ContextCreationInfo {
    uint32_t m_Width = 800;
    uint32_t m_Height = 600;
    int32_t m_Monitor = -1;
    bool m_FullScreen = false;
    const char *m_Title = "";
    bool visible = true;
};

namespace Commands {
    class alignas(16) CommandQueue;

    struct CommitCommandQueue {
        CommandQueue *m_Queue;
        std::atomic<bool> m_Commited;
    };
}

namespace Resources {
    class alignas(16) ResourceManager;
    class 
        //alignas(16)
        TextureResource;
    class alignas(16) MaterialManager;
    class 
        //alignas(16) 
        MeshManager;
}

} //namespace MoonGlare::Renderer
