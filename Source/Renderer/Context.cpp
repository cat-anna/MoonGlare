/*
  * Generated by cppsrc.sh
  * On 2017-02-10 21:51:36,38
  * by Kalessin
*/
/*--END OF HEADER BLOCK--*/

#include "Context.h"

#include "Commands/CommandQueue.h"
#include "Commands/OpenGL/ControllCommands.h"
#include "Commands/OpenGL/FramebufferCommands.h"

namespace MoonGlare::Renderer {

Context::Context() {
	THROW_ASSERT(s_GLFWInitialized, "GLFW is not initialized. Cannot create window!");
}

Context::~Context() {
}

//----------------------------------------------------------------------------------

bool Context::s_GLFWInitialized = false;

bool Context::InitializeSubSystem() {
	if (s_GLFWInitialized) 
		return false;

	glfwSetErrorCallback(&glfw_error_callback);

	CriticalCheck(glfwInit(), "Unable to initialize GLFW!");
	AddLog(Debug, "GLFW initialized");
	AddLog(System, "GLFW version: " << glfwGetVersionString());


	auto monitor = glfwGetPrimaryMonitor();
	AddLogf(System, "Primary monitor: %s", glfwGetMonitorName(monitor));
	//AddLog(System, "Current mode: " << DumpGLFWMode(glfwGetVideoMode(monitor)));

	s_GLFWInitialized = true;
	return true;
}

bool Context::FinalizeSubSystem() {
	if (!s_GLFWInitialized)
		return false;

	glfwTerminate();
	AddLog(Debug, "GLFW finalized");

	s_GLFWInitialized = false;
	return true;
}

void Context::MakeCurrent() {
	glfwMakeContextCurrent(m_Window);
}

//----------------------------------------------------------------------------------

bool Context::Initialize(const ContextCreationInfo &ctxifo, RendererFacade *renderer, RenderDevice *device) {
	if (!CreateWindow(ctxifo)) {
		AddLog(Error, "Context creation failed!");
		return false;
	}

	MakeCurrent();

//common opengl init
	glClearColor(0.0f, 0.0f, 0.f, 0.0f);
	glDepthFunc(GL_LEQUAL);
	glEnable(GL_DEPTH_TEST);
	//glDisable(GL_FRAMEBUFFER_SRGB);

//initialize default texture
	glEnable(GL_TEXTURE_2D);
	glBindTexture(GL_TEXTURE_2D, 0);
	unsigned char texd[] = { 255, 255, 255, };// 0, 255, 0, 0, 0, 255, 255, 255, 255 };
	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, 1, 1, 0, GL_RGB, GL_UNSIGNED_BYTE, texd);

	return true;
}

bool Context::InitializeWindowLayer(Commands::CommandQueue &q, Frame *frame) {
	RendererAssert(frame);
	
	using namespace Commands;

	//clear
	//q.MakeCommand<SetViewport>((GLint)0, (GLint)0, (GLsizei)m_Size[0], (GLsizei)m_Size[1]);
	//q.MakeCommand<FramebufferDrawBind>(InvalidFramebufferHandle);

	//q.SetQueuePreamble();

	return true;
}

bool Context::Finalize() {	
	glfwDestroyWindow(m_Window);

	m_Window = nullptr;
	return true;
}

//----------------------------------------------------------------------------------

bool Context::CreateWindow(ContextCreationInfo ctxifo) {
	glfwWindowHint(GLFW_RESIZABLE, GL_FALSE);
//	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 4);
//	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 0);
#ifdef DEBUG
	glfwWindowHint(GLFW_OPENGL_DEBUG_CONTEXT, GL_TRUE);
#endif
	//glfwWindowHint(GLFW_SRGB_CAPABLE, GL_FALSE);

	GLFWmonitor *monitor = nullptr;

	if (ctxifo.FullScreen) {
		if (ctxifo.MonitorIndex < 0) {
			monitor = glfwGetPrimaryMonitor();
		} else {
			int c;
			auto mont = glfwGetMonitors(&c);
			if (c > ctxifo.MonitorIndex)
				monitor = mont[ctxifo.MonitorIndex];
		}
	}

	if (ctxifo.m_Width == 0 || ctxifo.m_Height == 0) {
		auto mon = glfwGetPrimaryMonitor();
		auto mode = glfwGetVideoMode(mon);
		ctxifo.m_Width = mode->width; 
		ctxifo.m_Height = mode->height;
	}

	m_Window = glfwCreateWindow(ctxifo.m_Width, ctxifo.m_Height, ctxifo.Title, monitor, 0);
	CriticalCheck(m_Window, "Unable to create new window!");

	glfwGetWindowSize(m_Window, &m_Size[0], &m_Size[1]);

	return true;
}

//----------------------------------------------------------------------------------

void Context::glfw_error_callback(int error, const char* description) {
	AddLogf(Error, "GLFW error: code='%d' descr='%s'", error, description);
}

} //namespace MoonGlare::Renderer 

