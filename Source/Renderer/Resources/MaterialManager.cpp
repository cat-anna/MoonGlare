/*
  * Generated by cppsrc.sh
  * On 2017-02-28 19:46:14,71
  * by Kalessin
*/
/*--END OF HEADER BLOCK--*/

#include "MaterialManager.h"

namespace MoonGlare::Renderer::Resources {

void MaterialManager::Initialize(ResourceManager * Owner) {
	RendererAssert(Owner);
	m_ResourceManager = Owner;
}

void MaterialManager::Finalize() {
}

Material *MaterialManager::GetMaterial(MaterialResourceHandle out) {
	RendererAssert(out.m_TmpGuard == out.GuardValue);

	if (m_AllocationBitmap.IsAllocated(out.m_Index))
		return &m_Materials[out.m_Index];

	return nullptr;
}

//---------------------------------------------------------------------------------------

bool MaterialManager::Allocate(MaterialResourceHandle &out, Material ** materialptr) {
	RendererAssert(out.m_TmpGuard != out.GuardValue);
	Bitmap::Index_t index;
	if (m_AllocationBitmap.Allocate(index)) {
		//if (m_GLHandle[index] == InvalidTextureHandle) {
		//	//IncrementPerformanceCounter(OpenGLAllocations);
		//	auto arg = queue.PushCommand<Commands::TextureSingleAllocate>();
		//	arg->m_Out = &m_GLHandle[index];
		//}
		out.m_Index = static_cast<MaterialResourceHandle::Index_t>(index);
		out.m_TmpGuard = out.GuardValue;
		//IncrementPerformanceCounter(SuccessfulAllocations);
		if (materialptr)
			*materialptr = &m_Materials[index];
		return true;
	}
	else {
		AddLogf(Debug, "material allocation failed");
		//IncrementPerformanceCounter(FailedAllocations);
		return false;
	}
}

} //namespace MoonGlare::Renderer::Resources 
