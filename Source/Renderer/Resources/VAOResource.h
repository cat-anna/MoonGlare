/*
  * Generated by cppsrc.sh
  * On 2017-02-13 22:45:35,93
  * by Kalessin
*/
/*--END OF HEADER BLOCK--*/

#pragma once

#include "../nfRenderer.h"
#include "../Configuration.Renderer.h"

#include "VAOBuilder.h"

namespace MoonGlare::Renderer::Resources {

class alignas(16) VAOResource {
	using ThisClass = VAOResource;
	using ConfRes = Configuration::Resources;
	using Conf = Configuration::VAO;

	static constexpr VAOResourceHandle::Index_t GuardValue = 0xDEAD;
public:
	bool Initialize(ResourceManager* Owner);
	bool Finalize();

	bool Allocate(Commands::CommandQueue &queue, VAOResourceHandle &out);
	void Release(Commands::CommandQueue &queue, VAOResourceHandle &h);

	bool Allocate(Frame *frame, VAOResourceHandle &out);
	void Release(Frame *frame, VAOResourceHandle &h);

	Device::VAOHandle* GetHandleArrayBase() { return &m_GLHandle[0]; }

	VAOBuilder GetVAOBuilder(Commands::CommandQueue &q, VAOResourceHandle &h, bool AllowAllocation = false) {
		if (AllowAllocation && h.m_TmpGuard != GuardValue) {
			Allocate(q, h);
		}

		RendererAssert(h.m_TmpGuard == GuardValue);
		RendererAssert(h.m_Index < Conf::VAOLimit);

		return VAOBuilder {
			&q,
			&m_GLVAOBuffsers[h.m_Index],
			&m_GLHandle[h.m_Index], 
		};
	}
private: 
	template<typename T>
	using Array = std::array<T, Conf::VAOLimit>;
	using Bitmap = ConfRes::BitmapAllocator<Conf::VAOLimit>;
	using VAOBuffers = Conf::VAOBuffers;

	Bitmap m_AllocationBitmap;
	Array<Device::VAOHandle> m_GLHandle;
	Array<VAOBuffers> m_GLVAOBuffsers;
	ResourceManager *m_ResourceManager = nullptr;
	void* padding;

	DeclarePerformanceCounter(SuccessfulAllocations);
	DeclarePerformanceCounter(SuccessfulDellocations);
	DeclarePerformanceCounter(FailedAllocations);
	DeclarePerformanceCounter(FailedDellocations);
	DeclarePerformanceCounter(OpenGLAllocations);
	DeclarePerformanceCounter(OpenGLDeallocations);
};

static_assert((sizeof(VAOResource) % 16) == 0, "Invalid size!");
//static_assert(std::is_trivial<TextureResource>::value, "Invalid size!");//atomics

} //namespace MoonGlare::Renderer::Resources 
