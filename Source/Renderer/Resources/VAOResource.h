/*
  * Generated by cppsrc.sh
  * On 2017-02-13 22:45:35,93
  * by Kalessin
*/
/*--END OF HEADER BLOCK--*/

#pragma once

#include "../nfRenderer.h"
#include "../Configuration.Renderer.h"

namespace MoonGlare::Renderer::Resources {

class alignas(16) VAOResource {
	using ThisClass = VAOResource;
	using Conf = Configuration::Resources;

	static constexpr VAOResourceHandle::Index_t GuardValue = 0xDEAD;
public:
	bool Initialize(ResourceManager* Owner);
	bool Finalize();

	bool Allocate(Commands::CommandQueue &queue, VAOResourceHandle &out);

	bool Allocate(Frame *frame, VAOResourceHandle &out);
	void Release(Frame *frame, VAOResourceHandle h);

	VAOHandle* GetHandleArrayBase() { return &m_GLHandle[0]; }
private: 
	template<typename T>
	using Array = std::array<T, Conf::VAOLimit>;
	using Bitmap = Conf::BitmapAllocator<Conf::VAOLimit>;

	Bitmap m_AllocationBitmap;
	Array<VAOHandle> m_GLHandle;
	ResourceManager *m_ResourceManager = nullptr;
	void* padding;

	DeclarePerformanceCounter(SuccessfulAllocations);
	DeclarePerformanceCounter(SuccessfulDellocations);
	DeclarePerformanceCounter(FailedAllocations);
	DeclarePerformanceCounter(FailedDellocations);
	DeclarePerformanceCounter(OpenGLAllocations);
	DeclarePerformanceCounter(OpenGLDeallocations);
};

static_assert((sizeof(VAOResource) % 16) == 0, "Invalid size!");
//static_assert(std::is_trivial<TextureResource>::value, "Invalid size!");//atomics

} //namespace MoonGlare::Renderer::Resources 
