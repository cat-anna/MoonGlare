/*
  * Generated by cppsrc.sh
  * On 2017-02-13 22:45:58,54
  * by Kalessin
*/
/*--END OF HEADER BLOCK--*/

#pragma once

#include "AssetLoaderInterface.h"

#include "TextureResource.h"
#include "VAOResource.h"
#include "ShaderResource.h"

namespace MoonGlare::Renderer::Resources {

class alignas(16) ResourceManager final {
public:
	bool Initialize(RendererFacade *Renderer, AssetLoader* Assets);
	bool Finalize();

	RendererFacade *GetRendererFacade() { return m_RendererFacade; }

	TextureResource& GetTextureAllocator() {
		RendererAssert(this); 
		return m_TextureResource;
	}
	VAOResource& GetVAOResource() {
		RendererAssert(this);
		return m_VAOResource;
	}
	ShaderResource& GetShaderResource() {
		RendererAssert(this);
		return m_ShaderResource;
	}

	void Release(Frame *frame, TextureResourceHandle &texres) {
		GetTextureAllocator().Release(frame, texres);
	}
	void Release(Frame *frame, VAOResourceHandle &vaores) {
		GetVAOResource().Release(frame, vaores);
	}
	bool Allocate(Frame *frame, TextureResourceHandle &resH) {
		return GetTextureAllocator().Allocate(frame, resH);
	}
	bool Allocate(Frame *frame, VAOResourceHandle &resH) {
		return GetVAOResource().Allocate(frame, resH);
	}
private: 
	RendererFacade *m_RendererFacade = nullptr;
	AssetLoader *m_AssetLoader = nullptr;
	void* padding[2];
	TextureResource m_TextureResource;
	VAOResource m_VAOResource;
	ShaderResource m_ShaderResource;
};

static_assert((sizeof(ResourceManager) % 16) == 0, "Invalid size!");

} //namespace MoonGlare::Renderer::Resources 
