/*
  * Generated by cppsrc.sh
  * On 2017-02-13 22:45:58,54
  * by Kalessin
*/
/*--END OF HEADER BLOCK--*/

#pragma once
#include <Foundation/iFileSystem.h>

#include <Assets/AssetLoaderInterface.h>
#include "TextureResource.h"
#include "VAOResource.h"
#include "Shader/ShaderResource.h"

#include "../iAsyncLoader.h"

namespace MoonGlare::Renderer::Resources {

class AsyncLoader;

class MeshManager;
class textureResource;
class MaterialManager;
class VAOResource;

class 
    //alignas(16) 
    ResourceManager final {
public:
    ResourceManager();
    ~ResourceManager();

    bool Initialize(RendererFacade *Renderer, Asset::AssetLoader* Assets, iFileSystem *fileSystem);
    bool Finalize();

    const Configuration::RuntimeConfiguration* GetConfiguration() const;
    RendererFacade *GetRendererFacade() { return m_RendererFacade; }
    AsyncLoader* GetLoader() { return m_AsyncLoader.get(); }
    iAsyncLoader* GetLoaderIf();

    TextureResource& GetTextureResource() {
        RendererAssert(this); 
        return *textureResource;
    }
    VAOResource& GetVAOResource() {
        RendererAssert(this);
        return *vaoManager;
    }
    Shader::ShaderResource& GetShaderResource() {
        RendererAssert(this);
        return m_ShaderResource;
    }
    MaterialManager& GetMaterialManager() {
        RendererAssert(this);
        return *materialManager;
    }
    MeshManager& GetMeshManager() {
        RendererAssert(this);
        return *meshManager;
    }

    void Release(Frame *frame, TextureResourceHandle &texres) {
        GetTextureResource().Release(texres);
    }
    void Release(Frame *frame, VAOResourceHandle &vaores) {
        GetVAOResource().Release(frame, vaores);
    }
    bool Allocate(Frame *frame, TextureResourceHandle &resH) {
        return GetTextureResource().Allocate(resH);
    }
    bool Allocate(Frame *frame, VAOResourceHandle &resH) {
        return GetVAOResource().Allocate(frame, resH);
    }
private: 
    RendererFacade *m_RendererFacade = nullptr;
    Asset::AssetLoader *m_AssetLoader = nullptr;
    std::unique_ptr<AsyncLoader> m_AsyncLoader;
    void* padding;
    Shader::ShaderResource m_ShaderResource;

    mem::aligned_ptr<TextureResource> textureResource;
    mem::aligned_ptr<MeshManager> meshManager;
    mem::aligned_ptr<MaterialManager> materialManager;
    mem::aligned_ptr<VAOResource> vaoManager;
};

//static_assert((sizeof(ResourceManager) % 16) == 0, "Invalid size!");

} //namespace MoonGlare::Renderer::Resources 
