/*
  * Generated by cppsrc.sh
  * On 2017-02-25  7:40:03,97
  * by Kalessin
*/
/*--END OF HEADER BLOCK--*/
//#include <luaJiT/lua.h>
//#include <luaJiT/lauxlib.h>
#include <luaJiT-2.0.4/lua.hpp>
#include <Libs/LuaBridge/LuaBridge.h>

#include "ScriptApi.h"
#include "Renderer.h"
#include "RenderDevice.h"
#include "Resources/ResourceManager.h"

namespace MoonGlare::Renderer {

struct ScriptApi::ScriptApiImpl {
	ScriptApiImpl(RendererFacade * facade) : m_RendererFacade(facade){
		RendererAssert(m_RendererFacade);
	}


	void Install(lua_State *lua) throw(InitFailureException) {
		RendererAssert(lua);

#ifdef DEBUG_SCRIPTAPI
		InstallDebug(lua);
#endif
	}

//	auto *ScriptEngine = m_World->GetScriptEngine();
//	{
//		auto lua = ScriptEngine->GetLua();
//		LOCK_MUTEX_NAMED(ScriptEngine->GetLuaMutex(), lock);
//		Utils::Scripts::LuaStackOverflowAssert check(lua);
//
//		lua_createtable(lua, 0, 0);					// stack: selftable
//		MoonGlare::Core::Scripts::PublishSelfLuaTable(lua, "InputProcessor", this, -1);
//		lua_pushlightuserdata(lua, (void *)this);	// stack: selftable selfptr
//		lua_pushvalue(lua, -2);		  				// stack: selftable selfptr selftable
//		lua_settable(lua, LUA_REGISTRYINDEX);		// stack: selftable
//
//		lua_pushlightuserdata(lua, (void *)this);	// stack: selftable selfptr
//		lua_pushcclosure(lua, &InputProcessor::luaIndexInput, 1);// stack: selftable cclosure
//		lua_setfield(lua, -2, "__index");			// stack: selftable
//
//		lua_createtable(lua, 0, 0);					// stack: selftable InputTable
//		lua_insert(lua, -2);						// stack: InputTable selftable 
//		lua_setmetatable(lua, -2);					// stack: InputTable
//		lua_setglobal(lua, "Input");				// stack:
//	}
//
//	ScriptEngine->RegisterLuaSettings(this, "Input");

	void InstallDebug(lua_State *lua) {
		luabridge::getGlobalNamespace(lua)
		.beginNamespace("Debug")
			.beginNamespace("Renderer")
				.addObjectFunction("ReloadShader", this, &ScriptApiImpl::ReloadShader)
				.addObjectFunction("ReloadAllShaders", this, &ScriptApiImpl::ReloadAllShaders)
			.endNamespace()
		.endNamespace()
		;
	}

	void ReloadShader(const char *name) {
		RendererAssert(this);
		DebugLogf(Warning, "Reloading shader %s", name);
		m_RendererFacade->GetResourceManager()->GetShaderResource().Reload(name);
	}
	void ReloadAllShaders() {
		RendererAssert(this);
		DebugLogf(Warning, "Reloading all shaders");
		//m_RendererFacade->GetResourceManager()->GetShaderResource().Reload(name);
	}
protected:
	RendererFacade* m_RendererFacade = nullptr;
};

//----------------------------------------------------------------------------------

ScriptApi::ScriptApi(RendererFacade * facade) {
	m_Impl = std::make_unique<ScriptApiImpl>(facade);
}

ScriptApi::~ScriptApi() {
}

void ScriptApi::Install(lua_State *lua) throw(InitFailureException) {
	RendererAssert(lua);
	RendererAssert(m_Impl);
	m_Impl->Install(lua);
}

} //namespace MoonGlare::Renderer 
