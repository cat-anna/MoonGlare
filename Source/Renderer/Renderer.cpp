/*
  * Generated by cppsrc.sh
  * On 2017-02-09 21:34:50,23
  * by Kalessin
*/
/*--END OF HEADER BLOCK--*/

#include "nfRenderer.h"
#include "Renderer.h"

#include "RenderDevice.h"
#include "Frame.h"

namespace MoonGlare::Renderer {

RendererFacade::RendererFacade() {
}

RendererFacade::~RendererFacade() {
}

//----------------------------------------------------------------------------------

bool RendererFacade::Initialize() {
    m_Device = std::make_unique<RenderDevice>();
    if(!m_Device->Initialize(this)) {
        AddLogf(Error, "Render device initialization failed!");
        return false;
    }

    for(auto &buffer: m_Frames) {
		buffer = std::make_unique<Frame>();
        if(!buffer->Initialize(this, m_Device.get())) {
            AddLogf(Error, "Frame buffer initialization failed!");
            return false;
        }
    }

    return true;
}

bool RendererFacade::Finalize() {
    for(auto &buffer: m_Frames) {
        if(!buffer->Finalize()) {
            AddLogf(Error, "Frame buffer finalization failed!");
        }
		buffer.reset();
    }

    if(m_Device && !m_Device->Finalize()) {
        AddLogf(Error, "Render device finalization failed!");
    }
    m_Device.reset();

    return true;
}

//----------------------------------------------------------------------------------

void RendererFacade::Start() {
    m_CanWork = true;

    while(m_CanWork) {
		Step();
    }
}

void RendererFacade::Stop() {
    m_CanWork = false;
}

void RendererFacade::Step() {
	auto frame = m_NextFrame.exchange(nullptr);
	if (!frame)
		return;


}

//----------------------------------------------------------------------------------

Frame * RendererFacade::NextFrame() {
	return nullptr;
}

void RendererFacade::Submit(Frame * frame) {}

//----------------------------------------------------------------------------------

} //namespace MoonGlare::Renderer
