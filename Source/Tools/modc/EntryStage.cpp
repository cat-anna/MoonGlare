/*
	Generated by cppsrc.sh
	On 2015-01-04  8:00:39,81
	by Paweu
*/
#include <pch.h>
#include "Pipeline.h"

namespace modc {
namespace pipeline {	

struct EntryStageImpl : EntryStage {
	void FStageValidation(WorkConfiguration &data) {
		auto fs = shared<EntryStageImpl>();
		data->pipeline->QueueLastAction([fs](WorkConfiguration &data) { fs->BuildPipeline(data); });
	}

	void BuildPipeline(WorkConfiguration &data) {
		data->pipeline->PushStage(InputStage::GetInfo());

		if (Stages::ModuleValidation()) {
			data->pipeline->PushStage(ValidationStage::GetInfo());
		} else {
			data->pipeline->PushStage(ValidationStage::GetSkippedInfo());
		}

		if (Stages::MediaTest()) {
			data->pipeline->PushStage(MediaTest::GetInfo());
		} else {
			data->pipeline->PushStage(MediaTest::GetSkippedInfo());
		}

		if (Stages::RemoveUnnecessaryFiles()) {
			data->pipeline->PushStage(RemoveUnnecessaryStage::GetInfo());
		} else {
			//data->pipeline->PushStage(MediaTest::GetSkippedInfo());
		}

		data->pipeline->PushStage(pipeline::OutputStage::GetInfo());

		if (Dump::AnyFlag())
			data->pipeline->PushStage(pipeline::DumpStage::GetInfo());
	}
};

//---------------------------------------------------------------------------------------

void EntryStage::Queue(Pipeline &p) {
	auto fs = Init<EntryStageImpl>(p);
	p.QueueFirstAction([fs](WorkConfiguration &data) { fs->FStageValidation(data); });
}

}// namespace pipeline
}// namespace modc