/*
  * Generated by cppsrc.sh
  * On 2016-09-24  9:36:31,89
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/

#pragma once

namespace MoonGlare {
namespace TypeEditor {

class Structure;

class StructureValue {
public:
    virtual ~StructureValue() {}

    virtual const std::string& GetName() = 0;
    virtual std::string GetValue() = 0;
    virtual void SetValue(const std::string& v) = 0;
    virtual const std::string& GetDescription() = 0;
    virtual const std::string& GetTypeName() = 0;
    virtual std::string GetFullName() = 0;
};

using UniqueStructureValue = std::unique_ptr<StructureValue>;
using StructureValueList = std::vector<UniqueStructureValue>;

using UniqueStructure = std::unique_ptr<Structure>;

struct StructureInfo {
    std::string m_Name;
    std::string m_DisplayName;
    UniqueStructure(*m_CreateFunc)(Structure *Parent);
};

using SharedStructureInfo = std::shared_ptr<const StructureInfo>;

template<typename X2CLASS>
class StructureTemplate;

class Structure {
public:
    Structure(Structure *Parent) : m_Parent(Parent) { }
    virtual ~Structure() {}

    virtual const StructureValueList& GetValues() = 0;
    virtual bool Read(pugi::xml_node node) = 0;
    virtual bool Write(pugi::xml_node node) = 0;
    virtual void ResetToDefault() = 0;

    virtual const std::string& GetName() = 0;
    virtual void SetName(const std::string& value) = 0;
    
    virtual void SetExternlDataSink(void *src) = 0;

    template<class STRUCT>
    static UniqueStructure X2CSCreateFunc(Structure *Parent) {
        return std::make_unique<StructureTemplate<STRUCT>>(Parent);
    }
    template<typename STRUCT>
    static SharedStructureInfo MakeX2CStructureInfo() {
        StructureInfo si;
        si.m_DisplayName = si.m_Name = STRUCT::GetTypeName();
        si.m_CreateFunc = &X2CSCreateFunc<STRUCT>;
        return std::make_shared<StructureInfo>(std::move(si));
    }
    template<typename STRUCT> static void RegisterX2CStructure() { RegisterStructureInfo(MakeX2CStructureInfo<STRUCT>()); }

    static void RegisterStructureInfo(SharedStructureInfo typeinfo);
    static SharedStructureInfo GetStructureInfo(const std::string &Name);
protected:
    Structure *m_Parent;
};

} //namespace TypeEditor 
} //namespace MoonGlare 
