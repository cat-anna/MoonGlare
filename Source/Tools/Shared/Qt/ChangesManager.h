/*
  * Generated by cppsrc.sh
  * On 2016-09-11 17:09:28,63
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/

#pragma once
#ifndef ChangesManager_H
#define ChangesManager_H

namespace MoonGlare {
namespace QtShared {

class ChangesManager;
struct iChangeContainer;

class ChangesManager : public QObject {
	Q_OBJECT;
public:
	ChangesManager();
	virtual ~ChangesManager();

	static ChangesManager* Get() { return s_Instance; }

	void SetModiffiedState(iChangeContainer *sender, bool value);

	struct State {
		bool m_Modiffied;
	};
	using StateMap = std::unordered_map < iChangeContainer*, State>;
	const StateMap& GetStateMap() { return m_State; }
	void SaveAll();

signals:
	void Changed(iChangeContainer* sender, bool state);
protected:
	StateMap m_State;
private:
	static ChangesManager *s_Instance;
};

struct iChangeContainer {
	iChangeContainer() {  }
	virtual ~iChangeContainer() { 
		SetModiffiedState(false);
	};
	virtual bool SaveChanges() { return false; }
	virtual bool CanDropChanges() const { return false; }
	virtual bool DropChanges() { return false; }
	virtual std::string GetInfoLine() const { return ""; }
	virtual const std::string& GetName() const { return m_Name; }

	bool IsChanged() const { return m_Changed; }

	void SetChangesParent(iChangeContainer *Parent) { m_Parent = Parent; }
	iChangeContainer* GetParent() const { return m_Parent; }

	void InsertChangesChild(iChangeContainer *child, std::string childName) {
		child->SetChangesParent(this);
		child->SetChangesName(std::move(childName));
		m_Children.push_back(child);
	}
	void SetChangesName(std::string Name) { m_Name.swap(Name); }
protected:
	virtual void SetModiffiedState(bool value) {
		if (value == m_Changed)
			return;
		m_Changed = value;
		if (value) {
			if (m_Parent) {
				m_Parent->SetModiffiedState(value);
			}
		} else {
			for (auto *it : m_Children) {
				it->SetModiffiedState(false);
			}
		}
		if(ChangesManager::Get())
			ChangesManager::Get()->SetModiffiedState(this, value);
	}
private:
	iChangeContainer *m_Parent = nullptr;
	bool m_Changed = false;
	std::string m_Name;
	std::vector<iChangeContainer*> m_Children;
};

} //namespace QtShared
} //namespace MoonGlare

#endif
