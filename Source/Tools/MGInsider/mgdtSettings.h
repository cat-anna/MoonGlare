/*
  * Generated by cppsrc.sh
  * On 
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/

#pragma once
#ifndef mgdtSettings_H
#define mgdtSettings_H

#include "RemoteConsole.h"
#include "LuaEditor/EditorTab.h"
#include <iSettingsUser.h>

class mgdtSettings : public QtShared::iSettings {
	Q_OBJECT;
public:
	mgdtSettings();
	~mgdtSettings();

#if 0
	struct Connection_t {
		int RemoteConsolePort;
	
		template <class T> void Serialize(T & s) {
			s.Value(RemoteConsolePort, "RemoteConsolePort", MoonGlare::Debug::InsiderApi::Configuration::Insider_Port);
		}
	} Connection;
	struct Window_t {
		bool RememberPosition;
		bool RememberSize;
	
		struct WindowPosition_t {
			int PosX, PosY;
			int Width, Height;
			bool Opened;
			template <class T> void Serialize(T & s) {
				s.Value(PosX, "PosX", -1);
				s.Value(PosY, "PosY", -1);
				s.Value(Width, "Width", -1);
				s.Value(Height, "Height", -1);
				s.Value(Opened, "Opened", false);
			}
	
			void Apply(QWidget *window);
			void Store(QWidget *window);
		};
	
		WindowPosition_t MainForm;
		WindowPosition_t LuaEditor;
		WindowPosition_t ResourceBrowser;
		WindowPosition_t LogWindow;
	
		template <class T> void Serialize(T & s) {
			s.Value(RememberPosition, "RememberPosition", true);
			s.Value(RememberSize, "RememberSize", true);
			s.Group(MainForm, "MainForm");
			s.Group(LuaEditor, "LuaEditor");
			s.Group(ResourceBrowser, "ResourceBrowser");
			s.Group(LogWindow, "LogWindow");
		}
	} Window;
	struct QuickActions_t {
		struct Action_t {
			std::string Name, Script, Group;
	
			bool Save(pugi::xml_node node) const {
				node.append_child("Name").text() = Name.c_str();
				node.append_child("Script").text() = Script.c_str();
				node.append_child("Group").text() = Group.c_str();
				return true;
			}
			bool Load(const pugi::xml_node node) {
				Name = node.child("Name").text().as_string("");
				Script = node.child("Script").text().as_string();
				Group = node.child("Group").text().as_string();
				return true;
			}
		};
		using QuickActionList_t = std::list<Action_t>;
		QuickActionList_t QuickActionList;
	
		Action_t* FindByName(const std::string &Name) {
			for (auto &it : QuickActionList)
				if (it.Name == Name)
					return &it;
			return nullptr;
		}
	
		template <class T> void Serialize(T & s) {
			//s.qStringList(ScriptFiles, "ScriptFiles", 0);
			s.customlist(QuickActionList, "QuickActionList", 0);
		}
	} QuickActions;
#endif

	static mgdtSettings& get();
private: 
	static mgdtSettings *_Instance;
};

using iSettingsUser = mgdtSettings::iSettingsUser;
inline mgdtSettings& GetSettings() { return mgdtSettings::get(); }

#endif
