/*
  * Generated by cppsrc.sh
  * On 
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/

#pragma once
#ifndef mgdtSettings_H
#define mgdtSettings_H

#include "RemoteConsole.h"
#include "LuaEditor/EditorTab.h"

class mgdtSettings : public QObject {
	Q_OBJECT;
public:

	struct Editor_t {
		std::string FontName;
		int FontSize;

		struct OpenedFiles_t {
			int NameCollumnSize;
			int TypeCollumnSize;

			template <class T> void Serialize(T & s) {
				s.Value(NameCollumnSize, "NameCollumnSize", 100);
				s.Value(TypeCollumnSize, "TypeCollumnSize", 30);
			}
		} OpenedFiles;

		QFont GetEditorFont();

		template <class T> void Serialize(T & s) {
			s.Value(FontName, "FontName", "Consolas");
			s.Value(FontSize, "FontSize", 10);
			s.Group(OpenedFiles, "OpenedFiles");
		}
	} Editor;

	struct LuaGlobalBrowser_t {
		int TreeCollumnWidth;
		int TypeCollumnWidth;
		int ValueCollumnWidth;

		template <class T> void Serialize(T & s) {
			s.Value(TreeCollumnWidth, "TreeCollumnWidth", 200);
			s.Value(TypeCollumnWidth, "TypeCollumnWidth", 70);
			s.Value(ValueCollumnWidth, "ValueCollumnWidth", 50);
		}
	} LuaGlobalBrowser;

	struct Connection_t {
		int RemoteConsolePort;

		template <class T> void Serialize(T & s) {
			s.Value(RemoteConsolePort, "RemoteConsolePort", MoonGlare::Debug::InsiderApi::Configuration::Insider_Port);
		}
	} Connection;

	struct Recent_t {
		struct ScriptFile_t {
			std::string Location;
			EditorFileSource Source;

			bool Save(pugi::xml_node node) const {
				node.append_child("Location").text() = Location.c_str();
				node.append_child("Source").text() = EditorFileSourceEnum::ToString(Source).c_str();
				return true;
			}
			bool Load(const pugi::xml_node node) {
				Location = node.child("Location").text().as_string("");
				Source = EditorFileSourceEnum::ConvertSafe(node.child("Source").text().as_string());
				return true;
			}
		};
		using ScriptFilesList = std::list<ScriptFile_t>;
		ScriptFilesList ScriptFiles;

		ScriptFilesList::iterator FindScriptFile(const std::string &s) {
			return std::find_if(ScriptFiles.begin(), ScriptFiles.end(), [&s](const ScriptFile_t& f) {
				return s == f.Location;
			});
		}
		void RemoveOpenedScript(const std::string &s) {
			auto it = FindScriptFile(s);
			if (it != ScriptFiles.end())
				ScriptFiles.erase(it);
		}
		void AddOpenedScript(const std::string &s, EditorFileSource type) {
			auto it = FindScriptFile(s);
			if (it == ScriptFiles.end())
				ScriptFiles.emplace_back(ScriptFile_t{ s, type });
		}

		template <class T> void Serialize(T & s) {
			//s.qStringList(ScriptFiles, "ScriptFiles", 0);
			s.customlist(ScriptFiles, "ScriptFiles", 0);
		}
	} Recent;

	struct Window_t {
		bool RememberPosition;
		bool RememberSize;

		struct WindowPosition_t {
			int PosX, PosY;
			int Width, Height;
			bool Opened;
			template <class T> void Serialize(T & s) {
				s.Value(PosX, "PosX", -1);
				s.Value(PosY, "PosY", -1);
				s.Value(Width, "Width", -1);
				s.Value(Height, "Height", -1);
				s.Value(Opened, "Opened", false);
			}

			void Apply(QWidget *window);
			void Store(QWidget *window);
		};

		WindowPosition_t MainForm;
		WindowPosition_t LuaEditor;
		WindowPosition_t ResourceBrowser;
		WindowPosition_t QuickActions;
		WindowPosition_t LogWindow;

		template <class T> void Serialize(T & s) {
			s.Value(RememberPosition, "RememberPosition", true);
			s.Value(RememberSize, "RememberSize", true);
			s.Group(MainForm, "MainForm");
			s.Group(LuaEditor, "LuaEditor");
			s.Group(ResourceBrowser, "ResourceBrowser");
			s.Group(QuickActions, "QuickActions");
			s.Group(LogWindow, "LogWindow");
		}
	} Window;

	struct QuickActions_t {
		struct Action_t {
			std::string Name, Script, Group;

			bool Save(pugi::xml_node node) const {
				node.append_child("Name").text() = Name.c_str();
				node.append_child("Script").text() = Script.c_str();
				node.append_child("Group").text() = Group.c_str();
				return true;
			}
			bool Load(const pugi::xml_node node) {
				Name = node.child("Name").text().as_string("");
				Script = node.child("Script").text().as_string();
				Group = node.child("Group").text().as_string();
				return true;
			}
		};
		using QuickActionList_t = std::list<Action_t>;
		QuickActionList_t QuickActionList;

		Action_t* FindByName(const std::string &Name) {
			for (auto &it : QuickActionList)
				if (it.Name == Name)
					return &it;
			return nullptr;
		}

		template <class T> void Serialize(T & s) {
			//s.qStringList(ScriptFiles, "ScriptFiles", 0);
			s.customlist(QuickActionList, "QuickActionList", 0);
		}
	} QuickActions;

	struct ResourceBrowser_t {
		std::string LastTab;
		
		template <class T> void Serialize(T & s) {
			s.Value(LastTab, "LastTab", "");
		}
	} ResourceBrowser;

	template <class T> void Serialize(T & s) {
		s.Group(Recent , "Recent");
		s.Group(Connection , "Connection");
		s.Group(Editor , "Editor");
		s.Group(LuaGlobalBrowser , "LuaGlobalBrowser");
		s.Group(Window, "Window");
		s.Group(QuickActions, "QuickActions");
		s.Group(ResourceBrowser, "ResourceBrowser");
	}

	static mgdtSettings& get();

	void Save();
protected:
	void Load();
signals:
	void EditorFontChanged(const QFont &);
private: 
 	mgdtSettings();
 	~mgdtSettings();

	static mgdtSettings *_Instance;
};

inline mgdtSettings& GetSettings() { return mgdtSettings::get(); }

#endif
