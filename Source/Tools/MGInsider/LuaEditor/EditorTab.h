/*
  * Generated by cppsrc.sh
  * On 
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/

#pragma once
#ifndef EditorTab_H
#define EditorTab_H

#include "RemoteConsole.h"

class CodeEditor;
class QtLuaHighlighter;
struct CompilationResult;
class EditorTab;
class LuaWindow;
class LuaCompiler;

enum class EditorFileSource {
	DummyFile,
	RawFile,
	Engine,
};

struct EditorFileSourceConverter : GabiLib::EnumConverter < EditorFileSource, EditorFileSource::DummyFile > {
	EditorFileSourceConverter() {
		Add("RawFile", Enum::DummyFile);
		Add("Default", Enum::RawFile);
		Add("Engine", Enum::Engine);
	}
};
using EditorFileSourceEnum = GabiLib::EnumConverterHolder < EditorFileSourceConverter >;

struct EditorStatusLine {
	std::string Message;
	enum class Type {
		None, Error, Warning, Hint,
	} Status = Type::None;
	int SourceLine = -1;
	EditorTab *Sender = nullptr;
};

struct EditorStatusText {
	std::list<EditorStatusLine> Lines;
};

class EditorTab : public QWidget, public RemoteConsoleRequestQueue {
	Q_OBJECT;
public:
 	EditorTab(LuaWindow *Window, QTabWidget *Owner, QWidget* parent, const QString& Name = "", EditorFileSource source = EditorFileSource::DummyFile);
 	virtual ~EditorTab();

	QString GetDisplayName();
	const QString& GetName() const { return m_Name; }

	bool IsTextSelected() const;
	bool IsChanged() const;
	EditorFileSource GetType() const { return m_FileSource; }
	QString GetCode() const;

	void GetEditorStatusLines(EditorStatusText &status);
protected:
private:
	class LuaSaveRequest;
	class LuaLoadRequest;

	QTabWidget *m_Owner;
	QVBoxLayout *m_Layout;
	CodeEditor *m_Editor;
	LuaWindow *m_Window;
	QtLuaHighlighter *m_Highlighter;
	QString m_Name;
	bool m_Modiffied;
	EditorFileSource m_FileSource;
	std::unique_ptr<QTimer> m_RecompileTimer;
	std::unique_ptr<LuaCompiler> m_LuaCompiler;
	
	void DoOpen();
	void DoSave();

protected slots:
	void EditorFontChanged(const QFont &font);
	void EditorContextMenuRequested(QPoint p);
	void TextChaged();
public slots:
	void SendText(bool SelectionOnly);
	void CloseEditor();
	void Save();
	void Reload();
	void Validate();
	void SetCodeAdnotations(std::shared_ptr<CompilationResult> result);
signals:
	void StateChanged(EditorTab *);
	void ContextMenuRequested(EditorTab * sender, QPoint pos);
};

Q_DECLARE_METATYPE(EditorTab*);

#endif
