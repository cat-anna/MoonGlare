/*
  * Generated by cppsrc.sh
  * On 2015-08-15  9:35:53,01
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/
#include PCH_HEADER
#include "mgdtSettings.h"
#include "CodeEditor.h"
#include "LuaCompiler.h"

LuaCompiler::LuaCompiler() {
}

LuaCompiler::~LuaCompiler() {
}

void LuaCompiler::Compile(QString code) {
	lua_State *lua = luaL_newstate();
	auto result = std::make_shared<CompilationResult>();
	
	std::string luacode = code.toUtf8().constData();
	Utils::Scripts::LuaStringReader reader(&luacode);

	int r = lua_load(lua, &reader.Reader, &reader, "code");

	switch (r) {
	case LUA_ERRSYNTAX: {
		result->m_Status = CompilationResult::Status::Failed;
		const char *c = lua_tostring(lua, -1);
		LineStatus status;
		status.Error = true;

		int part = 0;
		int lineid = -1;
		for (char *it = (char*)c; it; ) {
			char *prev = it;
			if (!it)
				break;
			it = strpbrk(it, ":");
			if (it) *it++ = 0;
			++part;
		
			switch (part) {
			case 1:
				continue;
			case 2:
				lineid = atoi(prev);
				break;
			case 3:
				status.Message = prev;
				break;
			default:
				continue;
			}

		}
		result->m_LineInfo[lineid] = status;
		break;
	}
	case 0:
		result->m_Status = CompilationResult::Status::Success;
		break;
	case LUA_ERRMEM:
	default:
		result->m_Status = CompilationResult::Status::Error;
		break;
	}

	lua_close(lua);
	emit CompilationDone(result);
}
