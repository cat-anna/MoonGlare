/*
  * Generated by cppsrc.sh
  * On 2016-10-09 20:20:47,90
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/

#pragma once
#ifndef iFileProcessor_H
#define iFileProcessor_H

namespace MoonGlare {
namespace QtShared {

class iJobFence {
public:
    virtual ~iJobFence() {}
    virtual void lock() = 0;
    virtual bool try_lock() = 0;
    virtual void unlock() = 0;
};

using SharedJobFence = std::shared_ptr<iJobFence>;

class MutexJobFence : public iJobFence {
public:
    std::recursive_mutex mtx;
    void lock() override { mtx.lock(); }
    bool try_lock() override { return mtx.try_lock(); }
    void unlock() override { mtx.unlock(); }
};

struct FileProcessorFileInfo {
    std::string m_Ext;
    std::string m_Icon;
};

class iFileProcessor : public std::enable_shared_from_this<iFileProcessor> {
public:
    iFileProcessor(std::string uri) : m_URI(std::move(uri)) { }
    virtual ~iFileProcessor() { }

    enum class ProcessResult {
        Success,
        RetryLater,
        UnknownFailure,
        FileReadError,
        FileIntegrityError,
    };
    virtual ProcessResult ProcessFile() = 0;

    virtual void HandlePostProcess() {};

    SharedJobFence GetFence() { return fence; }
    void SetFence(SharedJobFence f) { fence = f; }
protected:
    std::string m_URI;

    std::string MakeIssueId(const std::string &type = "Error") {
        return fmt::format("{}|" + m_URI + "|{}", typeid(*this).name(), type);
    }
private:
    SharedJobFence fence;
};

using SharedFileProcessor = std::shared_ptr<iFileProcessor>;

class iFileProcessorInfo {
public:
    virtual ~iFileProcessorInfo() { }
    virtual SharedFileProcessor CreateFileProcessor(std::string URI) = 0;
    virtual std::vector<std::string> GetSupportedTypes() { return{}; }
};

class iJobProcessor {
public:
    virtual ~iJobProcessor() { }

    virtual void Queue(SharedFileProcessor processor) = 0;
    virtual size_t GetQueuedJobCount() = 0;
};
using SharedJobProcessor = std::shared_ptr<iJobProcessor>;

} //namespace QtShared 
} //namespace MoonGlare 

Q_DECLARE_METATYPE(MoonGlare::QtShared::SharedFileProcessor);

#endif
