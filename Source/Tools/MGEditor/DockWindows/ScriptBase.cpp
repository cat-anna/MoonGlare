/*
  * Generated by cppsrc.sh
  * On 2016-07-22  0:08:40,44
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/
#include PCH_HEADER
#include "ScriptBase.h"

#include <DockWindowInfo.h>
#include <icons.h>
#include "../Windows/MainWindow.h"

#include <regex>

namespace MoonGlare {
namespace Editor {
namespace DockWindows {

struct ScriptBaseInfo 
		: public QtShared::DockWindowInfo
		, public QtShared::iEditorInfo {
	virtual std::shared_ptr<QtShared::DockWindow> CreateInstance(QWidget *parent) override {
		return std::make_shared<ScriptBase>(parent);
	}

	ScriptBaseInfo(QWidget *Parent) : QtShared::DockWindowInfo(Parent) {
		SetMainMenu(false);
		SetSettingID("ScriptBaseInfo");
		EnableSettings(false);
	}

	std::vector<QtShared::EditableFieleInfo> GetSupportedFileTypes() const override {
		return std::vector<QtShared::EditableFieleInfo>{
			//QtShared::EditableFieleInfo{ "epx", ICON_16_ENTITYPATTERN_RESOURCE, },
		};
	}
	virtual std::vector<QtShared::FileCreationMethodInfo> GetCreateFileMethods() const override {
		return std::vector<QtShared::FileCreationMethodInfo> {
			QtShared::FileCreationMethodInfo{ "lua", ICON_16_LUALOGO_RESOURCE, "Script...", "lua", },
		};
	}
};
QtShared::DockWindowClassRgister::Register<ScriptBaseInfo> ScriptBaseInfoReg("ScriptBase");

//----------------------------------------------------------------------------------

ScriptBase::ScriptBase(QWidget * parent)
	:  QtShared::DockWindow(parent) {
	SetSettingID("ScriptBase");
	EnableSettings(false);
}

ScriptBase::~ScriptBase() {
}

//----------------------------------------------------------------------------------

static const char LuaScriptPattern[] = R"(-- {name} script

local {name} = Script:New("{name}")

function {name}:OnCreate()
	--self:SetPerSecond(true)
	--self:SetStep(false)
end

function {name}:OnDestroy()
end

function {name}:Step(data)
end

function {name}:PerSecond()
end

)";

bool ScriptBase::DoSaveSettings(pugi::xml_node node) const {
	//QtShared::DockWindow::DoSaveSettings(node);
	return true;
}

bool ScriptBase::DoLoadSettings(const pugi::xml_node node) {
	//QtShared::DockWindow::DoLoadSettings(node);
	return true;
}

bool ScriptBase::Create(const std::string & LocationURI, const QtShared::FileCreationMethodInfo & what) {
	std::string name;
	if (!QuerryStringInput("Enter name:", name))
		return false;

	std::string URI = LocationURI + name + ".lua";

	auto fs = MainWindow::Get()->GetFilesystem();
	if (!fs->CreateFile(URI)) {
		ErrorMessage("Failed during creating lua file");
		AddLog(Hint, "Failed to create lua file: " << URI);
		return false;
	}

	std::unordered_map<std::string, std::string> Patterns;
	Patterns[R"(\{name\})"] = name;

	std::string Pattern = LuaScriptPattern;
	
	for (auto &it : Patterns) {
		std::regex pat(it.first);
		std::string out;
		out.reserve(Pattern.size() * 2);
		std::regex_replace(std::back_inserter(out), Pattern.begin(), Pattern.end(), pat, it.second);
		out.swap(Pattern);
	}

	StarVFS::ByteTable bt;
	bt.from_string(Pattern);

	if (!fs->SetFileData(URI, bt)) {
		//todo: log sth
		return false;
	}

	AddLog(Hint, "created lua: " << URI);

	return true;
}

//----------------------------------------------------------------------------------

} //namespace DockWindows 
} //namespace Editor 
} //namespace MoonGlare 
