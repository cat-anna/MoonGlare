/*
  * Generated by cppsrc.sh
  * On 2016-07-22  0:08:40,44
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/
#include PCH_HEADER
#include "IssueReportDock.h"

#include <ui_IssueReportDock.h>
#include <DockWindowInfo.h>
#include <icons.h>

#include <Module.h>

#include <fmt/format.h>

namespace MoonGlare {
namespace Editor {
namespace DockWindows {

struct IssueReportDockInfo
    : public QtShared::BaseDockWindowModule {

    virtual std::shared_ptr<QtShared::DockWindow> CreateInstance(QWidget *parent) override {
        return std::make_shared<IssueReport>(parent, GetModuleManager());
    }

    IssueReportDockInfo(SharedModuleManager modmgr) : BaseDockWindowModule(std::move(modmgr)) {
        SetSettingID("IssueReport");
        SetDisplayName(tr("Active issues"));
        SetShortcut("F11");
    }
};
QtShared::ModuleClassRgister::Register<IssueReportDockInfo> IssueReportDockInfoReg("IssueReportDock");

//----------------------------------------------------------------------------------

static const int IssueRole = Qt::UserRole + 1;
static const int IssueInternalIdRole = Qt::UserRole + 2;

IssueReport::IssueReport(QWidget * parent, QtShared::SharedModuleManager modmgr)
    :  QtShared::DockWindow(parent), moduleManager(std::move(modmgr)) {

    SetSettingID("IssueReport");
    m_Ui = std::make_unique<Ui::IssueReportDock>();
    m_Ui->setupUi(this);

    m_ViewModel = std::make_unique<QStandardItemModel>();
    m_ViewModel->setHorizontalHeaderItem(0, new QStandardItem("Type"));
    m_ViewModel->setHorizontalHeaderItem(1, new QStandardItem("Group"));
    m_ViewModel->setHorizontalHeaderItem(2, new QStandardItem("Message"));
    m_ViewModel->setHorizontalHeaderItem(3, new QStandardItem("Line"));
    m_ViewModel->setHorizontalHeaderItem(4, new QStandardItem("File"));
    m_Ui->treeView->setModel(m_ViewModel.get());
    m_Ui->treeView->setSelectionMode(QAbstractItemView::SingleSelection);
    m_Ui->treeView->setEditTriggers(QAbstractItemView::NoEditTriggers);
    m_Ui->treeView->setContextMenuPolicy(Qt::CustomContextMenu);
    m_Ui->treeView->setColumnWidth(0, 70);
    m_Ui->treeView->setColumnWidth(1, 100);
    m_Ui->treeView->setColumnWidth(2, 400);
    m_Ui->treeView->setColumnWidth(3, 50);
    m_Ui->treeView->setColumnWidth(4, 200);

    auto issuereporteer = moduleManager->QuerryModule<QtShared::IssueReporter>();
    connect(issuereporteer.get(), &QtShared::IssueReporter::IssueCreated, this, &IssueReport::IssueCreated);
    connect(issuereporteer.get(), &QtShared::IssueReporter::IssueRemoved, this, &IssueReport::IssueRemoved);

    Refresh();
}

IssueReport::~IssueReport() {
    m_Ui.reset();
}

//----------------------------------------------------------------------------------

bool IssueReport::DoSaveSettings(pugi::xml_node node) const {
    SaveColumns(node, "IssueReport:Columns", m_Ui->treeView, 4);
    QtShared::DockWindow::DoSaveSettings(node);
    return true;
}

bool IssueReport::DoLoadSettings(const pugi::xml_node node) {
    LoadColumns(node, "IssueReport:Columns", m_Ui->treeView, 4);
    QtShared::DockWindow::DoLoadSettings(node);
    return true;
}

//----------------------------------------------------------------------------------

void IssueReport::Refresh() {
    if (m_ViewModel->rowCount() > 0) {
        setWindowTitle(fmt::format("Active issues [{}]", m_ViewModel->rowCount()).c_str());
    }
    else {
        setWindowTitle("Active issues");
    }
}

//----------------------------------------------------------------------------------

void IssueReport::IssueCreated(QtShared::Issue issue) {

    QStandardItem *qitm;
    QList<QStandardItem*> cols;
    cols << (qitm = new QStandardItem());
                      
    switch (issue.type) {
    default:
    case QtShared::Issue::Type::Unknown:
        qitm->setText("?");
        break;
    case QtShared::Issue::Type::Error:
        qitm->setText("Error");
        qitm->setBackground(QBrush(QColor(255, 0, 0, 128)));
//        m_Ui->
      //  titleBarWidget()->s
        break;
    case QtShared::Issue::Type::Warning:
        qitm->setText("Warning");
        qitm->setBackground(QBrush(QColor(255, 255, 0, 128)));
        break;
    case QtShared::Issue::Type::Hint:
        qitm->setText("Hint");
        qitm->setBackground(QBrush(QColor(0, 255, 0, 128)));
        break;
    case QtShared::Issue::Type::Notice:
        qitm->setText("Notice");
        qitm->setBackground(QBrush(QColor(0, 0, 255, 64)));
        break;
    }

    cols << new QStandardItem(issue.group.c_str());
    cols << new QStandardItem(issue.message.c_str());
    {
        std::string txt;
        if (issue.sourceLine.has_value()) {
            txt += std::to_string(issue.sourceLine.value_or(0));
            if (issue.sourceColumn.has_value()) {
                txt += ":" + std::to_string(issue.sourceColumn.value_or(0));
            }
        }
        cols << new QStandardItem(txt.c_str());
    }
    cols << new QStandardItem(issue.fileName.value_or("").c_str());

    qitm->setData(QVariant::fromValue(issue), IssueRole);
    qitm->setData(QString(issue.internalID.c_str()), IssueInternalIdRole);

    auto root = m_ViewModel->invisibleRootItem();
    root->appendRow(cols);
    Refresh();
}

void IssueReport::IssueRemoved(QtShared::Issue issue) {
    auto root = m_ViewModel->invisibleRootItem();
    QString iid = issue.internalID.c_str();
    for (int row = 0; row < root->rowCount(); ++row) {
        auto ch = root->child(row);
        auto qstr = ch->data(IssueInternalIdRole).toString();
        if (qstr == iid) {
            root->removeRow(row);
            break;
        }
    }
    Refresh();
}

//----------------------------------------------------------------------------------

void IssueReport::ShowContextMenu(const QPoint &point) {
//	QMenu menu;
//	QModelIndex index = m_Ui->treeView->indexAt(point);
//
//	if (index.isValid()) {
//
//	}
//
//	menu.addAction("Open", this, &FileSystemViewer::OpenItem);
//	menu.addSeparator();
//	menu.addAction(ICON_16_REFRESH, "Refresh", this, &FileSystemViewer::RefreshFilesystem);
//
//	menu.exec(m_Ui->treeView->mapToGlobal(point));
}

void IssueReport::ItemDoubleClicked(const QModelIndex&) {
}

} //namespace DockWindows 
} //namespace Editor 
} //namespace MoonGlare 
