/*
  * Generated by cppsrc.sh
  * On 2016-10-09 20:20:47,90
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/

#include PCH_HEADER
#include "iFileIconProvider.h"

#include <boost/algorithm/string/case_conv.hpp>

namespace MoonGlare {
namespace QtShared {

ModuleClassRegister::Register<FileIconProvider> FileIconProviderReg("FileIconProvider");

FileIconProvider::FileIconProvider(SharedModuleManager modmgr) : iModule(std::move(modmgr)) {} 

bool FileIconProvider::PostInit() {
	for (auto module : GetModuleManager()->QuerryInterfaces<QtShared::iFileIconInfo>()) {
		for (auto &item : module.m_Interface->GetFileIconInfo()) {
			m_FileIconMap[boost::to_lower_copy(item.m_Ext)] = item.m_Icon;
			AddLogf(Info, "Associated icon: %s->%s", item.m_Ext.c_str(), module.m_Module->GetModuleName().c_str());
		}
	}
	return true;
}

const std::string& FileIconProvider::GetExtensionIcon(const std::string &ext) const {
	return m_FileIconMap.at(boost::to_lower_copy(ext));
}

const std::string& FileIconProvider::GetExtensionIcon(const std::string &ext, const std::string& default) const {
	auto it = m_FileIconMap.find(boost::to_lower_copy(ext));
	if (it == m_FileIconMap.end())
		return default;
	return it->second;
}

} //namespace QtShared 
} //namespace MoonGlare 
