/*
  * Generated by cppsrc.sh
  * On 2016-07-22 11:09:18,36
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/
#include PCH_HEADER
#include "FileSystem.h"

#include <StarVFS/core/Container/FolderContainer.h>
#include "Module/DataModule.h"

namespace MoonGlare {
namespace Editor {

FileSystem::FileSystem() {
	m_VFS = std::make_shared<StarVFS::StarVFS>();
	connect(Notifications::Get(), SIGNAL(ProjectChanged(Module::SharedDataModule)), this, SLOT(ProjectChanged(Module::SharedDataModule)));
}

FileSystem::~FileSystem() {
}

bool FileSystem::GetFileData(const std::string &uri, StarVFS::ByteTable & data) {
	auto fid = m_VFS->FindFile(uri);
	return m_VFS->GetFileData(fid, data);
}

bool FileSystem::SetFileData(const std::string & uri, StarVFS::ByteTable & data) {
	auto fid = m_VFS->FindFile(uri);

	if (!m_VFS->IsFileValid(fid)) {
		//TODO: todo
		return false;
	}

	auto h = m_VFS->OpenFile(fid, StarVFS::RWMode::W);
	if(!h) {
		//TODO: todo
		return false;
	}

	auto ret = h.SetFileData(data);
	h.Close();

	return ret;
}

//-----------------------------------------------------------------------------

void FileSystem::ProjectChanged(Module::SharedDataModule datamod) {
	m_Module = datamod;
	if (m_Module) {
		m_BasePath = m_Module->GetBaseDirectory();
		Reload();
	}
}

void FileSystem::Reload() {
	if (m_VFS->GetContainerCount() == 0) {
		auto ret = m_VFS->CreateContainer<StarVFS::Containers::FolderContainer>("/", m_BasePath);
		if (ret.first != StarVFS::VFSErrorCode::Success) {
			AddLog(Error, "Failed to load base container. Code: %d", (int)ret.first);
			return;
		}
	} else {
		auto c = m_VFS->GetContainer(1);
		if (!c) {
			AddLog(Error, "Failed to get base container");
			return;
		}
		c->ReloadContainer();
		c->RegisterContent();
	}
	Changed();
}

} //namespace Editor 
} //namespace MoonGlare 
