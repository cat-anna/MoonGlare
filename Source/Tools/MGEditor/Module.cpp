/*
  * Generated by cppsrc.sh
  * On 2017-01-29 21:26:24,94
  * by Kalessin
*/
/*--END OF HEADER BLOCK--*/

#include PCH_HEADER
#include "Module.h"

#include <iEditor.h>
#include <iSettingsUser.h>

namespace MoonGlare::QtShared {

SharedModuleManager ModuleManager::CreateModuleManager() {
	struct ModMgrImpl : public ModuleManager {
		ModMgrImpl() {}
	};
	return std::make_shared<ModMgrImpl>();
}

ModuleManager::ModuleManager() {}

bool ModuleManager::Initialize() {
	bool ret = true;
	auto self = shared_from_this();
	ModuleClassRgister::GetRegister()->Enumerate([this, &ret, self] (auto &ci) {
		auto ptr = ci.SharedCreate(self);
		m_Modules.emplace_back(ptr);
        if (ptr->GetModuleName().empty()) {
            ptr->SetAlias(ci.Alias);
        }
	});

  	for (auto &it : m_Modules) {
        if (!it->Initialize()) {
            ret = false;
            AddLogf(Error, "Module init failed: %s", it->GetModuleName().c_str());
        }
        else {
            AddLogf(Info, "Loaded module: %s", it->GetModuleName().c_str());
        }
	}

	for (auto &it : m_Modules) {
		if (!it->PostInit()) {
            ret = false;
            AddLogf(Error, "Module post init failed: %s", it->GetModuleName().c_str());
        }
	}

	LoadSettigs();
	return true;
}

bool ModuleManager::Finalize() {
	SaveSettigs();
	for (auto &it : m_Modules) {
		it->Finalize();
	}
    auto mod = std::move(m_Modules);
	return true;
}

void ModuleManager::LoadSettigs() {
	for (auto &item : QuerryInterfaces<QtShared::iSettingsUser>()) {
		item.m_Interface->LoadSettings();
	}
}

void ModuleManager::SaveSettigs() {
	for (auto &item : QuerryInterfaces<QtShared::iSettingsUser>()) {
		item.m_Interface->SaveSettings();
	}
}

} //namespace MoonGlare::QtShared 

