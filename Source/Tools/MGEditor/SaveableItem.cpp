/*
  * Generated by cppsrc.sh
  * On 2016-07-21 21:39:11,81
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/

#include PCH_HEADER
#include "SaveableItem.h"

namespace MoonGlare {
namespace Editor {

SaveableItem::SaveableItem() {
}

SaveableItem::~SaveableItem() {
}

void SaveableItem::PeriodicSaveNotification() {
	if (m_Changed) {
		if (!DoPeriodicSave())
			AddLogf(Error, "Periodic save failed for class: %s", typeid(*this).name());
		m_Changed = false;
	}

	if (m_ChildChanged) {
		for (auto it : m_Children) {
			auto ptr = it.lock();
			if (ptr)
				ptr->PeriodicSaveNotification();
		}
		m_ChildChanged = false;
	}
}

void SaveableItem::AddChild(WeakSaveableItem child) {
	m_Children.emplace_back(std::move(child));
}

void SaveableItem::ChildModiffied(WeakSaveableItem child) {
	m_ChildChanged = true;
	auto parent = m_Parent.lock();
	if (parent)
		parent->ChildModiffied(shared_from_this());
}

bool SaveableItem::DoPeriodicSave() {
	return true;
}

void SaveableItem::SetChanged() {
	m_Changed = true;
	auto parent = m_Parent.lock();
	if (parent)
		parent->ChildModiffied(shared_from_this());
}

//------------------------------------------------------

SaveableItemParent::SaveableItemParent(){
	m_Timer = std::make_unique<QTimer>();
	m_Timer->setSingleShot(true);
	m_Timer->setInterval( 10 * 1000 );
	m_Timer->setTimerType(Qt::PreciseTimer);
	connect(m_Timer.get(), SIGNAL(timeout()), this, SLOT(SaveTimeout()));
}

void SaveableItemParent::SaveTimeout() {
	AddLog(Info, "Executing periodic save");
	PeriodicSaveNotification();
}

void SaveableItemParent::ChildModiffied(WeakSaveableItem child) {
	SaveableItem::ChildModiffied(child);
	SetChanged();
}

void SaveableItemParent::SetChanged() {
	SaveableItem::SetChanged();
	m_Timer->start();
}

void SaveableItemParent::SaveNow() {
	m_Timer->stop();
	SaveTimeout();
}

} //namespace Editor 
} //namespace MoonGlare 
