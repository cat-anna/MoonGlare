/*
  * Generated by cppsrc.sh
  * On 2016-09-24 17:50:32,30
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/

#pragma once
#ifndef x2cEditor_H
#define x2cEditor_H

namespace MoonGlare {
namespace TypeEditor {

class TreeNode;
class DataNode;

using UniqueTreeNode = std::unique_ptr<TreeNode>;
using TreeNodeList = std::list<UniqueTreeNode>;

using UniqueDataNode = std::unique_ptr<DataNode>;
using DataNodeList = std::list<UniqueDataNode>;

class Structure;

class NodeName {
public:
	std::string m_NodeName;
	std::string m_Name;
};

class TreeNode {
protected:
	TreeNodeList m_Children;
	DataNodeList m_DataList;
};

class DataNode {
public:
	DataNode(DataNode *Parent): m_Parent(Parent) {

	}
protected:
	DataNode *m_Parent;
	std::unique_ptr<Structure> m_Data;
};

class DataTree {
public:
	DataTree();
 	~DataTree();

	bool Read(pugi::xml_node node);
	bool Write(pugi::xml_node node);

	bool OpenPattern(const std::string &filename);
	bool SavePattern(const std::string &filename);

protected:
	std::unique_ptr<TreeNode> m_RootNode;
};

} //namespace TypeEditor 
} //namespace MoonGlare 

#endif
