/*
* Generated by cppsrc.sh
* On 2016-09-24  9:36:31,89
* by Paweu
*/
/*--END OF HEADER BLOCK--*/
#include PCH_HEADER
#include "ComponentInfo.h"

namespace MoonGlare {
namespace TypeEditor {

static ComponentInfo::NameMapType *gNameMap = nullptr;

void ComponentInfo::RegisterComponentInfo(SharedComponentInfo typeinfo) {
	if (!gNameMap)
		gNameMap = new NameMapType();
	(*gNameMap)[typeinfo->m_Name] = typeinfo;
}

SharedComponentInfo ComponentInfo::GetComponentInfo(const std::string &Name) {
	if (!gNameMap)
		return nullptr;
	auto it = gNameMap->find(Name);
	if (it == gNameMap->end())
		return nullptr;
	return it->second;
}

const ComponentInfo::NameMapType& ComponentInfo::GetComponents() {
	if (!gNameMap)
		gNameMap = new NameMapType();
	return *gNameMap;
}

//-------------------------------------

static SystemInfo::NameMapType *gSystemNameMap = nullptr;

void SystemInfo::RegisterSystemInfo(SharedSystemInfo typeinfo) {
    if (!gSystemNameMap)
        gSystemNameMap = new NameMapType();
    (*gSystemNameMap)[typeinfo->m_Name] = typeinfo;
}

SharedSystemInfo SystemInfo::GetSystemInfo(const std::string &Name) {
    if (!gSystemNameMap)
        return nullptr;
    auto it = gSystemNameMap->find(Name);
    if (it == gSystemNameMap->end())
        return nullptr;
    return it->second;
}

const SystemInfo::NameMapType& SystemInfo::GetSystems() {
    if (!gSystemNameMap)
        gSystemNameMap = new NameMapType();
    return *gSystemNameMap;
}

} //namespace TypeEditor 
} //namespace MoonGlare 

