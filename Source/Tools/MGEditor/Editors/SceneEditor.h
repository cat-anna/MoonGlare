/*
  * Generated by cppsrc.sh
  * On 2016-07-22  0:08:40,44
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/

#pragma once
#ifndef SceneEditor_H
#define SceneEditor_H

#include <DockWindow.h>
#include "../Notifications.h"
#include "../FileSystem.h"
#include <ChangesManager.h>

#include <DataModels/StructureEditingModel.h>
#include <DataModels/EntityEditorModel.h>
#include <TypeEditor/ComponentInfo.h>

namespace Ui { class SceneEditor; }

namespace MoonGlare {
namespace Editor {
namespace DockWindows {

struct ComponentInstance {
	TypeEditor::SharedComponentInfo m_ComponentInfo;
	TypeEditor::UniqueStructure m_Config;

	bool m_Enabled = true;
 
	bool operator == (TypeEditor::SharedComponentInfo sci) const {
		return m_ComponentInfo == sci;
	}
};
using SharedComponentInstance = std::shared_ptr<ComponentInstance>;

struct SceneEditorRole {
	enum {
		ComponentInstance = Qt::UserRole,
	};
};

class SceneEditor
	: public QtShared::DockWindow
	, public QtShared::iChangeContainer
	, public QtShared::iEditor {
	Q_OBJECT;
public:
	SceneEditor(QWidget *parent = nullptr);
 	virtual ~SceneEditor();

	class SceneEntity : public QtShared::DataModels::EditableEntity {
	};

	virtual bool DoSaveSettings(pugi::xml_node node) const override;
	virtual bool DoLoadSettings(const pugi::xml_node node) override;

	void Clear();
// iEditor
	virtual bool Create(const std::string &LocationURI, const  QtShared::iEditorInfo::FileHandleMethodInfo& what) override;
	virtual bool OpenData(const std::string &URI);
	virtual bool SaveData();
	virtual bool TryCloseData();
//iChangeContainer
	virtual bool SaveChanges() override { return SaveData(); }
	virtual bool CanDropChanges() const override { return false; }
	virtual bool DropChanges() override { return false; }
	virtual std::string GetInfoLine() const override { return m_SceneURI; }
protected:
protected slots:
	void Refresh();
	void RefreshComponentTree();
	void ResetComponentList();
	bool WriteComponentTree(pugi::xml_node node) const;
	bool ReadComponentTree(const pugi::xml_node node);
	void ComponentChanged(QStandardItem *item);
private:
	std::unique_ptr<Ui::SceneEditor> m_Ui;
	std::unique_ptr<QStandardItemModel> m_ComponentModel;
	std::vector<SharedComponentInstance> m_ComponentInstances;
	SceneEntity *m_SceneEntity;
	std::string m_SceneURI;
};

} //namespace DockWindows 
} //namespace Editor 
} //namespace MoonGlare 

Q_DECLARE_METATYPE(MoonGlare::Editor::DockWindows::ComponentInstance*)

#endif
                                                            