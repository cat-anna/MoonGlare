/*
  * Generated by cppsrc.sh
  * On 2016-10-13 18:53:51,09
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/
#include PCH_HEADER

#include <boost/algorithm/string.hpp>
#include <filesystem>

#include <ToolBase/Module.h>
#include <iCustomEnum.h>
#include <iFileIconProvider.h>
#include <iFileProcessor.h>
#include <iIssueReporter.h>
#include <icons.h>

#include "../FileSystem.h"

#include <json/json.h>

namespace MoonGlare::Editor::Processor {
       
struct MeshProcessor
    : public QtShared::iFileProcessor {

    MeshProcessor(SharedModuleManager modmgr, QtShared::SharedSetEnum setEnum, std::string URI) :
        QtShared::iFileProcessor(std::move(URI)), setEnum(setEnum), moduleManager(modmgr) { }

    ProcessResult ProcessFile() override {
        setEnum->Add(m_URI);
        return ProcessResult::Success;
    }
private:
    QtShared::SharedSetEnum setEnum;
    SharedModuleManager moduleManager;
};

//----------------------------------------------------------------------------------

struct MeshProcessorModule
    : public iModule
    , public QtShared::iFileProcessorInfo
    , public QtShared::iCustomEnumSupplier
    , public QtShared::iFileIconInfo {

    MeshProcessorModule(SharedModuleManager modmgr) : iModule(std::move(modmgr)) {}

    QtShared::SharedSetEnum MeshListEnum;
    QtShared::SharedSetEnum MaterialListEnum;
    QtShared::SharedSetEnum AnimationListEnum;

    QtShared::SharedFileProcessor CreateFileProcessor(std::string URI) override {
        auto ext = std::filesystem::path(URI).extension();
        QtShared::SharedSetEnum e;

        if (ext == ".mesh") e = MeshListEnum;
        if (ext == ".anim") e = AnimationListEnum;
        if (ext == ".mat" ) e = MaterialListEnum;

        return std::make_shared<MeshProcessor>(GetModuleManager(), e, std::move(URI));
    }

    std::vector<std::string> GetSupportedTypes() {
        return{ "mesh", "anim", "mat" };
    }

    std::vector<std::shared_ptr<QtShared::iCustomEnum>> GetCustomEnums(QtShared::CustomEnumProvider *provider) override {
        MeshListEnum = provider->CreateEnum("string:Mesh.Mesh");
        MaterialListEnum = provider->CreateEnum("string:Mesh.Material");
        AnimationListEnum = provider->CreateEnum("string:BoneAnimator.Animation");
        return { };
    }

    std::vector<FileIconInfo> GetFileIconInfo() const override {
        return std::vector<FileIconInfo>{
            //FileIconInfo{ "json", ICON_16_CONFIG_FILE, },
        };
    }
};

ModuleClassRegister::Register<MeshProcessorModule> MeshProcessorModuleReg("MeshProcessorModule");

//----------------------------------------------------------------------------------
} 

