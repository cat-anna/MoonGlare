/*
  * Generated by cppsrc.sh
  * On 2016-10-13 18:53:51,09
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/
#include PCH_HEADER

#include <icons.h>
#include <iFileProcessor.h>
#include <iFileIconProvider.h>
#include <iCustomEnum.h>
#include <Module.h>
#include <iIssueReporter.h>

#include <libs/LuaWrap/src/LuaDeleter.h>
#include <libs/LuaWrap/src/LuaException.h>

#include "../Windows/MainWindow.h"
#include "../FileSystem.h"
#include "AssimpProcessor.h"

namespace MoonGlare {
namespace Editor {
namespace Processor {

//----------------------------------------------------------------------------------

struct AssimpProcessorModule
    : public QtShared::iModule
    , public QtShared::iFileProcessorInfo
    , public QtShared::iCustomEnumSupplier
    , public QtShared::iFileIconInfo {

    AssimpProcessorModule(SharedModuleManager modmgr) : iModule(std::move(modmgr)) {}

    QtShared::SharedSetEnum ModelListEnum = std::make_shared<QtShared::SetEnum>("string:Mesh.Model");

    QtShared::SharedFileProcessor CreateFileProcessor(std::string URI) override {
        return std::make_shared<AssimpProcessor>(ModelListEnum, std::move(URI));
    }

    std::vector<std::string> GetSupportedTypes() {
        return{ "3ds", "fbx", "blend" };
    }

    std::vector<std::shared_ptr<QtShared::iCustomEnum>> GetCustomEnums() const override  {
        return { ModelListEnum, };
    }

    std::vector<FileIconInfo> GetFileIconInfo() const override {
        return std::vector<FileIconInfo>{
            FileIconInfo{ "blend", ICON_16_3DMODEL_RESOURCE, },
            FileIconInfo{ "3ds", ICON_16_3DMODEL_RESOURCE, },
            FileIconInfo{ "fbx", ICON_16_3DMODEL_RESOURCE, },
        };
    }
};
QtShared::ModuleClassRgister::Register<AssimpProcessorModule> AssimpProcessorModuleReg("AssimpProcessorModule");

//----------------------------------------------------------------------------------

AssimpProcessor::AssimpProcessor(QtShared::SharedSetEnum ModelEnum, std::string URI)
        : QtShared::iFileProcessor(std::move(URI)), ModelEnum(ModelEnum) {
}


AssimpProcessor::ProcessResult AssimpProcessor::ProcessFile() {

    //file exists, so insert it into custom enum set
  //  std::regex pieces_regex(R"(file\:\/\/(\/[-_a-z0-9\.\/]+\.[_a-z0-9]+))", std::regex::icase);
  //  std::smatch pieces_match;
  //  if (std::regex_match(m_URI, pieces_match, pieces_regex)) {
  //      ModelEnum->set.insert(pieces_match[1]);
  //  }

    ModelEnum->Add(m_URI);

    return ProcessResult::Success;
}

} //namespace Processor 
} //namespace Editor 
} //namespace MoonGlare 
