/*
  * Generated by cppsrc.sh
  * On 2015-08-08 19:18:32,20
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/
#include PCH_HEADER
#include "mgdtSettings.h"
#include "CodeEditor.h"
#include "LuaCompiler.h"

class CodeEditor::LineNumberArea : public QWidget {
public:
	LineNumberArea(CodeEditor *editor): QWidget(editor) {
		m_Owner = editor;
	}

	QSize sizeHint() const Q_DECL_OVERRIDE {
		return QSize(m_Owner->lineNumberAreaWidth(), 0);
	}

protected:
	void paintEvent(QPaintEvent *event) Q_DECL_OVERRIDE {
		m_Owner->lineNumberAreaPaintEvent(event);
	}

private:
	CodeEditor *m_Owner;
};

//-----------------------------------------

CodeEditor::CodeEditor(EditorTab *Owner, QWidget *parent): QPlainTextEdit(parent), m_Owner(Owner) {
	lineNumberArea = new LineNumberArea(this);

	connect(this, SIGNAL(blockCountChanged(int)), this, SLOT(updateLineNumberAreaWidth(int)));
	connect(this, SIGNAL(updateRequest(QRect, int)), this, SLOT(updateLineNumberArea(QRect, int)));
	connect(this, SIGNAL(cursorPositionChanged()), this, SLOT(highlightCurrentLine()));

	updateLineNumberAreaWidth(0);
	highlightCurrentLine();
}

void CodeEditor::SetCodeAdnotations(std::shared_ptr<CompilationResult> result) {
	m_CompilationResult = result;
	repaint();
}

void CodeEditor::GetStatusText(EditorStatusText &text) {
	if (m_CompilationResult) {
		for (auto &it : m_CompilationResult->m_LineInfo) {
			auto &line = it.second;
			EditorStatusLine info;
			info.Status = line.Error ? EditorStatusLine::Type::Error : EditorStatusLine::Type::Hint;
			info.Sender = m_Owner;
			info.SourceLine = it.first;
			info.Message = line.Message;
			text.Lines.emplace_back(std::move(info));
		}
	}
}

void CodeEditor::lineNumberAreaPaintEvent(QPaintEvent *event) {
	QPainter painter(lineNumberArea);
	painter.fillRect(event->rect(), Qt::lightGray);

	QTextBlock block = firstVisibleBlock();
	int blockNumber = block.blockNumber();
	int top = (int)blockBoundingGeometry(block).translated(contentOffset()).top();
	int bottom = top + (int)blockBoundingRect(block).height();

	while (block.isValid() && top <= event->rect().bottom()) {
		if (block.isVisible() && bottom >= event->rect().top()) {

			if (m_CompilationResult) {
				auto it = m_CompilationResult->m_LineInfo.find(blockNumber+1);
				if (it != m_CompilationResult->m_LineInfo.end()) {
					if (it->second.Error)
						painter.fillRect(QRect(0, top, lineNumberArea->width(), (int)blockBoundingRect(block).height()), Qt::red);
				}
			}

			QString number = QString::number(blockNumber + 1);
			painter.setPen(Qt::black);
			painter.drawText(3, top, lineNumberArea->width() - 6, fontMetrics().height(),
								Qt::AlignRight, number);

		}

		block = block.next();
		top = bottom;
		bottom = top + (int)blockBoundingRect(block).height();
		++blockNumber;
	}
}
int CodeEditor::lineNumberAreaWidth() {
	int digits = 1;
	int max = qMax(1, blockCount());
	while (max >= 10) {
		max /= 10;
		++digits;
	}
	++digits;
	int space = 3 + fontMetrics().width(QLatin1Char('9')) * digits + 6;
	return space;
}

void CodeEditor::resizeEvent(QResizeEvent *e) {
	QPlainTextEdit::resizeEvent(e);
	QRect cr = contentsRect();
	lineNumberArea->setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));
}

void CodeEditor::updateLineNumberAreaWidth(int newBlockCount) {
	setViewportMargins(lineNumberAreaWidth(), 0, 0, 0);
}
void CodeEditor::highlightCurrentLine() {
	QList<QTextEdit::ExtraSelection> extraSelections;
	if (!isReadOnly()) {
		QTextEdit::ExtraSelection selection;
		QColor lineColor = QColor(Qt::yellow).lighter(160);
		selection.format.setBackground(lineColor);
		selection.format.setProperty(QTextFormat::FullWidthSelection, true);
		selection.cursor = textCursor();
		selection.cursor.clearSelection();
		extraSelections.append(selection);
	}
	setExtraSelections(extraSelections);
}
void CodeEditor::updateLineNumberArea(const QRect &rect, int dy) {
	if (dy)
		lineNumberArea->scroll(0, dy);
	else
		lineNumberArea->update(0, rect.y(), lineNumberArea->width(), rect.height());
	if (rect.contains(viewport()->rect()))
		updateLineNumberAreaWidth(0);
}

