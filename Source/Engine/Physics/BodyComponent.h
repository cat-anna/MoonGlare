/*
  * Generated by cppsrc.sh
  * On 2016-08-15 12:19:18,12
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/

#pragma once
#ifndef BodyComponent_H
#define BodyComponent_H

#include <libSpace/src/Container/StaticVector.h>

namespace MoonGlare {
namespace Physics {

class BodyComponent
		: public Core::Component::AbstractComponent
		, public Core::Component::ComponentIDWrap<Core::Component::ComponentIDs::Body> {
public:
	BodyComponent(Core::Component::ComponentManager *Owner);
	virtual ~BodyComponent();

	virtual bool Initialize() override;
	virtual bool Finalize() override;

	virtual void Step(const Core::MoveConfig &conf) override;
	virtual bool Load(xml_node node, Entity Owner, Handle &hout) override;

	virtual bool GetInstanceHandle(Entity Owner, Handle &hout) override;
	//virtual bool Create(Entity Owner, Handle &hout);
	//virtual bool PushEntryToLua(Handle h, lua_State *lua, int &luarets);

	union FlagsMap {
		struct MapBits_t {
			bool m_Valid : 1; //Entity is not valid or requested to be deleted;

		};
		MapBits_t m_Map;
		uint32_t m_UintValue;

		void SetAll() { m_UintValue = 0; m_UintValue = ~m_UintValue; }
		void ClearAll() { m_UintValue = 0; }

		static_assert(sizeof(MapBits_t) <= sizeof(decltype(m_UintValue)), "Invalid Function map elements size!");
	};

	struct BodyEntry {
		Handle m_SelfHandle;
		Entity m_OwnerEntity;
		FlagsMap m_Flags;
	};

protected:
	template<class T> using Array = Space::Container::StaticVector<T, Configuration::Storage::ComponentBuffer>;
	Array<BodyEntry> m_Array;

	std::unique_ptr<btDefaultCollisionConfiguration> m_CollisionConfiguration;
	std::unique_ptr<btCollisionDispatcher> m_Dispatcher;
	std::unique_ptr<btBroadphaseInterface> m_Broadphase;
	std::unique_ptr<btConstraintSolver> m_Solver;
	std::unique_ptr<btDiscreteDynamicsWorld> m_DynamicsWorld;
//	std::unique_ptr<BulletDebugDrawer> m_DebugDrawer;

	vec3 m_Gravity;
};

} //namespace Physics 
} //namespace MoonGlare 

#endif
