/*
    Generated by cppsrc.sh
    On 2014-12-29 22:15:13,85
    by Paweu
*/

#pragma once
#ifndef DefaultDebugDrawer_H
#define DefaultDebugDrawer_H

namespace Physics {

class BulletDebugDrawer : public btIDebugDraw {
public:
    BulletDebugDrawer();
    ~BulletDebugDrawer();

    int m;

#if 0
    void SetMatrices(glm::mat4 pViewMatrix, glm::mat4 pProjectionMatrix){
        glUseProgram(0); // Use Fixed-function pipeline (no shaders)
        glMatrixMode(GL_MODELVIEW);
        glLoadMatrixf(&pViewMatrix[0][0]);
        glMatrixMode(GL_PROJECTION);
        glLoadMatrixf(&pProjectionMatrix[0][0]);
    }
#endif // 0

    virtual void drawLine(const btVector3& from, const btVector3& to, const btVector3& color);
    virtual void drawContactPoint(const btVector3& PointOnB, const btVector3& normalOnB, btScalar distance, int lifeTime, const btVector3& color);
    virtual void reportErrorWarning(const char *);
    virtual void draw3dText(const btVector3 &, const char *);
    virtual void setDebugMode(int p);
    int getDebugMode(void) const;

    void Prepare();
    void Submit(const MoonGlare::Core::MoveConfig &conf);

private:
    std::vector<math::fvec3> m_LinePointsColors;
    std::vector<math::fvec3> m_LinePoints;

    struct PrivateData;
    std::unique_ptr<PrivateData> privateData;
};

} //namespace Physics 

#endif

