/*
	Generated by cppsrc.sh
	On 2014-12-29 22:15:13,85
	by Paweu
*/

#pragma once
#ifndef DefaultDebugDrawer_H
#define DefaultDebugDrawer_H

namespace Physics {


// Helper class; draws the world as seen by Bullet.
// This is very handy to see it Bullet's world matches yours.
// This example uses the old OpenGL API for simplicity, 
// so you'll have to remplace GLFW_OPENGL_CORE_PROFILE by
// GLFW_OPENGL_COMPAT_PROFILE in glfwWindowHint()
// How to use this class :
// Declare an instance of the class :
// BulletDebugDrawer_DeprecatedOpenGL mydebugdrawer;
// dynamicsWorld->setDebugDrawer(&mydebugdrawer);
// Each frame, call it :
// mydebugdrawer.SetMatrices(ViewMatrix, ProjectionMatrix);
// dynamicsWorld->debugDrawWorld();

class BulletDebugDrawer : public btIDebugDraw {
public:
	BulletDebugDrawer();

	int m;

#if 0
	void SetMatrices(glm::mat4 pViewMatrix, glm::mat4 pProjectionMatrix){
		glUseProgram(0); // Use Fixed-function pipeline (no shaders)
		glMatrixMode(GL_MODELVIEW);
		glLoadMatrixf(&pViewMatrix[0][0]);
		glMatrixMode(GL_PROJECTION);
		glLoadMatrixf(&pProjectionMatrix[0][0]);
	}
#endif // 0

	virtual void drawLine(const btVector3& from, const btVector3& to, const btVector3& color);
	virtual void drawContactPoint(const btVector3& PointOnB, const btVector3& normalOnB, btScalar distance, int lifeTime, const btVector3& color);
	virtual void reportErrorWarning(const char *);
	virtual void draw3dText(const btVector3 &, const char *);
	virtual void setDebugMode(int p);
	int getDebugMode(void) const;

	void PrepareDebugDraw(cRenderDevice& dev);
	void Submit(cRenderDevice& dev);

private:
	//std::vector<math::fvec3> m_LinePointsColors;
	//std::vector<math::fvec3> m_LinePoints;
	//Graphic::Shaders::Shader *m_Shader;
	//Graphic::VAO m_VAO;

	cRenderDevice *m_dev;
};

} //namespace Physics 

#endif

