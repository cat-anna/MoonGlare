/*
  * Generated by cppsrc.sh
  * On 2016-08-30 21:19:19,54
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/

#pragma once
#ifndef CollisionComponent_H
#define CollisionComponent_H

namespace MoonGlare {
namespace Physics {
namespace Component {

using namespace ::MoonGlare::Core::Component;
using namespace ::Physics;

struct BodyShapeComponentEntry {
	union FlagsMap {
		struct MapBits_t {
			bool m_Valid : 1; //Entity is not valid or requested to be deleted;
		};
		MapBits_t m_Map;
		uint32_t m_UintValue;

		void SetAll() { m_UintValue = 0; m_UintValue = ~m_UintValue; }
		void ClearAll() { m_UintValue = 0; }

		static_assert(sizeof(MapBits_t) <= sizeof(decltype(m_UintValue)), "Invalid Function map elements size!");
	};

	Handle m_SelfHandle;
	Entity m_OwnerEntity;
	FlagsMap m_Flags;
	Handle m_BodyHandle;
	std::unique_ptr<btCollisionShape> m_Shape;
};

class BodyShapeComponent
	: public AbstractComponent
	, public ComponentIDWrap<Core::Component::ComponentIDs::BodyShape> {
public:
	BodyShapeComponent(Core::Component::ComponentManager *Owner);
 	virtual ~BodyShapeComponent();

	virtual bool Initialize() override;
	virtual bool Finalize() override;

	virtual void Step(const Core::MoveConfig &conf) override;

	virtual bool Load(xml_node node, Entity Owner, Handle &hout) override;
	virtual bool GetInstanceHandle(Entity Owner, Handle &hout) override;

//	virtual bool Create(Entity Owner, Handle &hout);
//	virtual bool LoadComponentConfiguration(pugi::xml_node node);
//	virtual bool PushEntryToLua(Handle h, lua_State *lua, int &luarets);
/*
btBoxShape
btCylinderShape
btCapsuleShape
btCapsuleShapeX
btCapsuleShapeZ
btSphereShape
btConvexHullShape
btBvhTriangleMeshShape
*/
protected:
	template<class T> using Array = Space::Container::StaticVector<T, Configuration::Storage::ComponentBuffer>;

	BodyComponent *m_BodyComponent;
	TransformComponent *m_TransformComponent;

	Array<BodyShapeComponentEntry> m_Array;

	Core::EntityMapper m_EntityMapper;
};

} //namespace Component 
} //namespace Physics 
} //namespace MoonGlare 

#endif
