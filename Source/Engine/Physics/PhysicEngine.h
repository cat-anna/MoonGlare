/*
	Generated by cppsrc.sh
	On 2014-12-28 18:55:01,12
	by Paweu
*/

#pragma once
#ifndef PhysicEngine_H
#define PhysicEngine_H

namespace Physics {

class PhysicEngine : public cRootClass {
	SPACERTTI_DECLARE_CLASS(PhysicEngine, cRootClass);
public:
	PhysicEngine();
	~PhysicEngine();

	void DoDebugDraw(Graphic::cRenderDevice &dev);

	void SetGravity(const btVector3& vector) { m_DynamicsWorld->setGravity(vector); }
	void Step(float TimeStep) { 
		if (Config::Current::EnableFlags::Physics)
			m_DynamicsWorld->stepSimulation(TimeStep, 5, 1.0f / (60.0f * 5.0f)); 
	}

	void RemoveBody(Body *b);
	void AddBody(Body *b);

	void Clean();

	static void RegisterDebugScriptApi(ApiInitializer &api);
	static void RegisterScriptApi(ApiInitializer &api);
private:
	std::unique_ptr<btDefaultCollisionConfiguration> m_CollisionConfiguration;
	std::unique_ptr<btCollisionDispatcher> m_Dispatcher;
	std::unique_ptr<btBroadphaseInterface> m_Broadphase;
	std::unique_ptr<btConstraintSolver> m_Solver;
	std::unique_ptr<btDiscreteDynamicsWorld> m_DynamicsWorld;
	std::unique_ptr<BulletDebugDrawer> m_DebugDrawer;

	unsigned m_Flags;

	void ProcessTickCallBack(btScalar timeStep);
	static void BulletInternalTickCallBack(btDynamicsWorld *world, btScalar timeStep);
};

} //namespace Physics 

#endif
