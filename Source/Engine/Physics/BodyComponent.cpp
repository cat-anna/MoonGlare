/*
  * Generated by cppsrc.sh
  * On 2016-08-15 12:19:18,12
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/
#include <pch.h>
#include <nfMoonGlare.h>

#include <Core/Component/ComponentManager.h>
#include <Core/Component/ComponentRegister.h>

#include <Core/Component/AbstractComponent.h>
#include "BodyComponent.h"

namespace MoonGlare {
namespace Physics {

Core::Component::RegisterComponentID<BodyComponent> BodyComponentIDReg("Body", false);


BodyComponent::BodyComponent(Core::Component::ComponentManager * Owner) 
		: AbstractComponent(Owner)
		, m_Gravity(0, -math::Constants::Earth::g, 0) {
	DebugMemorySetClassName("BodyComponent");
	DebugMemoryRegisterCounter("IndexUsage", [this](DebugMemoryCounter& counter) {
		counter.Allocated = m_Array.Allocated();
		counter.Capacity = m_Array.size();
		counter.ElementSize = sizeof(BodyEntry);
	});
}

BodyComponent::~BodyComponent() {}

//---------------------------------------------------------------------------------------

bool BodyComponent::Initialize() {
	m_Array.MemZeroAndClear();

	m_CollisionConfiguration = std::make_unique<btDefaultCollisionConfiguration>();
	m_Dispatcher = std::make_unique<btCollisionDispatcher>(m_CollisionConfiguration.get());
	m_Broadphase = std::make_unique<btDbvtBroadphase>();
	m_Solver = std::make_unique<btSequentialImpulseConstraintSolver>();
	m_DynamicsWorld = std::make_unique<btDiscreteDynamicsWorld>(m_Dispatcher.get(), m_Broadphase.get(), m_Solver.get(), m_CollisionConfiguration.get());

	m_DynamicsWorld->setGravity(m_Gravity);

	return true;
}

bool BodyComponent::Finalize() {

	m_DynamicsWorld.reset();
	m_Solver.reset();
	m_Broadphase.reset();
	m_Dispatcher.reset();
	m_CollisionConfiguration.reset();

	return true;
}

//---------------------------------------------------------------------------------------

void BodyComponent::Step(const Core::MoveConfig & conf) {}

bool BodyComponent::Load(xml_node node, Entity Owner, Handle & hout) {
	return false;
}

//---------------------------------------------------------------------------------------

bool BodyComponent::GetInstanceHandle(Entity Owner, Handle & hout) {
	return false;
}

} //namespace Physics 
} //namespace MoonGlare 

