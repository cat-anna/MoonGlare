/*
* Generated by cppsrc.sh
* by Paweu
*/
/*--END OF HEADER BLOCK--*/

#pragma once

#include <MathSupportBullet3.h>

namespace MoonGlare::Physics::Component {	  

template<typename OWNER, Entity OWNER::*ptr>
inline Entity ExtractEntity(const OWNER *owner) {
	return (owner->*ptr);
}

struct OnCollisionEnterEvent {
	static constexpr char* EventName = "OnCollisionEnterEvent";
	static constexpr char* HandlerName = "CollisionEnter";

	Entity m_Destination;
	Entity m_Object;

	btVector3 m_Normal;

	friend std::ostream& operator<<(std::ostream& out, const OnCollisionEnterEvent &event) {
		out << "OnCollisionEnterEvent"
			<< "[Destination:" << event.m_Destination
			<< ";Object:" << event.m_Object
			<< ";Normal:" << event.m_Normal
			<< "]";
		return out;
	}

	static ApiInitializer RegisterLuaApi(ApiInitializer api) {
		return api
			.beginClass<OnCollisionEnterEvent>("cOnCollisionEnterEvent")
				.addData("Destination", &OnCollisionEnterEvent::m_Destination, false)
				.addData("Object", &OnCollisionEnterEvent::m_Object, false)
				.addStaticData("Name", EventName, false)
			.endClass();
	}
};

struct OnCollisionLeaveEvent {
	static constexpr char* EventName = "OnCollisionLeaveEvent";
	static constexpr char* HandlerName = "CollisionLeave";

	Entity m_Destination;
	Entity m_Object;

	btVector3 m_Normal;

	friend std::ostream& operator<<(std::ostream& out, const OnCollisionLeaveEvent &event) {
		out << "OnCollisionLeaveEvent"
			<< "[Destination:" << event.m_Destination
			<< ";Object:" << event.m_Object
			<< ";Normal:" << event.m_Normal
			<< "]";
		return out;
	}

	static ApiInitializer RegisterLuaApi(ApiInitializer api) {
		return api
			.beginClass<OnCollisionLeaveEvent>("cOnCollisionLeaveEvent")
				.addData("Destination", &OnCollisionLeaveEvent::m_Destination, false)
				.addData("Object", &OnCollisionLeaveEvent::m_Object, false)
				.addStaticData("Name", EventName, false)
			.endClass();
	}
};

} //namespace MoonGlare::Physics::Component
