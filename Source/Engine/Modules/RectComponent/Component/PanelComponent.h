/*
  * Generated by cppsrc.sh
  * On 2016-09-18 19:00:53,20
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/

#pragma once
#ifndef PanelComponent_H
#define PanelComponent_H

#include "nfGUIComponent.h"
#include <Core/Component/TemplateStandardComponent.h>
#include "../Margin.h"

#include "../GUIShader.h"

namespace MoonGlare {
namespace GUI {
namespace Component {

using namespace Core::Component;

union PanelComponentEntryFlagsMap {
	struct MapBits_t {
		bool m_Valid : 1;
		bool m_Dirty : 1;
		bool m_Active : 1;
	};
	MapBits_t m_Map;
	uint8_t m_UintValue;

	void SetAll() { m_UintValue = 0; m_UintValue = ~m_UintValue; }
	void ClearAll() { m_UintValue = 0; }

	static_assert(sizeof(MapBits_t) <= sizeof(decltype(m_UintValue)), "Invalid Function map elements size!");
};

struct PanelComponentEntry {
	Entity m_Owner;
	char padding[3];
	PanelComponentEntryFlagsMap m_Flags;

    MoonGlare::Configuration::RuntimeRevision m_TransformRevision;

	float m_Border;
	math::vec4 m_Color;
	glm::ivec2 m_TileMode;
	DEFINE_COMPONENT_PROPERTY(Border);
	DEFINE_COMPONENT_PROPERTY(Color);
	DEFINE_COMPONENT_PROPERTY_CAST(TileMode, math::vec2);
	//TODO: texture property

    Renderer::VAOResourceHandle vaoHandle{};

	void Reset() {
		m_TransformRevision = 0;
		m_Flags.ClearAll();
	}

	void SetDirty() { m_Flags.m_Map.m_Dirty = true; m_TransformRevision = 0; }
};
//static_assert((sizeof(RectTransformComponentEntry) % 16) == 0, "RectTransformComponentEntry has invalid size");
//static_assert(std::is_pod<RectTransformComponentEntry>::value, "RectTransformComponentEntry must be pod!");

class PanelComponent
	: public TemplateStandardComponent<PanelComponentEntry, ComponentID::Panel> {
public:
	PanelComponent(SubsystemManager *Owner);
 	virtual ~PanelComponent();
	virtual bool Initialize() override;
	virtual bool Finalize() override;
	virtual void Step(const Core::MoveConfig &conf) override;
	virtual bool Load(ComponentReader &reader, Entity parent, Entity owner) override;

	static MoonGlare::Scripts::ApiInitializer RegisterScriptApi(MoonGlare::Scripts::ApiInitializer root);
protected:
    RectTransformComponent *m_RectTransform = nullptr;
	Renderer::ShaderResourceHandle<GUIShaderDescriptor> m_ShaderHandle;
};

} //namespace Component 
} //namespace GUI 
} //namespace MoonGlare 

#endif
