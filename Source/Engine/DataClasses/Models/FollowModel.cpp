/*
	Generated by cppsrc.sh
	On 2015-01-21 12:25:51,19
	by Paweu
*/
#include <pch.h>
#include <MoonGlare.h>
#include "FollowModel.h"

namespace DataClasses {
namespace Models {

GABI_IMPLEMENT_STATIC_CLASS(FollowModel)
//ModelClassRegister::Register<SimpleModelImpl> SimpleModelImplReg("SimpleModel");
//Core::Interfaces::AutoResourceClassReg<FollowModel> FollowModelReg("FollowModel");

FollowModel::FollowModel(const string &Name) :
		BaseClass(Name),
		m_VAO(),
		m_Shape(0),
		m_Material(0) {
}

FollowModel::~FollowModel() {
	delete m_Shape;
	delete m_Material;
}

//----------------------------------------------------------------

bool FollowModel::DoInitialize() {
	if (!BaseClass::DoInitialize())
		return false;
	return true;
}
 
bool FollowModel::DoFinalize() {
	m_VAO.Finalize();
	return BaseClass::DoFinalize();
}
 
//----------------------------------------------------------------

void FollowModel::DoRender(cRenderDevice &dev) const {
	m_VAO.Bind();
	if (m_Material) dev.Bind(m_Material->GetMaterial());
	else dev.BindNullMaterial();
	m_VAO.DrawElements(m_Mesh);
	m_VAO.UnBind();
}

void FollowModel::DoRenderMesh(cRenderDevice &dev) const {
#if 0
	THROW_ASSERT(IsReady(), "Resource is not initialized!");
	m_VAO.Bind();
	for (auto &mesh : m_Meshes) {
		m_VAO.DrawElements(mesh);
	}
	m_VAO.UnBind();
#endif // 0
}

//----------------------------------------------------------------

Physics::SharedShape FollowModel::ConstructShape(float ShapeScale) const {
	if (!m_Shape) return 0;
	return m_Shape->ConstructShape(ShapeScale);
}

const Physics::PhysicalProperties* FollowModel::GetPhysicalProperties() const {
	return &this->m_PhysicalProperties;
}

//----------------------------------------------------------------

bool FollowModel::LoadFromXML(const xml_node Node) {
	if (!Node) return true;
#if 0
	const char *Name = Node.attribute("Name").as_string(0);
	if (!Name) {
		AddLog(Error, "Model definition without name!");
		return false;
	}
	SetName(Name);

	if (!m_PhysicalProperties.LoadMeta(Node.child("Physics"))) {
		AddLog(Warning, "Unable to load model physical properties! Ignored.");
	}

	XML::Vector::Read(Node, "Size", m_Size, m_Size);

	auto s = m_Size / 2.0f;
	math::vec3 Vertexes[4] = {
		math::vec3(-s.x,  s.y, -s.x),
		math::vec3( s.x,  s.y, -s.x),
		math::vec3(-s.x, -s.y, -s.x),
		math::vec3( s.x, -s.y,  s.x),
	};

	math::vec2 Texture[4] = {
		math::vec2(1, 1),
		math::vec2(0, 1),
		math::vec2(0, 0),
		math::vec2(1, 0),
	};

	unsigned Index[] = { 0, 1, 2, 3 };
#endif
	REQUIRE_REIMPLEMENT;
	//m_VAO.New();
	//m_VAO.AddDataChannel<3, float>(&Vertexes[0][0], 4);
	//m_VAO.AddDataChannel<2, float>(&Texture[0][0], 4);
	//m_VAO.WriteIndexes<unsigned>(Index, 4);
	//m_VAO.UnBind();

	m_Shape = new Physics::CylinderShapeConstructor(5, 10);

	return true;
}

} //namespace Models 
} //namespace DataClasses 

