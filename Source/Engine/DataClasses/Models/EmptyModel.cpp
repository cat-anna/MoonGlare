/*
	Generated by cppsrc.sh
	On 2015-02-11 19:01:08,29
	by Paweu
*/
#include <pch.h>
#include <MoonGlare.h>
#include "EmptyModel.h"

namespace DataClasses {
namespace Models {

SPACERTTI_IMPLEMENT_STATIC_CLASS(EmptyModel)
ModelClassRegister::Register<EmptyModel> EmptyModelReg("EmptyModel");

EmptyModel::EmptyModel(const string &Name):
		BaseClass(Name),
		m_ShapeConstructor() {

}

EmptyModel::~EmptyModel() {

}

//----------------------------------------------------------------

void EmptyModel::DoRender(cRenderDevice &dev) const {
}

void EmptyModel::DoRenderMesh(cRenderDevice &dev) const {
}

//----------------------------------------------------------------

Physics::SharedShape EmptyModel::ConstructShape(float ShapeScale) const {
	if (!m_ShapeConstructor) return 0;
	return m_ShapeConstructor->ConstructShape(ShapeScale);
}

//----------------------------------------------------------------

bool EmptyModel::LoadFromXML(const xml_node Node) {
	if (!Node) {
		AddLog(Error, "Attempt to load model from empty node!");
		return false;
	}

	const char *Name = Node.attribute("Name").as_string(0);
	if (!Name) {
		AddLog(Error, "Model definition without name!");
		return false;
	}
	SetName(Name);

	if (!m_PhysicalProperties.LoadMeta(Node.child("Physics"))) {
		AddLog(Warning, "Unable to load model physical properties! Ignored.");
	}

	if (!LoadBodyShape(Node.child("Body"))){
		AddLog(Warning, "Unable to load model body shape!");
	}

	return true;
}

//----------------------------------------------------------------

bool EmptyModel::LoadBodyShape(xml_node node) {
	if (!node) return false;
	m_ShapeConstructor = Physics::ShapeConstructor::LoadConstructor(node);
	return m_ShapeConstructor != 0;
}

} //namespace Models 
} //namespace DataClasses 
