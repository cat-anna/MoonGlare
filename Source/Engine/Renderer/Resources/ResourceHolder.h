/*
  * Generated by cppsrc.sh
  * On 2015-10-27 23:38:06,26
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/

#pragma once
#ifndef ResourceHolder_H
#define ResourceHolder_H

namespace MoonGlare {
namespace Renderer {
namespace Resources {

/**
	Class is only holder of all resources owned by Renderer.
	All calls are redirected to all resource managers.
	All function must be called only from Renderer thread.
	Virtuality is forbidden in this class.
*/
class ResourceHolder final {
public:
 	ResourceHolder(Renderer *Owner);
 	~ResourceHolder();

	/** Initalize all managers. */
	bool Initialize();
	/** Finalize all managers. */
	bool Finalize();

	/** Step all managers. */
	inline void Step() {
		m_Texture.Step();
	}

	/** Obtain Texture manager */
	TextureResource& GetTextures() { return m_Texture; }
private: 
	TextureResource m_Texture;
};

} //namespace Resources 
} //namespace Renderer 
} //namespace MoonGlare 

#endif
