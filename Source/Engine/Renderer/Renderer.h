/*
  * Generated by cppsrc.sh
  * On 2015-08-04 21:56:58,07
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/

#pragma once
#ifndef Renderer_H
#define Renderer_H

namespace MoonGlare {
namespace Renderer {

/**
	Renderer class.
	Singleton sic!
	Virtuality is forbidden in this class
*/
class Renderer final : public GabiLib::GabiObject {
	GABI_DECLARE_CLASS_SINGLETON(Renderer, GabiLib::GabiObject)
public:
	Renderer();
	~Renderer();

	bool Initialize();
	bool Finalize();

	/** Swap buffers and begin frame rendering */
	void SubmitFrame();

	Frame& NextFrame() { return *m_Frame; }

	//void* NewTextureTargetJob();
	//static void* CreateTextureTargetJob(void* texture, void *size, void* camera);

	Resources::ResourceHolder& Resources() { return m_Resources; }
	Tasks::TaskManager& Tasks() { return m_Tasks; }
private:
	Resources::ResourceHolder m_Resources;
	Tasks::TaskManager m_Tasks;

	struct FramesTable {
		Frame m_First;
		Frame m_Second;
	};
	Frame *m_Frame, *m_SubmittedFrame;
	FramesTable m_FrameBuffers;
};

inline Renderer* GetRenderer() { return Renderer::Instance(); }

} //namespace Renderer 
} //namespace MoonGlare 

#endif
