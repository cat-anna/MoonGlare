

/*
* Generated by cppsrc.sh
* On 2016-08-21 12:19:52,68
* by Paweu
*/
/*--END OF HEADER BLOCK--*/

#pragma once
#ifndef RendererLight_H
#define RendererLight_H

namespace MoonGlare {
namespace Renderer {
namespace Light {

enum class LightType {
	Unknown,
	Point,
	Directional,
	Spot,
};

struct LightAttenuation {
	float m_Constant;
	float m_Linear;
	float m_Exp;
	float m_MinThreshold;

	float Threshold(float ColorFactor) const {
		//float delta = Linear * Linear + 4 * Exp * Constant;
		//float sqrtdelta = sqrtf(delta);
		//
		//float ret = (Linear + sqrtdelta);
		////if(Exp != 0)
		//	//ret /= 2 * Exp;
		//return ret;

		float ret = (-m_Linear + sqrtf(m_Linear * m_Linear - 4 * m_Exp * (m_Exp - 256 * ColorFactor)));// - 256 * ColorFactor
		if (m_Exp != 0)
			ret /= 2 * m_Exp;
		return ret;
	}
};
static_assert(std::is_pod<LightAttenuation>::value, "LightAttenuation shall be POD!");

struct LightBase {
	math::vec3 m_Color;
	float m_AmbientIntensity;
	float m_DiffuseIntensity;
	LightAttenuation m_Attenuation;
	union {
		struct {
			bool m_CastShadows : 1;
		};
		uint8_t m_UInt8value;
	} m_Flags;
};

//static_assert(std::is_pod<LightBase>::value, "LightBase shall be POD!");

} //namespace Light 
} //namespace Renderer 
} //namespace MoonGlare 

#endif


