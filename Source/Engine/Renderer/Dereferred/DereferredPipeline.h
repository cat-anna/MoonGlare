/*
    Generated by cppsrc.sh
    On 2015-01-14 22:33:57,87
    by Paweu
*/

#pragma once

#include "DereferredFrameBuffer.h"

#include "GeometryShader.h"
#include "PointLightShader.h"
#include "DirectionalLightShader.h"
#include "SpotLightShader.h"
#include "StencilShader.h"
#include "../ShadowMapShader.h"

#include <Renderer/Resources/ResourceManager.h>
#include <Renderer/Light.h>
#include <Renderer/VirtualCamera.h>
#include <Renderer/StaticFog.h>

namespace Graphic {
namespace Dereferred {

class DereferredPipeline {
    friend struct DefferedSink;
public:
    void Initialize(World *world);
    void Finalize();

    DefferedSink* GetDefferedSink() const { return m_DefferedSink.get(); }

    DereferredFrameBuffer m_Buffer;
private: 
    World *m_World = nullptr;
    mem::aligned_ptr<DefferedSink> m_DefferedSink;

};

//------------------------------------------------------------------------------------------

struct DefferedSink {
    friend class DereferredPipeline;

    void Reset(const ::MoonGlare::Core::MoveConfig &config);
    void Initialize(Renderer::RendererFacade *Renderer);

    bool MeshVisibilityTest(const emath::fvec3 &position, float radius);
    void Mesh(const emath::fmat4 &ModelMatrix, const emath::fvec3 &basepos, Renderer::MeshResourceHandle meshH);

    void SubmitDirectionalLight(const Renderer::Light::LightBase &linfo);
    void SubmitPointLight(const Renderer::Light::PointLight &linfo);
    bool PointLightVisibilityTest(const emath::fvec3 &position, float radius);
    void SubmitSpotLight(const Renderer::Light::SpotLight &linfo);

    void SetStaticFog(const Renderer::StaticFog &fog);

    Renderer::VirtualCamera m_Camera;
protected:
    Renderer::Commands::CommandQueue *m_GeometryQueue = nullptr;	
    Renderer::Commands::CommandQueue *m_LightGeometryQueue = nullptr;
    Renderer::Commands::CommandQueue *m_DirectionalLightQueue = nullptr;
    Renderer::Commands::CommandQueue *m_PointLightQueue = nullptr;
    Renderer::Commands::CommandQueue *m_SpotLightQueue = nullptr;
    Renderer::Commands::CommandQueue *m_SpotLightShadowQueue = nullptr;

    Renderer::Resources::ShaderBuilder<GeometryShaderDescriptor> m_GeometryShader;
    Renderer::Resources::ShaderBuilder<Shaders::ShadowMapShaderDescriptor> m_ShadowShader;
    Renderer::Resources::ShaderBuilder<DirectionalLightShaderDescriptor> m_DirectionalLightShader;
    Renderer::Resources::ShaderBuilder<PointLightShaderDescriptor> m_PointLightShader;
    Renderer::Resources::ShaderBuilder<StencilLightShaderDescriptor> m_StencilShader;
    Renderer::Resources::ShaderBuilder<SpotLightShaderDescriptor> m_SpotShader;

    Renderer::ShaderResourceHandle<Shaders::ShadowMapShaderDescriptor> m_ShaderShadowMapHandle{};
    Renderer::ShaderResourceHandle<SpotLightShaderDescriptor> m_ShaderLightSpotHandle{};
    Renderer::ShaderResourceHandle<PointLightShaderDescriptor> m_ShaderLightPointHandle{};
    Renderer::ShaderResourceHandle<DirectionalLightShaderDescriptor> m_ShaderLightDirectionalHandle{};
    Renderer::ShaderResourceHandle<StencilLightShaderDescriptor> m_ShaderStencilHandle{};
    Renderer::ShaderResourceHandle<GeometryShaderDescriptor> m_ShaderGeometryHandle{};

    uint32_t meshcouter = 0;
    float visibility = -1.0f;

    Renderer::Frame *m_frame = nullptr;
    Renderer::RendererFacade *m_Renderer = nullptr;
    DereferredPipeline *m_DereferredPipeline;

    MoonGlare::Renderer::MeshResourceHandle sphereMesh;
    MoonGlare::Renderer::MeshResourceHandle coneMesh;
    MoonGlare::Renderer::MeshResourceHandle quadMesh;

    Renderer::StaticFog fog = {};
    bool fogSet = false;

    void InitializeDirectionalQuad();
};

} //namespace Dereferred
} //namespace Graphic 
