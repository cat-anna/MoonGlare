/*
  * Generated by cppsrc.sh
  * On 2015-10-25 22:41:57,12
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/
#include <pch.h>
#include "../Generic/nfGeneric.h"
#include "../Device/nDevice.h"
#include "../Resources/nResources.h"
#include "nTasks.h"

namespace MoonGlare {
namespace Renderer {
namespace Tasks {

union TextureRenderTaskFlags {
	char m_IntValue;
	struct {
		char ResetTexture : 1; //generate new texture
		char Submitted : 1;
	} Bits;
};

struct TextureRendererData {
	using BaseArrays = Utils::Memory::StaticMultiArray<
			RendererStaticSettings::Limits::TextureTargetTasks,
			TextureRenderTaskFlags, 	   //
			Resources::TextureHandle,	   //
		char
		>;
	using Generations = Utils::Memory::GenerationBuffer<RendererStaticSettings::GenerationType, RendererStaticSettings::Limits::TextureTargetTasks>;

	struct Arrays : public BaseArrays {
		ElementType<0>& Flags(size_t itemid) { return Get<0>(itemid); }
		ElementType<1>& TextureHandle(size_t itemid) { return Get<1>(itemid); }
	};

	Generations m_Generations;
	Arrays m_Arrays;

	bool IsValid(TextureRenderTaskHandle Handle) {
		return false;
	}

	void SetOutputTexture(TextureRenderTaskHandle Handle, Resources::TextureHandle Texture) {
		if (!IsValid(Handle))
			return;
		m_Arrays.TextureHandle(Handle.m_Value) = Texture;
	}

	void ResetTexture(TextureRenderTaskHandle Handle, math::uvec2 NewSize, Device::TextureType Type) {
		if (!IsValid(Handle))
			return;

	}
};

//---------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------

TextureRenderTaskPointer::TextureRenderTaskPointer(TextureRendererData* Data, TextureRenderTaskHandle Handle):
		m_Data(Data), m_Handle(Handle) {
}

TextureRenderTaskPointer::~TextureRenderTaskPointer() {
}

//---------------------------------------------------------------------------------------

bool TextureRenderTaskPointer::IsValid() const { 
	if (!m_Data) 
		return false; 
	return m_Data->IsValid(m_Handle); 
}

void TextureRenderTaskPointer::SetOutputTexture(Resources::TextureHandle Texture) {
	if (m_Data)
		m_Data->SetOutputTexture(m_Handle, Texture);
}

void TextureRenderTaskPointer::ResetTexture(math::uvec2 NewSize, Device::TextureType Type) {
	if (m_Data)
		m_Data->ResetTexture(m_Handle, NewSize, Type);
}

//---------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------

TextureRenderer::TextureRenderer() {
}

TextureRenderer::~TextureRenderer() {
}

//---------------------------------------------------------------------------------------

bool TextureRenderer::Initialize() {
	m_TaskData = std::make_unique<TextureRendererData>();
	return true;
}

bool TextureRenderer::Finalize() {
	m_TaskData.reset();
	return true;
}

//---------------------------------------------------------------------------------------

TextureRenderTaskPointer* TextureRenderer::NewTask() {
	return nullptr;
}

TextureRenderTaskPointer* TextureRenderer::FromHandle(TextureRenderTaskHandle Handle) {
	return nullptr;
}

} //namespace Tasks 
} //namespace Renderer 
} //namespace MoonGlare 

