/*
    Generated by cppsrc.sh
    On 2014-12-11 19:44:39,04
    by Paweu
*/

#pragma once

enum class SettingsGroup {
    None,
    Localization,
    Input,
    Sound,
    Sound_Volume,
//Nongroups
    Debug,
    Modules,
};

class Settings_t {
public:
    static void GetStdModuleList(std::vector<string> &table);

    struct Modules_t {
        std::vector<string> List;

        template <class T> void Serialize(T & s) {
            s.ValueContainer(List, "List", ::Settings_t::GetStdModuleList);
        }
    } Modules;

    //dynamic configuration

    struct Localization {
        string Code;
        template <class T> void Serialize(T & s) {
            s.Value(Code, "Code", "en");
        }
    } Localization;

    template <class T> void Serialize(T & s) {
        s.Group(Modules, "Modules");
        s.Group(Localization , "Localization");
    }

    Settings_t* operator->() { return this; }

    //Static settings
    enum {
        JobQueueThreads			= 2,
    };

    struct FileSystem {
        enum {
            DataBuffer			= 10 * 1024 * 1024, //10MB

            PathReserve			= 128,
            DefaultLoadFlags	= 0,
        };
    };
    
    struct Scenes {
        static inline float GetSceneLoadTimeOut() { return 0.2f; }
    };

    void Load();
    void Save();

    template<class T, class D>
    struct BaseSettingInfo {
        using Type = T;
        static void set(Type v) { _value = v; }
        static Type get() { return _value; }
    protected:
        static Type _value;
    };

    template<class D>
    struct BaseSettingInfo<std::string, D> {
        using Type = std::string;
        static void set(std::string v) { _value.swap(v); }
        static const std::string& get() { return _value; }
    protected:
        static std::string _value;
    };

    ~Settings_t();
    Settings_t();
protected:
};

template<class T, class D>
T Settings_t::BaseSettingInfo<T, D>::_value = D::default();

template<class D>
std::string Settings_t::BaseSettingInfo<std::string, D>::_value = D::default();

extern Settings_t Settings;
