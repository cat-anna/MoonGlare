/*
  * Generated by cppsrc.sh
  * On 2015-03-01 10:13:44,31
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/
#include <pch.h>
#include <MoonGlare.h>
#include "../GUI.h"
#include "Image.h"

namespace MoonGlare {
namespace GUI {
namespace Widgets {

GABI_IMPLEMENT_STATIC_CLASS(Image);
RegisterApiDerivedClass(Image, &Image::RegisterScriptApi);
WidgetClassRegister::Register<Image> ImageReg;

Image::Image(iWidget *Parent):
		BaseClass(Parent),
		m_ImageName(""),
		m_ScaleMode(ScaleMode::None),
		m_Scale(1.0f),
		m_ImageAlignMode(InnerAlignMode::LeftTop) {
	SetAutoSize(true);
}

Image::~Image() {
}

//----------------------------------------------------------------------------------

void Image::RegisterScriptApi(ApiInitializer &api) {
	api
	.deriveClass<ThisClass, BaseClass>("ImageWidget")
		.addFunction("SetImage", &ThisClass::SetImage)
		.addFunction("SetScale", &ThisClass::SetScale)
	.endClass()
	;
}
 
//----------------------------------------------------------------------------------
 
void Image::ScriptSet(Utils::Scripts::TableDispatcher &table) {
	if (table.ElementExists("Image")) SetImage(table.getString("Image", ERROR_STR));
	if (table.ElementExists("ScaleMode")) SetScaleMode(ScaleModeEnum::ConvertSafe(table.getString("ScaleMode", ERROR_STR)));
	return BaseClass::ScriptSet(table);
}

void Image::RecalculateMetrics() {
	BaseClass::RecalculateMetrics();
	m_ImagePosition = GetPosition();

	if (m_ScaleMode == ScaleMode::None || !m_Animation.Data) {
		m_EffectiveScale = Point(m_Scale);
		return;
	}

	Point ratio = Point(m_Animation.Data->GetFrameSize()) / m_Size;

	switch (m_ScaleMode) {
	case ScaleMode::Fit:
		m_EffectiveScale = ratio;
		break;
	case ScaleMode::ProportionalFit: 
		m_EffectiveScale = Point(math::min(ratio.x, ratio.y));
		break;
	case ScaleMode::User:
		m_EffectiveScale = Point(m_Scale);
		break;
	case ScaleMode::None:
		break;
	default:
		LogInvalidEnum(m_ScaleMode);
		m_EffectiveScale = Point(m_Scale);
		break;
	}
	if (!m_Animation.Data)
		return;

	Point frame = m_Animation.Data->GetFrameSize();
	frame *= m_EffectiveScale;

	ProcessInnerAlign(m_ImageAlignMode, m_ImagePosition, frame);
}

void Image::Draw(Graphic::MatrixStack &dev) {
	if (!m_Animation.Data)
		return;
	dev.Push(); 
	dev.Translate(m_ImagePosition);
	if (m_ScaleMode != ScaleMode::None) {
		dev.Scale(m_Scale);
	}
	dev.Update();
	auto *style = GetCurrentStyle();
	dev.Device.CurrentShader()->SetBackColor(style->BaseColor);
	m_Animation.Draw(dev);
	dev.Pop();
}

void Image::Process(const Core::MoveConfig &conf) {
	m_Animation.Update(conf);
}
  
//----------------------------------------------------------------------------------

void Image::SetImage(const string& Name) {
	m_ImageName = Name;
	ResetImage();
}

void Image::SetScaleMode(ScaleMode value) {
	m_ScaleMode = value;
	if (!IsLocked())
		RecalculateMetrics();
}

void Image::SetScale(float value) {
	m_Scale = value;
	if (!IsLocked())
		RecalculateMetrics();
}

void Image::SetImageAlignMode(InnerAlignMode value) {
	m_ImageAlignMode = value;
	if (!IsLocked())
		RecalculateMetrics();
}

void Image::ResetImage() {
	auto style = GetCurrentStyle();
	if (!style) {
		AddLog(Error, "Got nullptr style!");
		return;
	}
	auto anim = style->GetAnimation(m_ImageName);
	if (!anim || anim == m_Animation.Data)
		return;
	m_Animation = anim->CreateInstance();
	if (IsAutoSize()) {
		SetSize(anim->GetFrameSize());
		if (!IsLocked())
			RecalculateMetrics();
	}
}

//----------------------------------------------------------------------------------

void Image::OnMouseEnter(const Events::MouseEnterEvent &event) {
	BaseClass::OnMouseEnter(event);
	ResetImage();
	SCRIPT_INVOKE_NORETURN(OnMouseEnter);
}

void Image::OnMouseLeave(const Events::MouseLeaveEvent &event) {
	BaseClass::OnMouseLeave(event);
	ResetImage();
	SCRIPT_INVOKE_NORETURN(OnMouseLeave);
}

void Image::OnMouseMove(const Events::MouseMoveEvent &event) { 
	SCRIPT_INVOKE_NORETURN(OnMouseMove);
}

void Image::OnMouseDown(const Events::MouseDownEvent &event) {
	SCRIPT_INVOKE_NORETURN(OnMouseDown);
}

void Image::OnMouseUp(const Events::MouseUpEvent &event) {
	SCRIPT_INVOKE_NORETURN(OnMouseUp);
}

} //namespace Widgets 
} //namespace GUI 
} //namespace MoonGlare 
