/*
  * Generated by cppsrc.sh
  * On 2015-03-01  6:54:44,27
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/
#include <pch.h>
#include <MoonGlare.h>
#include <Engine/DataClasses/iFont.h>
#include "../GUI.h"
#include "Label.h"

namespace MoonGlare {
namespace GUI {
namespace Widgets {

GABI_IMPLEMENT_STATIC_CLASS(Label);
RegisterApiDerivedClass(Label, &Label::RegisterScriptApi);
WidgetClassRegister::Register<Label> LabelReg;

Label::Label(iWidget *Parent):
		BaseClass(Parent),
		m_Wrapper(),
		m_TextAlignMode(TextAlignMode::LeftTop),
		m_TextPosition(0) {
	SetAutoSize(true);
	AddLog(FixMe, "Implement autosize logic in label widget");
}

Label::~Label() {
}

//----------------------------------------------------------------------------------

void Label::RegisterScriptApi(ApiInitializer &api) {
	api
	.deriveClass<ThisClass, BaseClass>("LabelWidget")
		.addFunction("SetText", &ThisClass::SetUtf8Text)
		.addFunction("GetText", &ThisClass::GetText)

		//.addFunction("SetFont", &ThisClass::SetFont)

		.addFunction("SetTextAlignMode", Utils::Template::StringToEnum<ThisClass, TextAlignMode, TextAlignModeEnum, &ThisClass::SetTextAlignMode>::get())
	.endClass()
	;
}

//----------------------------------------------------------------------------------

void Label::ScriptSet(Utils::Scripts::TableDispatcher &table) {
	BaseClass::ScriptSet(table);
	if (table.ElementExists("Text")) SetUtf8Text(table.getString("Text", ""));
	if (table.ElementExists("TextAlignMode")) SetTextAlignMode(TextAlignModeEnum::ConvertSafe(table.getString("TextAlignMode", 0)));
}

//----------------------------------------------------------------------------------

void Label::SetTextAlignMode(TextAlignMode mode) {
	m_TextAlignMode = mode;

	if (!m_Wrapper) return;
	auto tsize = m_Wrapper->GetSize();

	m_TextPosition = GetPosition();

	switch (m_TextAlignMode) {
	case MoonGlare::GUI::TextAlignMode::LeftTop: 
		break;
	case MoonGlare::GUI::TextAlignMode::MiddleTop: 
		m_TextPosition.x += m_Size.x / 2.0f - tsize.x / 2.0f;
		break;
	case MoonGlare::GUI::TextAlignMode::RightTop: 
		m_TextPosition.x += m_Size.x - tsize.x;
		break;

	case MoonGlare::GUI::TextAlignMode::LeftMiddle: 
		m_TextPosition.y += m_Size.y / 2.0f - tsize.y / 2.0f;
		break;
	case MoonGlare::GUI::TextAlignMode::Middle: 
		m_TextPosition += (m_Size - tsize) / 2.0f;
		break;
	case MoonGlare::GUI::TextAlignMode::RightMiddle:
		m_TextPosition.x += m_Size.x - tsize.x;
		m_TextPosition.y += m_Size.y / 2.0f - tsize.y / 2.0f;
		break;

	case MoonGlare::GUI::TextAlignMode::LeftBottom: 
		m_TextPosition.y += m_Size.y - tsize.y;
		break;
	case MoonGlare::GUI::TextAlignMode::MiddleBottom:
		m_TextPosition.y += m_Size.y - tsize.y;
		m_TextPosition.x += m_Size.x / 2.0f - tsize.x / 2.0f;
		break;
	case MoonGlare::GUI::TextAlignMode::RightBottom: 
		m_TextPosition += m_Size - tsize;
		break;

	//case MoonGlare::GUI::TextAlignMode::Justified: break;
	default:
		AddLog(InvalidEnum, m_TextAlignMode);
		break;
	}

	if (!m_Wrapper->AllowSubPixels()) {
		m_TextPosition = glm::ivec2(m_TextPosition);
	}
}

void Label::SetUtf8Text(const string& text) {
	SetText(Utils::Strings::towstring(text));
}

void Label::SetText(const wstring& text) {
	m_Text = text;
	if (m_Wrapper) {
		m_Wrapper.reset();
	}
}

void Label::RefreshTextWrapper() {
	auto *style = GetCurrentStyle();
	if (!style || !style->Font) {
		m_Wrapper.reset();
		return;
	}
	m_Wrapper = style->Font->GenerateInstance(m_Text.c_str(), &style->FontStyle);
	if (m_Wrapper && IsAutoSize()) {
		m_Size = m_Wrapper->GetSize();
		BaseClass::RecalculateMetrics();
	}
	SetTextAlignMode(m_TextAlignMode);//rest text align
}

//----------------------------------------------------------------------------------

void Label::RecalculateMetrics() {
	if (!m_Wrapper) {
		RefreshTextWrapper();
	}
	BaseClass::RecalculateMetrics();
}

void Label::Process(const Core::MoveConfig &conf) {
	if (!m_Wrapper) {
		RefreshTextWrapper();
	}	
}
 
void Label::Draw(Graphic::MatrixStack &dev) {
	if (m_Wrapper) {
		dev.Push(); 
		dev.Translate(m_TextPosition);
		dev.Update();
		m_Wrapper->Render(dev.Device);
		dev.Pop();
	}
}

//----------------------------------------------------------------------------------

void Label::OnMouseEnter(const Events::MouseEnterEvent &event) {
	if (!IsEnabled())
		return;
	SetHovered(true);
	RefreshTextWrapper();
	SCRIPT_INVOKE_NORETURN(OnMouseEnter);
}

void Label::OnMouseLeave(const Events::MouseLeaveEvent &event) {
	if (!IsEnabled())
		return;
	SetHovered(false);
	RefreshTextWrapper();
	SCRIPT_INVOKE_NORETURN(OnMouseLeave);
}

void Label::OnMouseMove(const Events::MouseMoveEvent &event) { 
	SCRIPT_INVOKE_NORETURN(OnMouseMove);
}

void Label::OnMouseDown(const Events::MouseDownEvent &event) {
	SCRIPT_INVOKE_NORETURN(OnMouseDown);
}

void Label::OnMouseUp(const Events::MouseUpEvent &event) {
	SCRIPT_INVOKE_NORETURN(OnMouseUp);
}

} //namespace Widgets 
} //namespace GUI 
} //namespace MoonGlare 
