/*
  * Generated by cppsrc.sh
  * On 2015-03-01  6:54:52,16
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/
#include <pch.h>
#include <MoonGlare.h>
#include "../GUI.h"
#include "Panel.h"

#include <Utils/LuaUtils.h>

namespace MoonGlare {
namespace GUI {
namespace Widgets {

SPACERTTI_IMPLEMENT_STATIC_CLASS(Panel);
RegisterApiDerivedClass(Panel, &Panel::RegisterScriptApi);
WidgetClassRegister::Register<Panel> PanellReg;

Panel::Panel(iWidget *Parent):
		BaseClass(Parent) {
}

Panel::~Panel() {
}

//----------------------------------------------------------------------------------

void Panel::RegisterScriptApi(ApiInitializer &api) {
	api
	.deriveClass<ThisClass, BaseClass>("PanelWidget")
	.endClass()
	;
}

void Panel::ScriptSet(Utils::Scripts::TableDispatcher &table) {
	Lock();
	BaseClass::ScriptSet(table);
	m_Children.Clean();
	if (table.IsTable("Children")) {
		auto t = table.GetTable("Children");
		m_Children.CreateChildren(t, this);
	}
	Unlock();
	RecalculateMetrics();
}

//----------------------------------------------------------------------------------

void Panel::Process(const Core::MoveConfig &conf) {
	for (auto &it : m_Children)
		it->Process(conf);
}

void Panel::Draw(Graphic::MatrixStack &dev){
	dev.Push();
	dev.Translate(m_Position);
	for (auto &it : m_Children)
		it->Draw(dev);
	dev.Pop();
}

//----------------------------------------------------------------------------------

void Panel::AddWidget(Widget &w) {
	w->SetParent(this);
	m_Children.Add(w);
	if (!IsLocked())
		RecalculateMetrics();
}

void Panel::CleanWidgets() {
	m_Children.Clean();
	if (!IsLocked())
		RecalculateMetrics();
}

void Panel::RecalculateMetrics() {
	BaseClass::RecalculateMetrics();
	for (auto &it : m_Children)
		it->RecalculateMetrics();
}

//----------------------------------------------------------------------------------

void Panel::SetStyle(SharedStyleSet style) {
	BaseClass::SetStyle(style);
	for (auto &it : m_Children)
		it->SetStyle(style);
}

//----------------------------------------------------------------------------------

void Panel::Lock() {
	if (IsLocked()) return;
	BaseClass::Lock();
	for (auto &it : m_Children) it->Lock();
}

void Panel::Unlock() {
	BaseClass::Unlock();
	if (!IsLocked())
		for (auto &it : m_Children) it->Unlock();
}	

iWidget* Panel::FindWidget(const string& name) const {
	if (GetName() == name)
		return const_cast<ThisClass*>(this);

	for (auto &it : m_Children) {
		auto ptr = it->FindWidget(name);
		if (ptr) return ptr;
	}

	return nullptr;
}

iWidget* Panel::GetWidgetAt(const Point &p) const {
	if (!m_BoundingRect.IsPointInside(p))
		return nullptr;
	
	for (auto &it : m_Children) {
		auto *w = it->GetWidgetAt(p);
		if (w)
			return w;
	}

	return nullptr;
}

} //namespace Widgets 
} //namespace GUI 
} //namespace MoonGlare 
