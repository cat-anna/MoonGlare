/*
  * Generated by cppsrc.sh
  * On 2015-05-21 21:00:20,91
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/

#pragma once
#ifndef SplitPanel_H
#define SplitPanel_H

namespace MoonGlare {
namespace GUI {
namespace Widgets {

class SplittingPanel;

/** Two-split panel */
class SplitPanel  : public iWidget {
	SPACERTTI_DECLARE_STATIC_CLASS(SplitPanel, iWidget)
	DECLARE_EXCACT_SCRIPT_CLASS_GETTER();
public:
 	SplitPanel(iWidget *Parent);
 	virtual ~SplitPanel();

	virtual void Draw(Graphic::MatrixStack &dev) override; 
	virtual void Process(const Core::MoveConfig &conf) override;
	virtual void RecalculateMetrics() override;

	virtual iWidget* GetWidgetAt(const Point &p) const override;
	iWidget* FindWidget(const string& name) const override; 
	
	virtual void Lock() override;
	virtual void Unlock() override;

	/** Remove all non-metawidgets from container. */
	void CleanWidgets();

	virtual void ScriptSet(Utils::Scripts::TableDispatcher &table) override;
	virtual void SetStyle(SharedStyleSet style) override;

	static void RegisterScriptApi(ApiInitializer &api);

	/** Get pointer to left panel */
	Panel* GetLeftPanel();
	/** Get pointer to right panel */
	Panel* GetRightPanel();

	DefineDirectGetter(SplitPosition, float);
	/** Set split normalized position */
	void SetSplitPosition(float value);
	DefineDirectGetter(SplitPadding, float);
	void SetSplitPadding(float value);
	DefineDirectGetter(SplitOrientation, Orientation);
	void SetSplitOrientation(Orientation value);
protected:
private: 
	using SplittingPanelPtr = std::unique_ptr < SplittingPanel > ;
	SplittingPanelPtr m_LeftPanel, m_RightPanel;
	/** Position of split (0-1) */
	float m_SplitPosition;
	/** Padding between panels. [pixels] */
	float m_SplitPadding;
	/** Split orientation */
	Orientation m_SplitOrientation;
};

} //namespace Widgets 
} //namespace GUI 
} //namespace MoonGlare 

#endif
