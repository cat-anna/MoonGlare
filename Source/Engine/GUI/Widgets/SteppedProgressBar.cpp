/*
  * Generated by cppsrc.sh
  * On 2015-07-16 23:21:19,47
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/
#include <pch.h>
#include <MoonGlare.h>
#include "../GUI.h"
#include "SteppedProgressBar.h"

namespace MoonGlare {
namespace GUI {
namespace Widgets {

SPACERTTI_IMPLEMENT_STATIC_CLASS(SteppedProgressBar);
RegisterApiDerivedClass(SteppedProgressBar, &SteppedProgressBar::RegisterScriptApi);
WidgetClassRegister::Register<SteppedProgressBar> SteppedProgressBarReg;

SteppedProgressBar::SteppedProgressBar(iWidget *Parent):
		BaseClass(Parent),
		m_UniformValue(0.5f),
		m_Min(0.0f),
		m_Max(1.0f),
		m_StepsCount(20),
		m_InactiveColor(1, 0, 0) {
}

SteppedProgressBar::~SteppedProgressBar() {
}

//----------------------------------------------------------------------------------

void SteppedProgressBar::RegisterScriptApi(ApiInitializer &api) {
	api
	.deriveClass<ThisClass, BaseClass>("SteppedProgressBarWidget")
	//.addFunction("SetRange", &ThisClass::SetRange)
	//.addFunction("SetStepsCount", &ThisClass::SetStepsCount)
	//.addFunction("GetUniformValue", &ThisClass::GetUniformValue)
	//.addFunction("GetValue", &ThisClass::GetValue)
	.endClass()
	;
}

//----------------------------------------------------------------------------------

void SteppedProgressBar::Draw(Graphic::MatrixStack &dev) {
	//BaseClass::Draw(dev);
	dev.Push();
	if (!m_StepAnimation.Data)
		return;
	float floatcount = m_UniformValue * m_StepsCount;
	unsigned activecount = static_cast<unsigned>(floatcount);
	floatcount -= activecount;
	if (floatcount >= 0.5f)
		++activecount;
	Graphic::vec2 delta(m_StepSize[0], 0.0f);

	Graphic::vec2 scale = m_StepSize;
	scale /= Graphic::vec2(m_StepAnimation.Data->GetFrameSize());
	delta /= scale;
	dev.Translate(m_Position);
	dev.Scale(scale);
	dev.Update();

	auto *style = GetCurrentStyle();
	dev.Device.CurrentShader()->SetBackColor(style->BaseColor);
	for (unsigned i = 0; i < activecount; ++i) {
		m_StepAnimation.Draw(dev);
		dev.Translate(delta);
		dev.Update();
	}
	dev.Device.CurrentShader()->SetBackColor(style->BaseColor * m_InactiveColor);
	for (unsigned i = activecount; i < m_StepsCount; ++i) {
		m_StepAnimation.Draw(dev);
		dev.Translate(delta);
		dev.Update();
	}
	dev.Pop();
}

void SteppedProgressBar::Process(const Core::MoveConfig &conf) {
	BaseClass::Process(conf);
}

void SteppedProgressBar::RecalculateMetrics() {
	BaseClass::RecalculateMetrics();
	auto size = GetSize();
	m_StepSize[0] = size[0] / (float)m_StepsCount;
	m_StepSize[1] = size[1];
}

void SteppedProgressBar::ScriptSet(Utils::Scripts::TableDispatcher &table) {
	BaseClass::ScriptSet(table);
}

//----------------------------------------------------------------------------------

void SteppedProgressBar::SetUniformValue(float f) {
	f = math::clamp(f, 0.0f, 1.0f);
	m_UniformValue = f;
}

void SteppedProgressBar::SetValue(float f) {
	f = math::clamp(f, m_Min, m_Max);
	f -= m_Min;
	f /= (m_Max - m_Min);
	SetUniformValue(f);
}

float SteppedProgressBar::GetValue() const { 
	return m_UniformValue * (m_Max - m_Min) + m_Min; 
}

void SteppedProgressBar::SetRange(float min, float max) {
	if (min > max) {
		m_Min = m_Min * min;
	}
	m_Min = min;
	m_Max = max;
}

void SteppedProgressBar::SetStepsCount(unsigned Count) {
	m_StepsCount = Count;
	if (!IsLocked())
		RecalculateMetrics();
}

void SteppedProgressBar::SetStepImage(const string& Name) {
	m_StepImage = Name;
	ResetImage();
}

void SteppedProgressBar::ResetImage() {
	auto anim = GetCurrentStyle()->GetAnimation(m_StepImage);
	if (!anim || anim == m_StepAnimation.Data)
		return;
	m_StepAnimation = anim->CreateInstance();
	if (IsAutoSize()) {
		SetSize(anim->GetFrameSize());
		if (!IsLocked())
			RecalculateMetrics();
	}
}

} //namespace Widgets 
} //namespace GUI 
} //namespace MoonGlare 

