/*
  * Generated by cppsrc.sh
  * On 2015-03-01  6:54:06,68
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/

#pragma once
#ifndef Widget_H
#define Widget_H

namespace MoonGlare {
namespace GUI {

DECLARE_SCRIPT_EVENT_VECTOR(WidgetScriptEvents, iScriptEvents,
		SCRIPT_EVENT_ADD(
			(OnMouseEnter)(OnMouseLeave)
			(OnMouseMove)
			(OnMouseDown)(OnMouseUp)
		),
		SCRIPT_EVENT_REMOVE());

class iWidget : public NamedObject {
	SPACERTTI_DECLARE_ABSTRACT_CLASS(iWidget, NamedObject);
	DECLARE_SCRIPT_HANDLERS_ROOT(WidgetScriptEvents);
	DECLARE_EXCACT_SCRIPT_CLASS_GETTER();
	DISABLE_COPY();
	friend class Screen;
public:
 	iWidget(iWidget *Parent);
 	virtual ~iWidget();

	/** Lock widget, for update (RecalculateMetrics IS NOT called automaticaly after each change) */
	virtual void Lock();
	/** Unlock widget after update. RecalculateMetrics is not clled automatically */
	virtual void Unlock();

	/** Recalculate widget mertics based on aligment settings. */
	virtual void RecalculateMetrics();
	/** Draw widget */
	virtual void Draw(Graphic::MatrixStack &dev); 
	/** Process widget */
	virtual void Process(const Core::MoveConfig &conf);

	virtual iWidget* GetWidgetAt(const Point &p) const;

	//TODO: design more mouse actions
	virtual void OnMouseEnter(const Events::MouseEnterEvent &event);
	virtual void OnMouseLeave(const Events::MouseLeaveEvent &event);
	virtual void OnMouseMove(const Events::MouseMoveEvent &event);
	virtual void OnMouseDown(const Events::MouseDownEvent &event);
	virtual void OnMouseUp(const Events::MouseUpEvent &event);
	//TODO: design key actions

	DefineDirectGetterAll(Parent, iWidget*)
	DefineDirectGetterAll(Screen, Screen*)
	DefineDirectGetterAll(GUIEngine, GUIEngine*)
	DefineDirectGetterAll(Style, SharedStyleSet)

	const Rect& GetBoundingRect() const { return m_BoundingRect; }
	const Point& GetPosition() const { return m_Position; }
	const Point& GetSize() const { return m_Size; }
	DefineRefGetterConst(ScreenPosition, Point);
	const Margin& GetMargin() const { return m_Margin; }
	AlignMode GetAlignMode() const { return m_AlignMode; }

	virtual void SetPosition(const Point &pos);
	virtual void SetSize(const Point &size);
	virtual void SetMargin(const Margin &margin);
	virtual void SetAlignMode(AlignMode Mode);
	virtual void SetMetrics(const Point &pos, const Point &size);
	virtual void SetMetrics(const Point &pos, const Point &size, const Margin& margin);
	using BaseClass::SetName;
	virtual void ScriptSet(Utils::Scripts::TableDispatcher &table);
	virtual void SetStyle(SharedStyleSet style);
	virtual void SetStyleByName(const string& Name);
	virtual void SetParent(iWidget *w);

	void SetFocus();

	virtual iWidget* FindWidget(const string& name) const;
	virtual const Style* GetCurrentStyle() const;

	struct Flags {
		enum {
			Visible		= 0x000001, /** Widget is visible and it will be drawn. */
			Enabled		= 0x000002, /** Widget is enabled. Passing input is allowed. */
			Focused		= 0x000004, /** Widget has focus. All keys input are direted to that one. */
			Hovered		= 0x000008, /** Mouse is above this widget. */
			AutoSize	= 0x000010, /** Size of widget will change according to content. Have effect only on some widgets */
								   
			OwnerStyle	= 0x000100, /** Widget style is inherited from parent */
							   
			Locked		= 0x002000, /** locked for update, all recalculations are suspended. */
			LockOwner	= 0x004000, /** Widget is owner of current lock. */			
							   
			MetaObject	= 0x000100, /** Created by engine itself. Cannot be removed by user or clean */
		};
	};


	DefineFlag(m_Flags, Flags::Visible, Visible);
	DefineFlag(m_Flags, Flags::Enabled, Enabled);
	DefineFlag(m_Flags, Flags::Focused, Focused);
	DefineFlag(m_Flags, Flags::AutoSize, AutoSize);
	DefineFlag(m_Flags, Flags::MetaObject, MetaObject);
	DefineFlagGetter(m_Flags, Flags::Hovered, Hovered);
	DefineFlagGetter(m_Flags, Flags::OwnerStyle, OwnerStyle);
	DefineFlagGetter(m_Flags, Flags::Locked, Locked);
	DefineFlagGetter(m_Flags, Flags::LockOwner, LockOwner);

	static void RegisterScriptApi(ApiInitializer &api);
protected:
	Rect m_BoundingRect;
	Point m_Position, m_ScreenPosition;
	Point m_Size;
	Margin m_Margin;
	AlignMode m_AlignMode;
	unsigned m_Flags;

	DefineFlagSetter(m_Flags, Flags::Hovered, Hovered);

	void ProcessInnerAlign(InnerAlignMode mode, Point &position, const Point &Size) const;
private: 
	DefineFlagSetter(m_Flags, Flags::Locked, Locked);
	DefineFlagSetter(m_Flags, Flags::LockOwner, LockOwner);
	DefineFlagSetter(m_Flags, Flags::OwnerStyle, OwnerStyle);

	iWidget *m_Parent;
	Screen *m_Screen;
	GUIEngine *m_GUIEngine;
	SharedStyleSet m_Style;
};

} //namespace GUI 
} //namespace MoonGlare 

#endif
