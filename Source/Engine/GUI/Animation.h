/*
  * Generated by cppsrc.sh
  * On 2015-03-06  9:44:21,50
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/

#ifndef GUI_Texture_H
#define GUI_Texture_H

namespace MoonGlare {
namespace GUI {
	
class Animation : public cRootClass, public std::enable_shared_from_this<Animation> {
	SPACERTTI_DECLARE_STATIC_CLASS(Animation, cRootClass);
public:
 	Animation();
 	~Animation();

	DefineRefGetterConst(Name, string);

	bool LoadMeta(const xml_node node);

	AnimationInstance CreateInstance();
	void UpdateInstance(const Core::MoveConfig &conf, AnimationInstance &instance);

	void Draw(Graphic::MatrixStack &dev, AnimationInstance &instance) const;

	DefineRefGetterConst(FrameSize, math::uvec2);
protected:
	string m_Name;
	float m_Speed;
	TextureFile m_Texture;
	unsigned m_StartFrame, m_EndFrame;
	math::uvec2 m_FrameSize;
	math::uvec2 m_FrameSpacing;
	math::uvec2 m_FrameCount;
	std::unique_ptr<Graphic::VAO[]> m_FrameTable;
	bool m_DrawEnabled;

	bool GenerateFrames();
};

struct AnimationInstance {
	SharedAnimation Data;
	float Position;

	void Update(const Core::MoveConfig &conf) { if(Data) Data->UpdateInstance(conf, *this); }
	void Draw(Graphic::MatrixStack &dev) { if(Data) Data->Draw(dev, *this); }
};

} //namespace GUI 
} //namespace MoonGlare 

#endif
