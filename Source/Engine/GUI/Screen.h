/*
  * Generated by cppsrc.sh
  * On 2015-03-01  9:09:00,10
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/

#pragma once
#ifndef Screen_H
#define Screen_H

namespace MoonGlare {
namespace GUI {

class Screen : public iWidget {
	SPACERTTI_DECLARE_STATIC_CLASS(Screen, iWidget)
public:
 	Screen(GUIEngine *Owner, Graphic::Window *Window);
 	virtual ~Screen();

	/** Adds widget to screen. Takes ownership. Parameter is swapped into internal storage, and is left empty. */
	void AddWidget(Widget &w);
	/** Adds widget to screen. Takes ownership via unique_ptr */
	void AddWidget(iWidget *w) { Widget p(w); AddWidget(p); }
	/** Destroy widget and release its memory */
	void RemoveWidget(iWidget *widget);
	/** Remove all widgets, except meta ones */
	void CleanWidgets();

	virtual iWidget* GetWidgetAt(const Point &p) const override;

	virtual void Draw(Graphic::MatrixStack &dev) override; 
	virtual void Process(const Core::MoveConfig &conf) override;

	virtual void RecalculateMetrics() override;

	virtual void Lock() override;
	virtual void Unlock() override;

	virtual void SetPosition(const Point &pos) override;
	virtual void SetSize(const Point &size) override;
	virtual void SetMargin(const Margin &margin) override;
	virtual void SetAlignMode(AlignMode Mode) override;
	virtual void SetMetrics(const Point &pos, const Point &size) override;
	virtual void SetMetrics(const Point &pos, const Point &size, const Margin& margin) override;
	virtual void ScriptSet(Utils::Scripts::TableDispatcher &table);
	virtual void SetStyle(SharedStyleSet style);
	
	virtual iWidget* FindWidget(const string& name) const;

	static void RegisterScriptApi(ApiInitializer &api);
protected:
	Graphic::Window *m_Window;
	Graphic::VirtualCameraPtr m_Camera;
	WidgetContainer m_Children;
};

} //namespace GUI 
} //namespace MoonGlare 

#endif
