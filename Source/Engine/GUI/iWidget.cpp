/*
  * Generated by cppsrc.sh
  * On 2015-03-01  6:54:06,68
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/
#include <pch.h>
#include "GUI.h"
#include <MoonGlare.h>

namespace MoonGlare {
namespace GUI {

GABI_IMPLEMENT_ABSTRACT_CLASS(iWidget)
IMPLEMENT_SCRIPT_EVENT_VECTOR(WidgetScriptEvents);
RegisterApiDerivedClass(iWidget, &iWidget::RegisterScriptApi);

iWidget::iWidget(iWidget *Parent):
		BaseClass(),
		m_BoundingRect(),
		m_Position(0),
		m_ScreenPosition(0),
		m_Size(1),
		m_Margin(),
		m_AlignMode(AlignMode::None),
		m_Flags(0),
		m_Screen(0),
		m_Parent(nullptr) {
	SetVisible(true);
	SetEnabled(true);
	SetParent(Parent);
}

iWidget::~iWidget() {

}

//----------------------------------------------------------------------------------

void iWidget::RegisterScriptApi(ApiInitializer &api) {
	api
	.deriveClass<ThisClass, BaseClass>("iWidget")
		.addFunction("FindWidget", &ThisClass::FindWidget)

		.addFunction("RecalculateMetrics", &ThisClass::RecalculateMetrics)
		.addFunction("Lock", &ThisClass::Lock)
		.addFunction("Unlock", &ThisClass::Unlock)

		.addFunction("SetPosition", Utils::Template::DynamicArgumentConvert<ThisClass, Point, &ThisClass::SetPosition, float, float>::get())
		.addFunction("SetSize", Utils::Template::DynamicArgumentConvert<ThisClass, Point, &ThisClass::SetSize, float, float>::get())
		.addFunction("SetMargin", Utils::Template::DynamicArgumentConvert<ThisClass, Margin, &ThisClass::SetMargin, float, float, float, float>::get())
		
		.addFunction("SetAlignMode", Utils::Template::StringToEnum<ThisClass, AlignMode, AlignModeEnum, &ThisClass::SetAlignMode>::get())

		.addFunction("SetName", &NamedObject::SetName)
		.addFunction("SetFocus", &ThisClass::SetFocus)
		.addFunction("Set", Utils::Scripts::TableCallDispatcher<ThisClass, &ThisClass::ScriptSet>::get())
	.endClass()
	;
}

//----------------------------------------------------------------------------------

void iWidget::ScriptSet(Utils::Scripts::TableDispatcher &table) {
	if (table.ElementExists("Name")) SetName(table.getString("Name", "?"));
	if (table.IsTable("Size")) SetSize(table.GetVector("Size", m_Size));
	if (table.IsTable("Position")) SetPosition(table.GetVector("Position", m_Position));
	if (table.ElementExists("AlignMode")) SetAlignMode(AlignModeEnum::ConvertSafe(table.getString("AlignMode", 0)));
	if (table.ElementExists("Enabled")) SetEnabled(table.getBoolean("Enabled", true));
	if (table.ElementExists("Visible")) SetVisible(table.getBoolean("Visible", true));
	if (table.IsTable("Margin")) {
		auto m = Margin(table.GetVector("Margin", math::vec4(0)));
		SetMargin(m);
	}
	if (table.ElementExists("Style")) SetStyleByName(table.getString("Style", "Default"));
}

//----------------------------------------------------------------------------------

iWidget* iWidget::FindWidget(const string& name) const {
	if (GetName() == name)
		return const_cast<ThisClass*>(this);
	return nullptr;
}

void iWidget::SetFocus() {
	if (IsFocused()) return;
	m_GUIEngine->SetFocus(this);
}

//----------------------------------------------------------------------------------

void iWidget::RecalculateMetrics() {
	auto &parentmargin = GetParent()->GetMargin();
	auto &parentsize = GetParent()->GetSize();

	switch (m_AlignMode) {
	case AlignMode::Top: 
		m_Position = Point(parentmargin.Left, parentmargin.Top);
		m_Size.x = parentsize.x - parentmargin.VerticalMargin();
		break;
	case AlignMode::Bottom: 
		m_Size.x = parentsize.x - parentmargin.VerticalMargin();
		m_Position = Point(parentmargin.Left, parentsize.y - parentmargin.Top - m_Size.y);
		break;
	case AlignMode::Left: 
		m_Position = Point(parentmargin.Left, parentmargin.Top);
		m_Size.y = parentsize.y - parentmargin.VerticalMargin();
		break;
	case AlignMode::Right: 
		m_Position = Point(parentsize.x - parentmargin.Right - m_Size.x, parentmargin.Top);
		m_Size.y = parentsize.y - parentmargin.VerticalMargin();
		break;
	case AlignMode::Parent: 
		m_Position = Point(parentmargin.Left, parentmargin.Top);
		m_Size = Point(parentsize.x - parentmargin.HorizontalMargin(), parentsize.y - parentmargin.VerticalMargin());
		break;
	case AlignMode::Center: {
		auto halfparent = parentsize / 2.0f;
		auto halfsize = GetSize() / 2.0f;
		m_Position = halfparent - halfsize;
		break;
	}
	case AlignMode::LeftMiddle: {
		m_Position = Point(parentmargin.Left, 
						   parentmargin.Top + (parentsize.y - parentmargin.VerticalMargin()) / 2.0f);
		break;
	} 
	case AlignMode::RightMiddle: {
		m_Position = Point(parentsize.x - parentmargin.Right - m_Size.x, 
						   parentmargin.Top + (parentsize.y - parentmargin.VerticalMargin()) / 2.0f);
		break;
	} 
	case AlignMode::MiddleTop: {
		m_Position = Point(parentmargin.Left + (parentsize.x - parentmargin.HorizontalMargin() - m_Size.x) / 2.0f, 
						   parentmargin.Top);
		break;
	} 
	case AlignMode::MiddleBottom: {
		m_Position = Point(parentmargin.Left + (parentsize.x - parentmargin.HorizontalMargin() - m_Size.x) / 2.0f, 
						   parentsize.y - parentmargin.Top - m_Size.y);
		break;
	} 
	case AlignMode::None:
	default:
		break;
	}
	m_BoundingRect.SliceFromParent(GetParent()->GetBoundingRect(), m_Position, m_Size);
	m_ScreenPosition = GetParent()->GetScreenPosition() + m_Position;
}

//----------------------------------------------------------------------------------

void iWidget::Lock() {
	if (m_Parent->IsLockOwner() && IsLockOwner())
		SetLockOwner(false);
	if (IsLocked())
		return;
	SetLocked(true);
	SetLockOwner(true);
}

void iWidget::Unlock() {
	if (!IsLockOwner() && GetParent()->IsLocked())
		return;
	SetLocked(false);
	SetLockOwner(false);
}

//----------------------------------------------------------------------------------

void iWidget::SetParent(iWidget *w) {
	m_Parent = w;
	if (w) {
		m_Screen = w->GetScreen();
		m_Style = w->GetStyle();
		m_GUIEngine = w->GetGUIEngine();
		SetLocked(w->IsLocked());
		SetVisible(w->IsVisible());
		SetEnabled(w->IsEnabled());
	}
}

void iWidget::SetStyleByName(const string& Name) {
	auto sss = GetGUIEngine()->GetStyleManager()->GetStyle(Name);
	if (!sss) {
		AddLog(Error, "Unable to find style '" << Name << "'");
		return;
	}
	SetStyle(sss);
}

void iWidget::SetStyle(SharedStyleSet style) {
	if (style == GetParent()->GetStyle())
		SetOwnerStyle(true);
	else
		SetOwnerStyle(false);
	m_Style = style;
}

void iWidget::SetPosition(const Point &pos) {
	m_Position = pos;
	if (!IsLocked()) RecalculateMetrics();
}

void iWidget::SetSize(const Point &size) {
	m_Size = size;
	if (!IsLocked()) RecalculateMetrics();
}

void iWidget::SetMargin(const Margin &margin) {
	m_Margin = margin;
	if (!IsLocked()) RecalculateMetrics();
}

void iWidget::SetAlignMode(AlignMode Mode) {
	m_AlignMode = Mode;
	if (!IsLocked()) RecalculateMetrics();
}

void iWidget::SetMetrics(const Point &pos, const Point &size) {
	if (!IsLocked()) RecalculateMetrics();
}

void iWidget::SetMetrics(const Point &pos, const Point &size, const Margin& margin) {
	if (!IsLocked()) RecalculateMetrics();
}

void iWidget::Draw(Graphic::MatrixStack &dev) {
}

void iWidget::Process(const Core::MoveConfig &conf) {
}

//----------------------------------------------------------------------------------

iWidget* iWidget::GetWidgetAt(const Point &p) const {
	if (IsMetaObject()) return nullptr;
	if (m_BoundingRect.IsPointInside(p))
		return const_cast<iWidget*>(this);
	return nullptr;
}

const Style* iWidget::GetCurrentStyle() const {
	if (!m_Style)
		return nullptr;
	if (IsFocused())
		return &m_Style->Focused;
	if (IsHovered())
		return &m_Style->Hovered;
	return &m_Style->Regular;
}

//----------------------------------------------------------------------------------

void iWidget::ProcessInnerAlign(InnerAlignMode mode, Point &position, const Point &Size) const {
	switch (mode) {
	case InnerAlignMode::LeftTop: 
		break;
	case InnerAlignMode::MiddleTop: 
		position.x += m_Size.x / 2.0f - Size.x / 2.0f;
		break;
	case InnerAlignMode::RightTop: 
		position.x += m_Size.x - Size.x;
		break;
	case InnerAlignMode::LeftMiddle: 
		position.y += m_Size.y / 2.0f - Size.y / 2.0f;
		break;
	case InnerAlignMode::Middle: 
		position += (m_Size - Size) / 2.0f;
		break;
	case InnerAlignMode::RightMiddle:
		position.x += m_Size.x - Size.x;
		position.y += m_Size.y / 2.0f - Size.y / 2.0f;
		break;
	case InnerAlignMode::LeftBottom: 
		position.y += m_Size.y - Size.y;
		break;
	case InnerAlignMode::MiddleBottom:
		position.y += m_Size.y - Size.y;
		position.x += m_Size.x / 2.0f - Size.x / 2.0f;
		break;
	case InnerAlignMode::RightBottom: 
		position += m_Size - Size;
		break;
	//case MoonGlare::GUI::TextAlignMode::Justified: break;
	default:
		AddLog(InvalidEnum, mode);
		break;
	}
}

//----------------------------------------------------------------------------------

void iWidget::OnMouseEnter(const Events::MouseEnterEvent &event) {
	if (!IsEnabled())
		return;
	SetHovered(true);
	SCRIPT_INVOKE_NORETURN(OnMouseEnter);
}

void iWidget::OnMouseLeave(const Events::MouseLeaveEvent &event) {
	if (!IsEnabled())
		return;
	SetHovered(false);
	SCRIPT_INVOKE_NORETURN(OnMouseLeave);
}

void iWidget::OnMouseMove(const Events::MouseMoveEvent &event) { 
	SCRIPT_INVOKE_NORETURN(OnMouseMove);
}

void iWidget::OnMouseDown(const Events::MouseDownEvent &event) {
	SCRIPT_INVOKE_NORETURN(OnMouseDown);
}

void iWidget::OnMouseUp(const Events::MouseUpEvent &event) {
	LOG_NOT_IMPLEMENTED;
	SCRIPT_INVOKE_NORETURN(OnMouseUp);
}

//----------------------------------------------------------------------------------

void WidgetDeleter::operator()(iWidget *w) {
	if (w->IsHovered()) {
		w->GetGUIEngine()->SetHovered(nullptr);
	}
	delete w;
}

} //namespace GUI 
} //namespace MoonGlare 
