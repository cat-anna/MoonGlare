/*
  * Generated by cppsrc.sh
  * On 2016-09-18 19:00:53,20
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/
#include <pch.h>
#include <MoonGlare.h>
#include "../nfGUI.h"

#include <Core/Component/ComponentManager.h>
#include <Core/Component/ComponentRegister.h>
#include "RectTransformComponent.h"
#include "PanelComponent.h"

#include <Renderer/RenderInput.h>

#include <Math.x2c.h>
#include <ComponentCommon.x2c.h>
#include <RectTransformComponent.x2c.h>
#include <PanelComponent.x2c.h>

namespace MoonGlare {
namespace GUI {
namespace Component {

//---------------------------------------------------------------------------------------

struct PanelShader : public ::Graphic::Shader {
	void SetPanelSize(const Point &Size) {
		glUniform1f(Location("gPanelAspect"), Size[0] / Size[1]);
		glUniform2fv(Location("gPanelSize"), 1, &Size[0]);
	}
	void SetBorder(float Border) {
		glUniform1f(Location("Border"), Border);
	}	
	void SetColor(const math::vec4 &color) {
		glUniform4fv(Location("PanelColor"), 1, &color[0]);
	}
	void SetTileMode(const glm::ivec2 &mode) {
		glUniform2iv(Location("gTileMode"), 1, &mode[0]);
	}
};

//---------------------------------------------------------------------------------------

::Space::RTTI::TypeInfoInitializer<PanelComponent, PanelComponentEntry> PanelComponentTypeInfo;
RegisterComponentID<PanelComponent> PanelComponentIDReg("Panel", true, &PanelComponent::RegisterScriptApi);

//---------------------------------------------------------------------------------------

PanelComponent::PanelComponent(ComponentManager *Owner) 
		: TemplateStandardComponent(Owner)
{
	m_RectTransform = nullptr;
}

PanelComponent::~PanelComponent() {
}

//---------------------------------------------------------------------------------------

void PanelComponent::RegisterScriptApi(ApiInitializer & root) {
}

//---------------------------------------------------------------------------------------

bool PanelComponent::Initialize() {
	//memset(&m_Array, 0, m_Array.Capacity() * sizeof(m_Array[0]));
//	m_Array.fill(PanelComponentEntry());
	m_Array.ClearAllocation();

	m_RectTransform = GetManager()->GetComponent<RectTransformComponent>();
	if (!m_RectTransform) {
		AddLog(Error, "Failed to get RectTransformComponent instance!");
		return false;
	}

	return true;
}

bool PanelComponent::Finalize() {
	return true;
}

//---------------------------------------------------------------------------------------

void PanelComponent::Step(const Core::MoveConfig & conf) {
	auto *EntityManager = GetManager()->GetWorld()->GetEntityManager();

	conf.CustomDraw.push_back(this);

	size_t LastInvalidEntry = 0;
	size_t InvalidEntryCount = 0;

	for (size_t i = 0; i < m_Array.Allocated(); ++i) {//ignore root entry
		auto &item = m_Array[i];

		if (!item.m_Flags.m_Map.m_Valid) {
			//mark and continue
			LastInvalidEntry = i;
			++InvalidEntryCount;
			continue;
		}

		auto *rtentry = m_RectTransform->GetEntry(item.m_OwnerEntity);
		if (!rtentry) {
			LastInvalidEntry = i;
			++InvalidEntryCount;
			continue;
		}

		if (item.m_TransformRevision == rtentry->m_Revision && !item.m_Flags.m_Map.m_Dirty)
			continue;

		item.m_Flags.m_Map.m_Dirty = false;
		item.m_TransformRevision = rtentry->m_Revision;

		auto size = rtentry->m_ScreenRect.GetSize();

		Graphic::VertexVector Vertexes{
			Graphic::vec3(0, size[1], 0),
			Graphic::vec3(size[0], size[1], 0),
			Graphic::vec3(size[0], 0, 0),
			Graphic::vec3(0, 0, 0),
		};
		Graphic::NormalVector Normals;
		float w1 = 0.0f;
		float h1 = 0.0f;
		float w2 = w1 + 1.0f;
		float h2 = h1 + 1.0f;
		Graphic::TexCoordVector TexUV{
			Graphic::vec2(w1, h1),
			Graphic::vec2(w2, h1),
			Graphic::vec2(w2, h2),
			Graphic::vec2(w1, h2),
		};

		Graphic::IndexVector Index{ 0, 1, 2, 3 };
		item.m_VAO.DelayInit(Vertexes, TexUV, Normals, Index);

		//item.Update(conf.TimeDelta, *rtentry);
		//
		//if (!item.m_Animation || !item.m_Flags.m_Map.m_Visible)
		//	continue;
		//
		//conf.m_RenderInput->m_D2AnimRenderList.emplace_back();
		//auto &render = conf.m_RenderInput->m_D2AnimRenderList.back();
		//
		//render.m_Matrix = item.m_ImageMatrix;
		//render.m_Animation = item.m_Animation;
		//render.m_Frame = static_cast<unsigned>(item.m_Position);
	}

	if (InvalidEntryCount > 0) {
		AddLogf(Performance, "TransformComponent:%p InvalidEntryCount:%lu LastInvalidEntry:%lu", this, InvalidEntryCount, LastInvalidEntry);
		TrivialReleaseElement(LastInvalidEntry);
	}
}

//---------------------------------------------------------------------------------------

bool PanelComponent::Load(xml_node node, Entity Owner, Handle & hout) {
	size_t index;
	if (!m_Array.Allocate(index)) {
		AddLogf(Error, "Failed to allocate index!");
		return false;
	}
	auto &entry = m_Array[index];
	entry.Reset();
	if (!GetHandleTable()->Allocate(this, Owner, entry.m_SelfHandle, index)) {
		AddLog(Error, "Failed to allocate handle");
		//no need to deallocate entry. It will be handled by internal garbage collecting mechanism
		return false;
	}
	hout = entry.m_SelfHandle;
	entry.m_OwnerEntity = Owner;

	x2c::Component::PanelComponent::PanelEntry_t pe;
	pe.ResetToDefault();
	if (!pe.Read(node)) {
		AddLog(Error, "Failed to read ImageEntry!");
		return false;
	}

	auto *rtentry = m_RectTransform->GetEntry(entry.m_OwnerEntity);
	if (rtentry) {
	} else {
		//TODO:??
	}

	if (!GetFileSystem()->OpenTexture(entry.m_Texture, pe.m_TextureURI)) {
		AddLog(Error, "Unable to load texture file for panel!");
		return false;
	}
	
	entry.m_Border = pe.m_Border;
	entry.m_Color = pe.m_Color;
	entry.m_TileMode = pe.m_TileMode;

	entry.m_Flags.m_Map.m_Valid = true;
	entry.m_Flags.m_Map.m_Dirty = true;
	m_EntityMapper.SetComponentMapping(entry);
	return true;
}

//---------------------------------------------------------------------------------------

void PanelComponent::D2Draw(Graphic::cRenderDevice & dev) {
	auto cs = dev.CurrentShader();

	if (!m_Shader) {
		if (!Graphic::GetShaderMgr()->GetSpecialShader("GUI.Panel", m_Shader)) {
			AddLogf(Error, "Failed to load GUI.Panel shader");
			return;
		}
	}

	dev.Bind(m_Shader);
	dev.SetModelMatrix(math::mat4());
	dev.BindNullMaterial();
	glPushAttrib(GL_ALL_ATTRIB_BITS);
	glEnable(GL_BLEND);
	glDisable(GL_CULL_FACE);
	glDisable(GL_DEPTH_TEST);

	for (size_t i = 0; i < m_Array.Allocated(); ++i) {//ignore root entry
		auto &item = m_Array[i];
		if (!item.m_Flags.m_Map.m_Valid) {
			continue;
		}

		dev.CurrentShader()->SetBackColor(math::vec3(1, 0, 0));

		const auto *rtentry = m_RectTransform->GetEntry(item.m_OwnerEntity);
		if (!rtentry) {
			continue;
		}

		auto &r = rtentry->m_ScreenRect;
		dev.SetModelMatrix(rtentry->m_GlobalMatrix);

		m_Shader->SetPanelSize(r.GetSize());
		m_Shader->SetBorder(item.m_Border);
		m_Shader->SetColor(item.m_Color);
		m_Shader->SetTileMode(item.m_TileMode);

		item.m_Texture->Bind();
		auto &vao = item.m_VAO;
		vao.Bind();
		vao.DrawElements(4, 0, 0, GL_QUADS);
		vao.UnBind();
	}

	dev.Bind(cs);

	glPopAttrib();
}

} //namespace Component 
} //namespace GUI 
} //namespace MoonGlare 
