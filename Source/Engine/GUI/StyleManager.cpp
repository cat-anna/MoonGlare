/*
  * Generated by cppsrc.sh
  * On 2015-03-06 21:03:51,14
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/
#include <pch.h>
#include "GUI.h"
#include <MoonGlare.h>

namespace MoonGlare {
namespace GUI {

GABI_IMPLEMENT_STATIC_CLASS(StyleManager);

StyleManager::StyleManager(GUIEngine *Owner) :
		BaseClass(),
		m_Owner(Owner) {
}

StyleManager::~StyleManager() {
}

SharedStyleSet StyleManager::GetStyle(const string& Name) {
	auto it = m_Styles.find(Name);
	if (it != m_Styles.end()) 
		return it->second.Style;

	auto sss = LoadStyle(Name);
	if (sss)
		return sss;

	AddLogf(Warning, "Unable to find style '%s'. Trying to return default style.", Name.c_str());

	it = m_Styles.find("Default");
	if (it != m_Styles.end()) {
		return it->second.Style;
	}

	sss = LoadStyle("Default");
	if (!sss) {
		AddLog(Error, "Unable to find requested style nor default style!");
		return SharedStyleSet();
	}
	return sss;
}

//----------------------------------------------------------------------------------

SharedStyleSet StyleManager::LoadStyle(const string& Name) {
	char filename[64];
	sprintf(filename, "Style.%s.xml", Name.c_str());

	XMLFile file;

	if (!GetFileSystem()->OpenXML(file, filename, DataPath::XML)) {
		AddLog(Error, "Unable to load gui style!");
		return false;
	}

	xml_node root = file->document_element();
	if (!root) {
		AddLog(Error, "Error in gui style xml document");
		return false;
	}

	SharedStyleSet ss = std::make_shared<StyleSet>(this);
	if (!ss->LoadMeta(root)) {
		AddLog(Error, "Unable to load gui style. Ignored.");
		return nullptr;
	}
	auto &style = m_Styles[ss->GetName()];
	style.Style = ss;
	style.Data.swap(file);

	return ss;
}

} //namespace GUI 
} //namespace MoonGlare 
