/*
  * Generated by cppsrc.sh
  * On 2015-03-01 11:03:08,06
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/
#include <pch.h>
#include "GUI.h"

namespace MoonGlare {
namespace GUI {

WidgetContainer::WidgetContainer() {
}

WidgetContainer::~WidgetContainer() {
}

//----------------------------------------------------------------------------------
void WidgetContainer::Add(Widget &w) {
	m_List.emplace_back(std::move(w));
}

void WidgetContainer::Add(iWidget *ptr) {
	m_List.emplace_back(ptr);
}

void WidgetContainer::Remove(iWidget *ptr) {
	m_List.remove_if([ptr](Widget& w) {
		return ptr == w.get();
	});
}

void WidgetContainer::Clean() {
	if (m_List.empty())
		return;
	m_List.remove_if([](Widget& w) {
		return !w->IsMetaObject();
	});
}

//----------------------------------------------------------------------------------

void WidgetContainer::CreateChildren(Utils::Scripts::TableDispatcher &table, iWidget *parent) {
	int idx = 0;
	Clean();
	while (true) {
		if (!table.IsTable(idx)) 
			break;
		try {
			Utils::Scripts::TableDispatcher td = table.GetTable(idx);
			string Class = td.getString("Class", "?");
			auto w = WidgetClassRegister::CreateClass(Class, parent);
			if (!w) {
				AddLogf(Error, "Unable to create widget class '%s'", Class.c_str());
				continue;
			}
			w->ScriptSet(td);
			Widget wp(w);
			Add(wp);
		}
		catch (...) {
			AddLog(Error, "Not a table! " << idx);
			break;
		}
		++idx;
	}
}

} //namespace GUI 
} //namespace MoonGlare 
