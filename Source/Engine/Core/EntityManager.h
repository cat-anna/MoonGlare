/*
  * Generated by cppsrc.sh
  * On 2015-08-04 16:59:00,99
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/

#pragma once
#ifndef EntityManager_H
#define EntityManager_H

namespace MoonGlare {
namespace Core {

struct Entity final : public Space::Memory::DoubleHandle32<16, 16> {
	bool IsValid() const;
	operator bool() const { return IsValid(); }
	bool operator!() const { return !IsValid(); }
	bool operator ==(const Entity &other) const { return m_IntegerValue == other.m_IntegerValue; }
};

class EntityManager final {
public:
	static bool Initialize();
	static bool Finalize();

	static Entity Allocate();
	static void Release(Entity e);
protected:
private: 
	//std::mutex m_Lock;
	EntityManager();
	~EntityManager();
};

} //namespace Core 
} //namespace MoonGlare 

#endif
