/*
	Generated by cppsrc.sh
	On 2014-12-25 23:39:59,76
	by Paweu
*/

#pragma once
#ifndef Input_H
#define Input_H

namespace Core {

struct MouseEventDispatcher {
	using MouseButton = ::Graphic::WindowInput::MouseButton;
	using ModsStatus = ::Graphic::WindowInput::ModsStatus;

	virtual ~MouseEventDispatcher() { Revoke(); }
	virtual void MouseUpEvent(MouseButton Button, ModsStatus Modificators) { };
	virtual void MouseDownEvent(MouseButton Button, ModsStatus Modificators) { };

	void Set();
	void Revoke();
};

class Input : public cRootClass {
	SPACERTTI_DECLARE_CLASS_SINGLETON(Input, cRootClass)
public:
 	Input();
 	virtual ~Input();
	bool Initialize();
	bool Finalize();

	void Clear() { ClearMouseDelta(); }

	static void MouseDownEvent(MouseEventDispatcher::MouseButton Button, MouseEventDispatcher::ModsStatus Modificators) {
		if (!_MouseDispatcher)
			return;
		_MouseDispatcher->MouseDownEvent(Button, Modificators);
	}
	static void MouseUpEvent(MouseEventDispatcher::MouseButton Button, MouseEventDispatcher::ModsStatus Modificators) {
		if (!_MouseDispatcher)
			return;
		_MouseDispatcher->MouseUpEvent(Button, Modificators);
	}

	static void SetMouseDispatcher(MouseEventDispatcher *dispatcher) {
		_MouseDispatcher = dispatcher;
		AddLog(Debug, "Changed mouse dispatcher");
	}
	static void RevokeMouseDispatcher(MouseEventDispatcher *dispatcher) {
		if (_MouseDispatcher != dispatcher)
			return;
		_MouseDispatcher = nullptr;
		AddLog(Debug, "Revoked mouse dispatcher");
	}

	void SetMouseDelta(const math::vec2 &MouseDelta) { m_MouseDelta = MouseDelta; }
	void ClearMouseDelta() { m_MouseDelta = math::vec2(0, 0); }

	DefineREADAcces(MouseDelta, math::vec2);
private:
	math::fvec2 m_MouseDelta;

	static MouseEventDispatcher *_MouseDispatcher;
};

} //namespace Core 

namespace MoonGlare {
namespace Core {
	inline ::Core::Input* GetInput() { return ::Core::Input::Instance(); }
} //namespace Core 
} //namespace MoonGlare 

#endif
