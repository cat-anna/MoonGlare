/*
	Generated by cppsrc.sh
	On 2015-01-11  8:06:46,03
	by Paweu
*/
#include <pch.h>
#include <MoonGlare.h>
#include "StaticObject.h"

namespace Core {
namespace Objects {
	
GABI_IMPLEMENT_STATIC_CLASS(StaticObject);
IMPLEMENT_SCRIPT_EVENT_VECTOR(StaticObjectScriptEvents);
RegisterApiDerivedClass(StaticObject, &StaticObject::RegisterScriptApi);

StaticObject::StaticObject(::Core::GameScene *Scene):
		BaseClass(Scene) {
	SetScriptHandlers(new ScriptEventClass());
	SetMass(0);
	SetOwnerScene(Scene);
	m_CollisionMask.Set(Physics::BodyClass::StaticObject);
}

StaticObject::~StaticObject(){
	m_Body.reset();
}

//---------------------------------------------------------------------------------------

void StaticObject::RegisterScriptApi(ApiInitializer &api) {
	api
	.deriveClass<StaticObject, Object>("StaticObject")
		//.addFunction("InvokeOnCollision", &cObject::InvokeOnCollision)
		//.addFunction("InvokeOnHit", &cObject::InvokeOnHit)
		//.addFunction("InvokeOnAnimationEnds", &cObject::InvokeOnAnimationEnds)
		//.addFunction("InvokeOnCreate", &cObject::InvokeOnCreate)

		//.addFunction("DoHit", &cObject::DoHit)
		//.Member("Size", &cObject::FSize)
		//.addFunction("Stats", &cObject::GetStats)
	.endClass();
}

//---------------------------------------------------------------------------------------

int StaticObject::InvokeOnDropDead(){
	AddLog(Warning, "Static object cannot die! " << this);
	return 0;
}

int StaticObject::InvokeOnTimer(int TimerID) { SCRIPT_INVOKE(OnTimer, TimerID); }
int StaticObject::InvokeOnUserEventA(int param) { SCRIPT_INVOKE(OnUserEventA, param); }
int StaticObject::InvokeOnUserEventB(int param) { SCRIPT_INVOKE(OnUserEventB, param); }
int StaticObject::InvokeOnUserEventC(int param) { SCRIPT_INVOKE(OnUserEventC, param); }
int StaticObject::InvokeOnUserEventD(int param) { SCRIPT_INVOKE(OnUserEventD, param); }

//---------------------------------------------------------------------------------------

bool StaticObject::Initialize() {
	BaseClass::Initialize();
	return true;
}

bool StaticObject::Finalize() {
	BaseClass::Finalize();
	return true;
}

//---------------------------------------------------------------------------------------

void StaticObject::DoMove(const MoveConfig& conf) {
}

void StaticObject::PreRender(const PreRenderConfig& conf) {
	BaseClass::PreRender(conf);
}

void StaticObject::DropDead(){
	AddLog(Warning, "Static object cannot die! " << this);
}

//---------------------------------------------------------------------------------------

bool StaticObject::LoadPattern(const xml_node node) {
	BaseClass::LoadPattern(node);
#if 0

	xml_node Model = node.child("Model");
	if (Model) {
		const char *name = Model.attribute(xmlAttr_Name).as_string();
		if (!name)
			AddLogf(Error, "Predef object '%s' has defined model without name!", GetName().c_str());
		else {
			m_ModelInstance = m_Scene->GetInstanceManager().CreateInstance(name);
		}
	}

	m_ModelState.Scale = node.child("Scale").attribute("Value").as_float(1);
	m_ModelState.Mass = node.child("Mass").attribute("Value").as_float(1);

	xml_node mc = node.child("MoveController");
	if (mc) {
		if (m_MoveController)
			delete m_MoveController;
		m_MoveController = iMoveController::CreateFromXML(mc, this);
	}

	//m_ScriptHandlers->LoadFromXML(Node);
	//m_Stats.LoadFromXML(Node);
#endif // 0
	return true;
}

bool StaticObject::LoadDynamicState(const xml_node node) {
#if 0
	math::vec3 pos, rot;
	XML::ReadVector(node, "Position", pos, math::vec3(0));
	XML::ReadVector(node, "Rotation", rot, math::vec3(0));
	m_ModelState.SetLocation(pos, rot);
#endif // 0
	return true;
}

//---------------------------------------------------------------------------------------

} //namespace Objects 
} //namespace Core 
