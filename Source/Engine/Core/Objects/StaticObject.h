/*
	Generated by cppsrc.sh
	On 2015-01-11  8:06:46,03
	by Paweu
*/

#pragma once
#ifndef StaticObject_H
#define StaticObject_H

namespace Core {
namespace Objects {

DECLARE_SCRIPT_EVENT_VECTOR(StaticObjectScriptEvents, ObjectScriptEvents,
	SCRIPT_EVENT_ADD(),
	SCRIPT_EVENT_REMOVE((OnDropDead)));

class StaticObject : public Object {
	GABI_DECLARE_STATIC_CLASS(StaticObject, Object);
	DECLARE_SCRIPT_HANDLERS(StaticObjectScriptEvents);
	DECLARE_EXCACT_SCRIPT_CLASS_GETTER();
	DISABLE_COPY();
public:
	StaticObject(::Core::GameScene *Scene);
	virtual ~StaticObject();

	virtual bool Initialize() override;
	virtual bool Finalize() override;

	virtual void DoMove(const MoveConfig& conf) override;
	virtual void PreRender(const PreRenderConfig& conf) override;
	virtual void DropDead() override;

	virtual bool LoadPattern(const xml_node node) override;
	virtual bool LoadDynamicState(const xml_node node) override;

	void SetModelInstance(Scene::ModelInstancePtr &&inst) {
		m_ModelInstance.release();
		m_ModelInstance.swap(inst);
	}

//Script invokers
	virtual int InvokeOnDropDead() override;
	virtual int InvokeOnTimer(int TimerID) override;
	virtual int InvokeOnUserEventA(int param) override;
	virtual int InvokeOnUserEventB(int param) override;
	virtual int InvokeOnUserEventC(int param) override;
	virtual int InvokeOnUserEventD(int param) override;

	static void RegisterScriptApi(ApiInitializer &api);
protected:
};

} //namespace Objects 
} //namespace Core 

#endif
