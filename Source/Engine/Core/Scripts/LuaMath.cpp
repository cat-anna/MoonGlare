/*
  * Generated by cppsrc.sh
  * On 2015-07-09 17:53:39,50
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/

#include <pch.h>
#include <MoonGlare.h>
#include <cmath>
#include "Math.h"

namespace MoonGlare {
namespace Core {
namespace Scripts {

template<class T>
T VecNormalize(T *vec) { return glm::normalize(*vec); }

void ScriptMathClasses(ApiInitializer &root){
	root
	.beginClass<math::vec4>("cVec4")
		.addConstructor<void(*)(float, float, float, float)>()
		.addData("x", &math::vec4::x)
		.addData("y", &math::vec4::y)
		.addData("z", &math::vec4::z)
		.addData("w", &math::vec4::w)
		.addFunction("length", &math::vec4::length)
		.addFunction("normalize", Utils::Template::InstancedStaticCall<math::vec4, math::vec4>::callee<VecNormalize>())
	.endClass()
	.beginClass<math::vec3>("cVec3")
		.addConstructor<void(*)(float, float, float)>()
		.addData("x", &math::vec3::x)
		.addData("y", &math::vec3::y)
		.addData("z", &math::vec3::z)
		.addFunction("length", &math::vec3::length)
		.addFunction("normalize", Utils::Template::InstancedStaticCall<math::vec3, math::vec3>::callee<VecNormalize>())
	.endClass()
	.beginClass<math::vec2>("cVec2")
		.addConstructor<void(*)(float, float)>()
		.addData("x", &math::vec2::x)
		.addData("y", &math::vec2::y)
		.addFunction("length", &math::vec2::length)
		.addFunction("normalize", Utils::Template::InstancedStaticCall<math::vec2, math::vec2>::callee<VecNormalize>())
		.endClass()
	;
}
RegisterApiNonClass(ScriptMathClasses, &ScriptMathClasses, "math");

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

void ScriptMathGlobal(ApiInitializer &root) {
	struct T {
		static int Vec4(lua_State *lua) {
			throw __FUNCTION__;
			return 0;
		}
		static int Vec3(lua_State *lua) {
			throw __FUNCTION__;
			return 0;
		}
		static int Vec2(lua_State *lua) {
			throw __FUNCTION__;
			return 0;
		}
	};

	root
		.addCFunction("Vec4", &T::Vec4)
		.addCFunction("Vec3", &T::Vec3)
		.addCFunction("Vec2", &T::Vec2)
	;
}
RegisterApiNonClass(ScriptMathGlobal, &ScriptMathGlobal, nullptr);

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

int randomi(int rmin, int rmax) {
	int d = rmax - rmin + 1;
	int r = (rand() % d) + rmin;
	// AddLog("random: " << rmin << "   " << r << "    " << rmax);
	return r;
}

int RandRange(int rmin, int rmax) {
	int d = rmax - rmin + 1;
	int r = (rand() % d) + rmin;
	// AddLog("random: " << rmin << "   " << r << "    " << rmax);
	return r;
}

float randomf(float rmin, float rmax) {
	float d = rmax - rmin;
	float r = (rand() % static_cast<int>(d)) + rmin;
	// AddLog("random: " << rmin << "   " << r << "    " << rmax);
	return r;
}


std::random_device _RandomDevice;
std::mt19937 _PseudoRandom(_RandomDevice());
void RandomNamespace(ApiInitializer &root) {
	struct T {
		static void Seed(int seed) {
			_PseudoRandom = std::mt19937(seed);
		}		
		static void Randomize() {
			_PseudoRandom = std::mt19937(_RandomDevice());
		}

		static int UniformRange(int min, int max) {
			std::uniform_int_distribution<int> generator(min, max);
			return generator(_PseudoRandom);
		}
		//static int NormalRange(int min, int max) {
			//std::normal_distribution<int> generator(min, max);
			//return generator(_PseudoRandom);
		//}

		static lua_Number UniformFloat() {
			std::uniform_real_distribution<lua_Number> generator;
			return generator(_PseudoRandom);
		}
		static lua_Number NormalFloat() {
			std::normal_distribution<lua_Number> generator(0, 1);
			return generator(_PseudoRandom);
		}

		static bool Boolean() {
			std::bernoulli_distribution dist;
			return dist(_PseudoRandom);
		}
	};
	root
	.addFunction("random", &randomi)
	.addFunction("RandRange", &randomi)

	.addFunction("Seed", &T::Seed)
	.addFunction("Randomize", &T::Randomize)

	.addFunction("UniformRange", &T::UniformRange)
	//.addFunction("NormalRange", &T::NormalRange)

	.addFunction("UniformFloat", &T::UniformFloat)
	.addFunction("NormalFloat", &T::NormalFloat)

	.addFunction("Boolean", &T::Boolean)


	//.addFunction("randomf", &randomf)
	//.addFunction("vec4", &T::MakeVec4)
	//.addFunction("vec2", &T::MakeVec2)
	//.beginClass<math::vec3>("vec3")
	//	.addConstructor<void(*)(float, float, float)>()
	//	.addData("x", &math::vec3::x)
	//	.addData("y", &math::vec3::y)
	//	.addData("z", &math::vec3::z)
	//	.addFunction("length", &math::vec3::length)
	//.endClass()
	;
}
RegisterApiNonClass(RandomNamespace, &RandomNamespace, "random");

} //namespace Scripts 
} //namespace Core 
} //namespace MoonGlare 
