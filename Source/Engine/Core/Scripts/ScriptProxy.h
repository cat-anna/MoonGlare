/*
  * Generated by cppsrc.sh
  * On 2015-03-24 17:52:31,03
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/

#pragma once
#ifndef ScriptProxy_H
#define ScriptProxy_H

namespace Core {
namespace Scripts {

class ScriptProxy : public cRootClass, public std::enable_shared_from_this<ScriptProxy> {
	SPACERTTI_DECLARE_STATIC_CLASS(ScriptProxy, cRootClass);
public:
 	ScriptProxy();
 	~ScriptProxy();

	static bool RequestInstance() {
		return EnsureScriptInstance();
	}

	template<class RET, class ... Types>
	static RET RunFunction(const char *FuncName, Types ... args) {
		if (!EnsureScriptInstance())
			return 0;
		//AddLog(Hint, "Script function call is not yet implemented! (" << FuncName << ")");
		return _Instance->m_Script->RunFunction<RET>(FuncName, std::forward<Types>(args)...);
	}

	static int ExecuteCode(const string& code, const char *CodeName = nullptr) {
		if (!EnsureScriptInstance())
			return 0;
		return _Instance->m_Script->LoadCode(code.c_str(), code.length(), CodeName);
	}

	static int ExecuteCode(const char *code, unsigned len, const char *CodeName = nullptr) {
		if (!EnsureScriptInstance())
			return 0;
		return _Instance->m_Script->LoadCode(code, len, CodeName);
	}

	void DropScript() {
		m_Script.reset();
		AddLogf(Debug, "Thread is dropping script ownership!");
	}

	static ScriptProxy* CurrentInstance() { return _Instance; }
protected:
	static bool EnsureScriptInstance() {
		if (!_Instance) {
			AddLog(Error, "Thread does not have initialized script proxy. Scripts cannot be executed");
			return false;
		}
		if (!_Instance->m_Script && !_Instance->RunTimeInitialze()) {
			AddLog(Warning, "An error has occur during script proxy runtime initialization");
			return false;
		}
		return true;
	}

	bool RunTimeInitialze();

	SharedScript m_Script;
	thread_local static ScriptProxy *_Instance;
};

#if !defined(_USE_API_GENERATOR_) && !defined(_DISABLE_SCRIPT_ENGINE_) && defined(_BUILDING_ENGINE_)

#define EnableScriptsInThisThread()\
	auto __ScriptProxy = std::make_shared<::Core::Scripts::ScriptProxy>();

#else

#define EnableScriptsInThisThread(...) do { /*  NOP */ } while(false)

#endif

} //namespace Scripts 
} //namespace Core 

#endif
