/*
	Generated by cppsrc.sh
	On 2015-01-20  9:04:58,62
	by Paweu
*/
#pragma once
#ifndef Events_H
#define Events_H

#include "Configuration.Core.h"

namespace MoonGlare::Core {

using EventClassID = uint32_t;

class BaseEventInfo {
	using Conf = Configuration::Core::Events;
public:
	static EventClassID GetEventClassesCount() { return s_IdAlloc; }
	static const Space::RTTI::TypeInfo* GetEventTypeInfo(EventClassID id) { return s_EventClassesTypeInfo[id]; }

	static void DumpClasses(std::ofstream &output);
protected:
	template<class T>
	static EventClassID AllocateEventClass() {
		auto id = AllocateID();
		ASSERT(id < Conf::MaxEventTypes);
		s_EventClassesTypeInfo[id] = Space::RTTI::GetStaticTypeInfo<T>();
		return id;
	}
private:
	static EventClassID AllocateID() { return s_IdAlloc++; }
	static EventClassID s_IdAlloc;
	using EventClassesTypeTable = std::array<const Space::RTTI::TypeInfo*, Conf::MaxEventTypes>;
	static EventClassesTypeTable s_EventClassesTypeInfo;
};

template<class T>
struct EventInfo : public BaseEventInfo {
	static EventClassID GetClassID() { return s_ClassID; }
	static_assert(std::is_pod<T>::value, "Event must be pod type!");
private:
	static EventClassID s_ClassID;
};

template<typename T>
EventClassID EventInfo<T>::s_ClassID = BaseEventInfo::AllocateEventClass<T>();

} //namespace MoonGlare::Core 

#endif
