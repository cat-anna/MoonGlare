/*
  * Generated by cppsrc.sh
  * On 2015-08-20 17:27:44,24
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/

#pragma once
#ifndef ComponentOwner_H
#define ComponentOwner_H

namespace MoonGlare {
namespace Core {
namespace Component {

#pragma pack(push, 1)

struct ComponentRank final {
	union {
		struct {
			uint16_t m_Group;
			uint16_t m_Rank;
		};
		uint32_t m_RawValue;
	};

	bool operator < (const ComponentRank& other) const { return m_RawValue < other.m_RawValue; }
};

#pragma pack (pop)

enum class ComponentCommand {
	NOP,
};

struct ComponentFlags final {
	Utils::FlagSet m_Flags;
};

using GarbageCollectConfig = int;

struct Actions {
	using Process = void(*)(const MoveConfig &config);
	using Command = void(*)(ComponentCommand command, int parameter);
	using GarbageCollectStep = void(*)();
	using GarbageCollectFull = void(*)(const GarbageCollectConfig& config);
};

struct ComponentActions final {
	Actions::Process m_Process;
	Actions::Command m_Command;
	Actions::GarbageCollectStep m_GarbageCollectStep;
	Actions::GarbageCollectFull m_GarbageCollectFull;
};

struct ComponentInfo {
	ComponentActions m_Actions;
	ComponentRank m_Rank;
	ComponentFlags m_Flags;
};

class ComponentManager final {
public:
	static bool Initialize();
	static bool Finalize();

	static bool RegisterComponent(ComponentInfo& info);
	static bool DeregisterComponent(const ComponentInfo& info);
	static void Process(const MoveConfig &config);

	//void GarbageCollectStep(const CollectConfig &config);
private:
	ComponentManager();
	~ComponentManager();
};

} //namespace Component 
} //namespace Core 
} //namespace MoonGlare 

#endif
