/*
  * Generated by cppsrc.sh
  * On 2015-08-19 22:57:41,79
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/

#pragma once
#ifndef AbstractComponent_H
#define AbstractComponent_H

namespace MoonGlare {
namespace Core {
namespace Component {

enum class ComponentRank : unsigned __int32 {
	Unknown,		//forbidden to use
};

struct ComponentFlags {
	enum {
		DynamicProcessing		= 0x0001,
	};
};

using ProcessConfig = int;

class ComponentOwner;

class AbstractComponent : public GabiLib::GabiObject {
	GABI_DECLARE_STATIC_CLASS(AbstractComponent, GabiLib::GabiObject);
public:
 	AbstractComponent(ComponentOwner *Owner, ComponentRank Rank);
 	virtual ~AbstractComponent();

	virtual void Process(const ProcessConfig &conf) = 0;

	DefineDirectGetter(Rank, ComponentRank);
	DefineDirectGetter(Owner, ComponentOwner*);
	DefineFlagGetter(m_Flags, ComponentFlags::DynamicProcessing, DynamicProcessing);
protected:
	Utils::FlagSet m_Flags;
	DefineFlagSetter(m_Flags, ComponentFlags::DynamicProcessing, DynamicProcessing);
private:
	ComponentOwner *m_Owner;
	ComponentRank m_Rank;
};

} //namespace Component 
} //namespace Core 
} //namespace MoonGlare 

#endif
