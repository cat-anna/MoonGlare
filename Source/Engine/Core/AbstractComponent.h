/*
  * Generated by cppsrc.sh
  * On 2015-08-19 22:57:41,79
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/

#pragma once
#ifndef AbstractComponent_H
#define AbstractComponent_H

namespace MoonGlare {
namespace Core {
namespace Component {
#if 0
enum class ComponentRank : unsigned __int32 {
	Unknown,		//forbidden to use
};

struct ComponentFlags {
	enum {
		ProcessingEnabled,

		MaxValue,
	};
};

class ComponentOwner;

class AbstractComponent : public GabiLib::GabiObject {
	GABI_DECLARE_STATIC_CLASS(AbstractComponent, GabiLib::GabiObject);
public:
 	AbstractComponent(ComponentOwner *Owner, ComponentRank Rank);
 	virtual ~AbstractComponent();

	virtual void Process(const ProcessConfig &config) = 0;
	virtual void CollectGarbage(const CollectConfig &config) = 0;

	DefineDirectGetter(Rank, ComponentRank);
	DefineDirectGetter(Owner, ComponentOwner*);
	DefineFlagGetter(m_Flags, FlagBit(ComponentFlags::ProcessingEnabled), ProcessingEnabled);
protected:
	Utils::FlagSet m_Flags;
	void EnableProcessing();
	void DisableProcessing();
private:
	ComponentOwner *m_Owner;
	ComponentRank m_Rank;

	DefineFlagSetter(m_Flags, FlagBit(ComponentFlags::ProcessingEnabled), ProcessingEnabled);
};

#endif

} //namespace Component 
} //namespace Core 
} //namespace MoonGlare 

#endif
