/*
  * Generated by cppsrc.sh
  * On 2016-07-23 16:55:00,64
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/

#pragma once
#ifndef ScriptComponent_H
#define ScriptComponent_H

namespace MoonGlare {
namespace Core {
namespace Component {

class ScriptComponent
	: public AbstractComponent {
public:
 	ScriptComponent(ComponentManager *Owner);
 	virtual ~ScriptComponent();

	constexpr static ComponentID GetComponentID() { return 1; };

	template<class T> using Array = std::array<T, Configuration::Storage::ComponentBuffer>;

	using LuaHandle = int;

	union FunctionMap {
		struct MapBits_t {
			bool m_Step : 1;

			//bool m_OnCreate : 1;
			//bool m_OnStart : 1;
			//bool m_OnStop : 1;
		};
		MapBits_t m_Map;
		uint32_t m_UintValue;

		void SetAll() { m_UintValue = 0; m_UintValue = ~m_UintValue; }

		static_assert(sizeof(MapBits_t) <= sizeof(decltype(m_UintValue)), "Invalid Function map elements size!");
	};

	struct ScriptEntry {
		FunctionMap m_Functions;
		Entity m_Owner;	
	};
	static_assert((sizeof(ScriptEntry) % 8) == 0, "Invalid ScriptEntry size!");
	static_assert(std::is_pod<ScriptEntry>::value, "ScriptEntry must be pod!");

	virtual bool Initialize() override;
	virtual bool Finalize() override;

	virtual void Step(const MoveConfig &conf) override;
	virtual Handle Load(xml_node node, Entity Owner) override;
protected:
	template<class ... ARGS>
	using GenerationsAllocator_t = Space::Memory::StaticMultiAllocator<Configuration::Storage::ComponentBuffer, ARGS...>;
	using Generations_t = Space::Memory::GenerationLinearBuffer<GenerationsAllocator_t, Handle>;

	::Core::cScriptEngine *m_ScriptEngine;
	Array<ScriptEntry> m_Array;
	Generations_t m_Generations;
};

} //namespace Component 
} //namespace Core 
} //namespace MoonGlare 

#endif
