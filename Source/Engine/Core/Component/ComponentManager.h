/*
  * Generated by cppsrc.sh
  * On 2015-08-20 17:27:44,24
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/

#pragma once
#ifndef ComponentManager_H
#define ComponentManager_H

namespace MoonGlare {
namespace Core {
namespace Component {

class ComponentManager final {
public:
	ComponentManager();
	~ComponentManager();

	bool Initialize(ciScene *scene);
	bool Finalize();

	bool LoadComponents(pugi::xml_node node);

	template<class T, class ... ARGS>
	bool InstallComponent(ARGS ... args) {
		return InsertComponent(std::make_unique<T>(this, std::forward<ARGS>(args)...), T::GetComponentID());
	}

	void Step(const MoveConfig &config);

	template<class T> 
	T* GetComponent() {
		return dynamic_cast<T*>(GetComponent(T::GetComponentID()));
	}

	AbstractComponent* GetComponent(ComponentID cid);

	TransformComponent* GetTransformComponent() { return m_TransformComponent; }

	ciScene* GetScene() { return m_Scene; }
	World* GetWorld() { return m_World; }

	struct ComponentInfo {
		float m_TotalStepDuration;
		unsigned m_PeriodCount;
	};
private:
	std::array<UniqueAbstractComponent, Configuration::Storage::MaxComponentCount> m_Components;
	std::array<ComponentID, Configuration::Storage::MaxComponentCount> m_ComponentsIDs;
	TransformComponent *m_TransformComponent;
	size_t m_UsedCount;
	ciScene *m_Scene;
	World *m_World;

#ifdef PERF_PERIODIC_PRINT
	std::array<ComponentInfo, Configuration::Storage::MaxComponentCount> m_ComponentInfo;
#endif

	bool InsertComponent(UniqueAbstractComponent cptr, ComponentID cid);
};

} //namespace Component 
} //namespace Core 
} //namespace MoonGlare 

#endif
