/*
  * Generated by cppsrc.sh
  * On 2016-08-06 22:30:28,74
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/

#pragma once
#ifndef CameraComponent_H
#define CameraComponent_H

#include <libSpace/src/Container/StaticVector.h>

namespace MoonGlare {
namespace Core {
namespace Component {

class CameraComponent 
		: public AbstractComponent {
public:
	CameraComponent(ComponentManager *Owner);
	virtual ~CameraComponent();
	virtual bool Initialize() override;
	virtual bool Finalize() override;
	virtual void Step(const MoveConfig &conf) override;
	virtual bool Load(xml_node node, Entity Owner, Handle &hout) override;
	virtual bool GetInstanceHandle(Entity Owner, Handle &hout) override;

	constexpr static ComponentID GetComponentID() { return 3; };
	constexpr static uint16_t GetHandleType() { return 3; };

	union FlagsMap {
		struct MapBits_t {
			bool m_Valid : 1; //Entity is not valid or requested to be deleted;
			bool m_Active : 1;
		};
		MapBits_t m_Map;
		uint32_t m_UintValue;

		void SetAll() { m_UintValue = 0; m_UintValue = ~m_UintValue; }
		void ClearAll() { m_UintValue = 0; }

		static_assert(sizeof(MapBits_t) <= sizeof(decltype(m_UintValue)), "Invalid Function map elements size!");
	};

	struct CameraEntry { 
		FlagsMap m_Flags;
		Entity m_Owner;
		Handle m_Handle;
		Handle m_TransformHandle;
		uint32_t padding2;
		Graphic::VirtualCamera m_Camera;
	};
	static_assert((sizeof(CameraEntry) % 16) == 0, "Invalid CameraEntry size!");
protected:
	using CameraEntryArray = Space::Container::StaticVector<CameraEntry, Configuration::Storage::CameraComponent>;

	CameraEntryArray m_Array;

	void ReleaseElement(size_t Index);
};

} //namespace Component 
} //namespace Core 
} //namespace MoonGlare 

#endif
