/*
  * Generated by cppsrc.sh
  * On 2015-08-20 17:27:44,24
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/
#include <pch.h>
#include <MoonGlare.h>
#include "AbstractComponent.h"
#include "ComponentManager.h"

#include "ScriptComponent.h"
#include "TransformComponent.h"

namespace MoonGlare {
namespace Core {
namespace Component {

ComponentManager::ComponentManager() 
	: m_UsedCount(0)
	, m_Scene(nullptr) {
}

ComponentManager::~ComponentManager() {
}

bool ComponentManager::Initialize(ciScene *scene) {
	if (!scene) {
		AddLog(Error, "No scene pointer!");
		return false;
	}
	m_Scene = scene;
	m_World = GetEngine()->GetWorld();

	if (!InstallComponent<ScriptComponent>()) {
		AddLog(Error, "Failed to install ScriptComponent");
		return false;
	}

	auto tc = std::make_unique<TransformComponent>(this);
	m_TransformComponent = tc.get();
	if (!InsertComponent(std::move(tc), TransformComponent::GetComponentID())) {
		AddLog(Error, "Failed to install TransformComponent");
		return false;
	}

	for (size_t i = 0; i < m_UsedCount; ++i) {
		if (!m_Components[i]->Initialize()) {
			AddLogf(Error, "Failed to initialize component: %s", typeid(*m_Components[i].get()));
			return false;
		}
	}

	return true;
}

bool ComponentManager::Finalize() {
	for (size_t i = 0; i < m_UsedCount; ++i) {
		if (!m_Components[i]->Finalize()) {
			AddLogf(Error, "Failed to initialize component: %s", typeid(*m_Components[i].get()));
		}
	}
	return true;
}

bool ComponentManager::InsertComponent(UniqueAbstractComponent cptr, ComponentID cid) {
	if (m_UsedCount >= m_Components.size()) {
		AddLogf(Error, "Not enough space to install component: %s", typeid(*cptr.get()).name());
		return false;
	}

	m_Components[m_UsedCount].swap(cptr);
	m_ComponentsIDs[m_UsedCount] = cid;
	++m_UsedCount;

	return true;
}

void ComponentManager::Step(const MoveConfig &config) {
	for (size_t i = 0, j = m_UsedCount; i < j; ++i) {
		m_Components[i]->Step(config);
	}
}

AbstractComponent* ComponentManager::GetComponent(ComponentID cid) {

	//TODO: some smart search
	for (size_t i = 0; i < m_UsedCount; ++i) {
		if (m_ComponentsIDs[i] == cid) {
			return m_Components[i].get();
		}
	}

	AddLogf(Error, "There is no component with id %d", cid);
	return nullptr;
}

#if 0

//----------------------------------------------------------------

namespace Debug {

static struct ComponentArrayInfo_t : Config::Debug::MemoryInterface {
	using Array = ComponentArray::Array;
	virtual Info* GetInfo() const {
		static Info i = { 0, 0, Array::ElementSize, Array::Size, "ComponentArray" };
		i.Update(_Impl->m_ComponentArray.GetAllocatedCount());
		return &i;
	}
} ComponentArrayInf;


//static struct EntityManagerInfo_t : Debug::MemoryInterface {
//	virtual Info* GetInfo() const {
//		static Info i = { 0, sizeof(EntityIndexQueue::Item) + sizeof(EntityGenerationBuffer::Item), EntityIndexQueue::Size, "EntityManager" };
//		i.Allocated = EntityIndexQueue::Size - EMImpl.m_IndexQueue.count();
//		return &i;
//	}
//} EntityManagerInfo;

} //namespace Debug
#endif

} //namespace Component 
} //namespace Core 
} //namespace MoonGlare 
