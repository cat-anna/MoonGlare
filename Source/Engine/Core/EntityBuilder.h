/*
  * Generated by cppsrc.sh
  * On 2016-08-14 22:04:32,35
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/

#pragma once
#ifndef EntityBuilder_H
#define EntityBuilder_H

namespace MoonGlare {
namespace Core {

class EntityBuilder {
public:
    EntityBuilder(Component::SubsystemManager *Manager);
    ~EntityBuilder();

    static bool Build(Component::SubsystemManager *Manager, Entity parent, const char *PatternUri, Entity &eout, std::string Name) {
        EntityBuilder eb(Manager);
        return eb.Build(parent, PatternUri, eout, std::move(Name));
    }

    bool Build(Entity parent, const char *PatternUri, Entity &eout, std::string Name = std::string());
    bool Build(Entity parent, const char *srcName, pugi::xml_node node, std::string Name = std::string());
protected:
    struct ImportData;
    struct ComponentImport;

    bool LoadComponent(Entity parent, Entity owner, const ComponentImport &ci);
    Component::SubsystemManager *m_Manager;

    void Import(ImportData &data, const char *PatternUri, int32_t entityIndex);
    void Import(ImportData &data, pugi::xml_node node, int32_t entityIndex);

    void Spawn(ImportData &data, Entity parent);
};

} //namespace Core 
} //namespace MoonGlare 

#endif
