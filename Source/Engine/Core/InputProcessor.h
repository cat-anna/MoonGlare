/*
  * Generated by cppsrc.sh
  * On 2016-08-04 19:45:53,67
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/

#pragma once

#include <Renderer/iContextInputHandler.h>
#include <Foundation/InputProcessor.h>

namespace MoonGlare::Core {

class InputProcessor final : public Renderer::iContextInputHandler {
public:
    InputProcessor();
    ~InputProcessor();

    bool Initialize(World *world);
    bool Finalize();
    void SetInputSource(Renderer::iContext *Context) { m_Context = Context; }

    bool Step(const Core::MoveConfig &config);

    void PushCharModeKey(unsigned Key, bool Pressed);

    void SetKeyState(unsigned KeyCode, bool Pressed);
    void SetMouseButtonState(unsigned Button, bool Pressed) {
        ProcessKeyState(Button + InputKeyOffsets::Mouse, Pressed);
    }
    void SetMouseDelta(const emath::fvec2 &delta) {
        ProcessMouseAxis(MouseAxisId::X, delta.x());
        ProcessMouseAxis(MouseAxisId::Y, delta.y());
    }
    void SetMouseScrollDelta(const emath::fvec2 &delta) {
        ProcessMouseAxis(MouseAxisId::ScrollX, delta.x());
        ProcessMouseAxis(MouseAxisId::ScrollY, delta.y());
    }
    void ClearStates();

    bool Save(pugi::xml_node node) const;
    bool Load(const pugi::xml_node node);

    void Clear();
    void ResetToInternalDefault();

    bool AddKeyboardAxis(const char *Name, KeyId PositiveKey, KeyId NegativeKey);
    bool AddKeyboardSwitch(const char *Name, KeyId Key);
    bool AddMouseAxis(const char *Name, MouseAxisId axis, float Sensitivity);

    bool RegisterKeySwitch(const char* Name, const char* KeyName);
    bool RegisterKeyboardAxis(const char* Name, const char* PositiveKeyName, const char* NegativeKeyName);

    static void RegisterScriptApi(ApiInitializer &root);

    bool BeginCharMode(Entity reciver);
    void CaptureKey(Entity reciver);
    void EndCharMode();

    //Renderer::iContextInputHandler
    virtual void OnKey(int Key, bool Pressed) override;
    virtual void OnChar(unsigned CharOrKey, bool Pressed) override;
    virtual void OnScroll(const emath::fvec2 &delta) override;
    virtual void OnMouseButton(int Button, bool State) override;
    virtual void MouseDelta(const emath::fvec2 &delta) override;
    virtual bool CanDropFocus() override;
    virtual void OnFocusChange(bool State) override;
    virtual bool CanReleaseMouse() override;
    virtual void OnMouseHookChange(bool State) override;
    virtual bool ShouldClose(bool Focus, bool MouseHook) override;
protected:
    using InputStateArray = Memory::StaticVector<InputState, Configuration::Input::MaxInputStates>;
    using KeyMapArray = std::array<KeyAction, Configuration::Input::MaxKeyCode>;
    using MouseAxesArray = std::array<AxisAction, Configuration::Input::MaxMouseAxes>;

    InputStateArray m_InputStates;
    MouseAxesArray m_MouseAxes;
    KeyMapArray m_Keys;
    Configuration::RuntimeRevision m_CurrentRevision;

    std::unordered_map<std::string, InputStateId> m_InputNames;
    World *m_World = nullptr;
    iConsole *m_Console = nullptr;
    Renderer::iContext *m_Context = nullptr;

    bool m_ConsoleActive = false;
    enum class CharMode { None, Console, ScriptChar, ScriptKey, };
    CharMode m_CharMode = CharMode::None;
    Entity m_CharReciver = {};


    void ProcessKeyState(unsigned Id, bool Pressed);
    void ProcessMouseAxis(MouseAxisId Id, float Delta);
    bool GetInputStateName(InputStateId isid, std::string &out) const;

    InputState* AllocInputState(InputState::Type type, const std::string &Name, InputStateId &outindex);
    KeyAction* AllocKeyAction(KeyId kid, InputStateId isid, bool Positive);
    AxisAction* AllocMouseAxis(MouseAxisId maid, InputStateId isid, float Sensitivity);

    bool ProcessConsoleActivateKey();
private:
    static int luaIndexInput(lua_State *lua);
};

} //namespace MoonGlare::Core
