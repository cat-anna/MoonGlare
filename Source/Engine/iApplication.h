/*
  * Generated by cppsrc.sh
  * On 2015-06-29 10:15:07.37
  * by Immethis
*/
/*--END OF HEADER BLOCK--*/

#pragma once
#ifndef iApplication_H
#define iApplication_H

namespace MoonGlare::x2c::Settings {
struct EngineSettings_t;
}

namespace MoonGlare {
namespace Application {

class iApplication : public cRootClass {
    SPACERTTI_DECLARE_CLASS_SINGLETON(iApplication, cRootClass);
    DECLARE_EXCACT_SCRIPT_CLASS_GETTER();
public:
    iApplication();
    virtual ~iApplication();

    void LoadSettings();
    void SaveSettings();
    void SettingsChanged() { m_Flags.m_SettingsChanged = true; }
    x2c::Settings::EngineSettings_t* GetConfiguration() { return m_Configuration.get(); }

    virtual void Initialize();
    virtual void Execute();
    virtual void Finalize();

    virtual bool PreSystemInit();
    virtual bool PostSystemInit();

    virtual void Exit();
    virtual void OnActivate();
    virtual void OnDeactivate();
    virtual const char* ExeName() const;

    bool IsActive() const { return m_Flags.m_Active; }
    bool DoRestart() const { return m_Flags.m_Restart; }
    void SetRestart(bool v) { m_Flags.m_Restart = v; }

    static void RegisterScriptApi(ApiInitializer &api);
protected:
    union Flags {
        struct {
            bool m_Initialized : 1;
            bool m_SettingsLoaded : 1;
            bool m_SettingsChanged : 1;
            bool m_Active : 1;
            bool m_Restart : 1;
        };
        uint32_t m_UintValue;
    };
    Flags m_Flags;
    std::unique_ptr<World> m_World;

    Asset::UniqueAssetManager m_AssetManager;
    Renderer::UniqueRenderer m_Renderer;

    std::string_view m_ConfigurationFileName;
    std::unique_ptr<x2c::Settings::EngineSettings_t> m_Configuration;
};

} //namespace Application

inline Application::iApplication* GetApplication() { return Application::iApplication::Instance(); }

} //namespace MoonGlare

#endif
