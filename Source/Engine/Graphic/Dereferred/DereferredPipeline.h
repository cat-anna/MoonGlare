/*
	Generated by cppsrc.sh
	On 2015-01-14 22:33:57,87
	by Paweu
*/

#pragma once
#ifndef DerefferedPipeline_H
#define DerefferedPipeline_H

#include "DereferredFrameBuffer.h"
#include "../PlaneShadowMap.h"

#include "GeometryShader.h"
#include "PointLightShader.h"
#include "DirectionalLightShader.h"
#include "SpotLightShader.h"
#include "StencilShader.h"
#include "../ShadowMapShader.h"

#include <Renderer/Resources/ResourceManager.h>

namespace Graphic {
namespace Dereferred {

class DereferredPipeline {
public:
	void Initialize(World *world);
	void Finalize();

	DefferedSink* GetDefferedSink() const { return m_DefferedSink.get(); }

	bool Execute(const MoonGlare::Core::MoveConfig &conf, cRenderDevice& dev);

	bool RenderGeometry(const MoonGlare::Core::MoveConfig &conf, RenderInput *ri, cRenderDevice& dev);

	bool RenderSpotLightsShadows(const MoonGlare::Core::MoveConfig &conf, RenderInput *ri, cRenderDevice& dev);

	bool RenderPointLights(RenderInput *ri, cRenderDevice& dev);
	bool RenderDirectionalLights(RenderInput *ri, cRenderDevice& dev);
	bool RenderSpotLights(RenderInput *ri, cRenderDevice& dev);

	DereferredFrameBuffer m_Buffer;
private: 
	World *m_World = nullptr;
	MoonGlare::DataClasses::ModelPtr m_Sphere, m_Cone;
	VAO m_DirectionalQuad;
	std::unique_ptr<DefferedSink> m_DefferedSink;

	Space::Container::StaticVector<PlaneShadowMap, 1024> m_PlaneShadowMapBuffer;

	Renderer::ShaderResourceHandle<Shaders::ShadowMapShaderDescriptor> m_ShaderShadowMapHandle{ };
	Renderer::ShaderResourceHandle<SpotLightShaderDescriptor> m_ShaderLightSpotHandle{ };
	Renderer::ShaderResourceHandle<PointLightShaderDescriptor> m_ShaderLightPointHandle{ };
	Renderer::ShaderResourceHandle<DirectionalLightShaderDescriptor> m_ShaderLightDirectionalHandle{ };
	Renderer::ShaderResourceHandle<StencilLightShaderDescriptor> m_ShaderStencilHandle{ };
	Renderer::ShaderResourceHandle<GeometryShaderDescriptor> m_ShaderGeometryHandle{ };

	bool InitializeDirectionalQuad();
};

//------------------------------------------------------------------------------------------

struct DefferedSink {
	void Reset(Renderer::Frame *frame);
	void Initialize(Renderer::RendererFacade *Renderer);

	struct RObj {
		DefferedSink *m_sink = nullptr;

		RObj& Mesh(Renderer::MaterialResourceHandle material, unsigned NumIndices, unsigned BaseIndex, 
			unsigned BaseVertex, unsigned ElementsType) {
			m_sink->Mesh(material, NumIndices, BaseIndex, BaseVertex, ElementsType);
			return *this;
		}
	};


	RObj Begin(const math::mat4 &ModelMatrix, const Graphic::VAO &vao);
protected:
	Renderer::Commands::CommandQueue *m_GeometryQueue = nullptr;	
	Renderer::Commands::CommandQueue *m_LightQueue = nullptr;
	Renderer::Frame *m_frame = nullptr;
	Renderer::Resources::ShaderBuilder<GeometryShaderDescriptor> m_GeometryShader;
	Renderer::Resources::ShaderBuilder<Shaders::ShadowMapShaderDescriptor> m_ShadowShader;
	Renderer::RendererFacade *m_Renderer = nullptr;
	Renderer::ShaderResourceHandle<GeometryShaderDescriptor> m_ShaderGeometryHandle{ };
	Renderer::ShaderResourceHandle<Shaders::ShadowMapShaderDescriptor> m_ShaderShadowMapHandle{};


	void Mesh(Renderer::MaterialResourceHandle material, unsigned NumIndices, unsigned BaseIndex, unsigned BaseVertex, unsigned ElementsType);
};

} //namespace Dereferred
} //namespace Graphic 

#endif
