/*
	Generated by cppsrc.sh
	On 2015-01-14 22:33:57,87
	by Paweu
*/

#pragma once
#ifndef DerefferedPipeline_H
#define DerefferedPipeline_H

#include "DereferredFrameBuffer.h"
#include "../PlaneShadowMap.h"

#include <libSpace/src/Container/StaticVector.h>

namespace Graphic {
namespace Dereferred {

class DereferredPipeline : public cRootClass {
	SPACERTTI_DECLARE_CLASS_NOCREATOR(DereferredPipeline, cRootClass);
public:
 	DereferredPipeline();
 	virtual ~DereferredPipeline();

	bool Initialize(World *world);
	bool Finalize();

	bool Execute(const MoonGlare::Core::MoveConfig &conf, cRenderDevice& dev);

	void BeginFrame(cRenderDevice& dev);
	bool RenderShadows(RenderInput *ri, cRenderDevice& dev);
	bool RenderGeometry(RenderInput *ri, cRenderDevice& dev);
	bool RenderLights(RenderInput *ri, cRenderDevice& dev);

	//bool RenderPointLightsShadows(Core::ciScene *scene, Light::PointLightList &lights, cRenderDevice& dev);
	bool RenderSpotLightsShadows(RenderInput *ri, cRenderDevice& dev);

	bool RenderPointLights(RenderInput *ri, cRenderDevice& dev);
	bool RenderDirectionalLights(RenderInput *ri, cRenderDevice& dev);
	bool RenderSpotLights(RenderInput *ri, cRenderDevice& dev);

	void FinalPass(const uvec2 &size);
	void EndFrame();
	DereferredFrameBuffer m_Buffer;

	struct Flags {
		enum {
			Ready		= 1,
		};
	};

	DefineFlagGetter(m_Flags, Flags::Ready, Ready);
private: 
	unsigned m_Flags;
	World *m_World = nullptr;
	Shader *m_StencilShader;
	GeometryPassShader *m_GeometryShader;
	MoonGlare::DataClasses::ModelPtr m_Sphere, m_Cone;
	VAO m_DirectionalQuad;

	Space::Container::StaticVector<PlaneShadowMap, 1024> m_PlaneShadowMapBuffer;

	DefineFlagSetter(m_Flags, Flags::Ready, Ready);

	Renderer::ShaderResourceHandle m_ShaderShadowMapHandle{ 0 };
	Renderer::ShaderResourceHandle m_ShaderLightSpotHandle{ 0 };
	Renderer::ShaderResourceHandle m_ShaderLightPointHandle{ 0 };
	Renderer::ShaderResourceHandle m_ShaderLightDirectionalHandle{ 0 };
	//Renderer::ShaderResourceHandle m_ShaderGeometryHandle{ 0 };

	bool InitializeDirectionalQuad();
};

} //namespace Dereferred
} //namespace Graphic 

#endif
