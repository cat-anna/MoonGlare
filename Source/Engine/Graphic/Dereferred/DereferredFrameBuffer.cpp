/*
	Generated by cppsrc.sh
	On 2015-01-18  9:24:36,67
	by Paweu
*/
#include <pch.h>
#include "../Graphic.h"
#include "DereferredFrameBuffer.h"

namespace Graphic {
namespace Dereferred {

DereferredFrameBuffer::DereferredFrameBuffer() {
	memset(m_Textures, 0, sizeof(m_Textures));
}

DereferredFrameBuffer::~DereferredFrameBuffer() {
	Free();
}

void DereferredFrameBuffer::Free() {
	FrameBuffer::FreeFrameBuffer();

    if (m_Textures[0]) {
        glDeleteTextures(Buffers::MaxValue, m_Textures);
    }

	if (m_DepthTexture) {
		glDeleteTextures(1, &m_DepthTexture);
	}

	if (m_FinalTexture) {
		glDeleteTextures(1, &m_FinalTexture);
	}
}


void DereferredFrameBuffer::BeginFrame() {
	glBindFramebuffer(GL_DRAW_FRAMEBUFFER, m_FrameBuffer);
	glDrawBuffer(GL_COLOR_ATTACHMENT4);
	glClear(GL_COLOR_BUFFER_BIT);
}
 
void DereferredFrameBuffer::BeginGeometryPass() {
	glBindFramebuffer(GL_DRAW_FRAMEBUFFER, m_FrameBuffer);
	static const GLenum DrawBuffers[] =  { 
								GL_COLOR_ATTACHMENT0, 
								GL_COLOR_ATTACHMENT1,
								GL_COLOR_ATTACHMENT2, 
								GL_COLOR_ATTACHMENT3,
	};
	glDrawBuffers(4, DrawBuffers);
}   
 
void DereferredFrameBuffer::BeginStencilPass() {
	glDrawBuffer(GL_NONE);  
} 
    
void DereferredFrameBuffer::BeginLightingPass() {
	glDrawBuffer(GL_COLOR_ATTACHMENT4);
	for (unsigned int i = 0; i < Buffers::MaxValue; i++) {
		glActiveTexture(GL_TEXTURE0 + i);
		glBindTexture(GL_TEXTURE_2D, m_Textures[i]);
	} 
}

void DereferredFrameBuffer::BeginFinalPass() {
	glBindFramebuffer(GL_DRAW_FRAMEBUFFER, 0);
	glBindFramebuffer(GL_READ_FRAMEBUFFER, m_FrameBuffer); 
	glReadBuffer(GL_COLOR_ATTACHMENT4);
} 

bool DereferredFrameBuffer::Reset() {
	Free();
	NewFrameBuffer();
	auto s = GetRenderDevice()->GetContext()->Size();

    glGenTextures(Buffers::MaxValue, m_Textures);
	glGenTextures(1, &m_DepthTexture);
	glGenTextures(1, &m_FinalTexture);

    for (unsigned int i = 0 ; i < Buffers::MaxValue; i++) {
    	glBindTexture(GL_TEXTURE_2D, m_Textures[i]);
        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB32F, s[0], s[1], 0, GL_RGB, GL_FLOAT, NULL);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
        glFramebufferTexture2D(GL_DRAW_FRAMEBUFFER, GL_COLOR_ATTACHMENT0 + i, GL_TEXTURE_2D, m_Textures[i], 0);
    }

	// depth
	glBindTexture(GL_TEXTURE_2D, m_DepthTexture);
	glTexImage2D(GL_TEXTURE_2D, 0, GL_DEPTH32F_STENCIL8, s[0], s[1], 0, GL_DEPTH_STENCIL, GL_FLOAT_32_UNSIGNED_INT_24_8_REV, NULL);
	glFramebufferTexture2D(GL_DRAW_FRAMEBUFFER, GL_DEPTH_STENCIL_ATTACHMENT, GL_TEXTURE_2D, m_DepthTexture, 0);
	
	//final
	glBindTexture(GL_TEXTURE_2D, m_FinalTexture);
	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, s[0], s[1], 0, GL_RGB, GL_FLOAT, NULL);
	glFramebufferTexture2D(GL_DRAW_FRAMEBUFFER, GL_COLOR_ATTACHMENT4, GL_TEXTURE_2D, m_FinalTexture, 0);	

	FrameBuffer::FinishFrameBuffer();
	FrameBuffer::UnBind();

	return true;
}

} //namespace Dereferred 
} //namespace Graphic 

