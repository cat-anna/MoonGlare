/*
	Generated by cppsrc.sh
	On 2015-02-10 21:12:44,46
	by Paweu
*/

#pragma once
#ifndef LoadQueue_H
#define LoadQueue_H

namespace Graphic {

class LoadQueue {
public:
 	LoadQueue();
 	~LoadQueue();

	using LoadRequestFunc = std::function < void() > ;

	size_t Count() const { return m_RequestList.size(); }

	void DispatchAllRequests() {
		while (!m_RequestList.empty())
			DispatchSingleRequest();
	}
	void DispatchSingleRequest();
	void DispatchInTime(float miliseconds);

	void QueueRequest(LoadRequestFunc Func) {
		LOCK_MUTEX(m_mutex);
		m_RequestList.emplace_back(Func);
	}
private: 
	struct Request {
		LoadRequestFunc Handler;

		Request() : Handler() { }
		Request(LoadRequestFunc h) : Handler(h) { }

		void swap(Request &other) {
			Handler.swap(other.Handler);
		}
	};

	using RequestList = std::list<Request>;
	RequestList m_RequestList;
	std::recursive_mutex m_mutex;
};

} //namespace Graphic 

#endif
