/*
	Generated by cppsrc.sh
	On 2015-01-16 20:14:39,46
	by Paweu
*/
#include <pch.h>
#include "Graphic.h"

#include "Light.h"

namespace Graphic {
namespace Light {
	 
bool LightBase::LoadMeta(const xml_node node) { 
	XML::Vector::Read(node, "Color", m_Color, m_Color, XML::Captions::RGBA);
	xml_node Intensity = node.child("Intensity");
	m_AmbientIntensity = Intensity.attribute("Ambient").as_float(m_AmbientIntensity);
	m_DiffuseIntensity = Intensity.attribute("Diffuse").as_float(m_DiffuseIntensity);
	m_Flags.m_CastShadows = node.attribute("CastShadows").as_bool(m_Flags.m_CastShadows);
	//IgnoreOwnerGeometry = node.attribute("IgnoreOwnerGeometry").as_bool(IgnoreOwnerGeometry);
//	XML::Vector::Read(node, "Position", Position, Position);
	{
		xml_node att = node.child("Attenuation");
		m_Attenuation.m_Linear = node.attribute("Linear").as_float(m_Attenuation.m_Linear);
		m_Attenuation.m_Exp = node.attribute("Exp").as_float(m_Attenuation.m_Exp);
		m_Attenuation.m_Constant = node.attribute("Constant").as_float(m_Attenuation.m_Constant);
		m_Attenuation.m_MinThreshold = node.attribute("MinThreshold").as_float(m_Attenuation.m_MinThreshold);
	}

	//XML::Vector::Read(node, "Direction", Direction, Direction);
//	Direction = glm::normalize(Direction);
	CutOff = node.attribute("CutOff").as_float(CutOff);
	return true;
}  

//----------------------------------------------------------------

//----------------------------------------------------------------

} //namespace Light 
} //namespace Graphic 
