/*
    Generated by cppsrc.sh
    On 2014-12-13 13:22:00,37
    by Paweu
*/

#include <pch.h>
#include <MoonGlare.h>
#include <Engine/Core/Engine.h>
#include <Engine/iApplication.h>
#include "GraphicSettings.h"

#include <Core/InputProcessor.h>

namespace Graphic {

static string DumpGLFWMode(const GLFWvidmode* mode) {
    char buf[128];
    sprintf(buf, "%dx%d %dhz  bits: %dx%dx%d  ratio:%f", mode->width, mode->height, mode->refreshRate, mode->redBits, mode->blueBits, mode->greenBits, (float)mode->width/(float)mode->height);
    return buf;
}

static bool IsModeSuggested(const GLFWvidmode* mode) {
    if (mode->blueBits != 8 || mode->greenBits != 8 || mode->redBits != 8)
        return false;
    if (mode->refreshRate != 60)
        return false;
    if (mode->width < 1024)
        return false;
//	float ratio = (float)mode->width / (float)mode->height;
//	if (!((ratio >= 1.3f && ratio <= 1.4f) || (ratio >= 1.7f && ratio <= 1.8f)))
//		return false;
    return true;
}

//-------------------------------------------------------------------------------------------------

SPACERTTI_IMPLEMENT_CLASS_NOCREATOR(Window)
RegisterApiDerivedClass(Window, &Window::RegisterScriptApi);

Window::Window(GLFWwindow *w):
        BaseClass(),
        m_Window(w), 
        m_Size(0) {
    int iw, ih;
    glfwGetWindowSize(m_Window, &iw, &ih);
    m_Size = uvec2(iw, ih);
}

//-------------------------------------------------------------------------------------------------

void Window::RegisterScriptApi(::ApiInitializer &api) {
    api
    .deriveClass<ThisClass, BaseClass>("cWindow")
//        .addFunction("SetTitle", &ThisClass::SetTitle)

        .addCFunction("GetMonitors", &ThisClass::GetMonitors)
        .addCFunction("GetMonitorModes", &ThisClass::GetMonitorModes)
#ifdef DEBUG
//        .addFunction("GrabMouse", &ThisClass::GrabMouse)
//        .addFunction("ReleaseMouse", &ThisClass::ReleaseMouse)
//        .addFunction("SetPosition", Utils::Template::DynamicArgumentConvert<ThisClass, math::uvec2, &ThisClass::SetPosition, int, int>::get())
#endif
    .endClass()
    .beginClass<GLFWvidmode>("cGLFWvidmode")
        .addData("Height", &GLFWvidmode::height, false)
        .addData("Width", &GLFWvidmode::width, false)
        .addData("RefreshRate", &GLFWvidmode::refreshRate, false)
    .endClass()
    ; 
}

//-------------------------------------------------------------------------------------------------

int Window::GetMonitors(lua_State *lua) {
    int count;
    auto primarymonitor = glfwGetPrimaryMonitor();
    auto monitors = glfwGetMonitors(&count);

    lua_createtable(lua, 0, 0);

    for (int i = 0; i < count; ++i) {
        auto monitor = monitors[i];

        lua_pushinteger(lua, i + 1);
        lua_createtable(lua, 0, 0);

        lua_pushinteger(lua, i);
        lua_setfield(lua, -2, "Index");

        lua_pushstring(lua, glfwGetMonitorName(monitor));
        lua_setfield(lua, -2, "Name");

        if (monitor == primarymonitor) {
            lua_pushboolean(lua, 1);
            lua_setfield(lua, -2, "primary");
        }

        auto mode = glfwGetVideoMode(monitor);
        lua_pushinteger(lua, mode->height);
        lua_setfield(lua, -2, "Height");

        lua_pushinteger(lua, mode->width);
        lua_setfield(lua, -2, "Width");

        lua_settable(lua, -3);
    }

    return 1;
}

int Window::GetMonitorModes(lua_State *lua) {
    int monitorid = lua_tointeger(lua, -1);
    GLFWmonitor *mon;
    if (monitorid < -1)
        return 0;

    if (monitorid == -1) {
        mon = glfwGetPrimaryMonitor();
    } else {
        int c;
        auto mont = glfwGetMonitors(&c);
        if (c <= monitorid)
            return 0;
        mon = mont[monitorid];
    }

    int modecount;
    const GLFWvidmode* modes = glfwGetVideoModes(mon, &modecount);
    const GLFWvidmode* currmode = glfwGetVideoMode(mon);

    lua_createtable(lua, 0, 0);

    for (int i = 0, index = 0; i < modecount; ++i) {
        auto *mode = modes + i;
        if (!IsModeSuggested(mode))
            continue;

        ++index;
        lua_pushinteger(lua, index);
        lua_createtable(lua, 0, 0);

        lua_pushinteger(lua, mode->height);
        lua_setfield(lua, -2, "Height");

        lua_pushinteger(lua, mode->width);
        lua_setfield(lua, -2, "Width");

        lua_pushinteger(lua, i);
        lua_setfield(lua, -2, "Index");

        //lua_pushinteger(lua, mode->refreshRate);
        //lua_setfield(lua, -2, "RefreshRate");

        if (memcmp(mode, currmode, sizeof(*currmode)) == 0) {
            lua_pushboolean(lua, 1);
            lua_setfield(lua, -2, "Current");
        }

        lua_settable(lua, -3);
    }

    return 1;
}

GLFWvidmode Window::GetCurrentMode() const {
    return GLFWvidmode{
        (int)m_Size[0],
        (int)m_Size[1],
        8, 8, 8,
        (int)GetRefreshRate()
    };
}

//-------------------------------------------------------------------------------------------------

unsigned Window::GetRefreshRate() const {
    auto monitor = glfwGetWindowMonitor(m_Window);
    if (!monitor)
        monitor = glfwGetPrimaryMonitor();
    return glfwGetVideoMode(monitor)->refreshRate;
}

//-------------------------------------------------------------------------------------------------

} //namespace Graphic 
