/*
	Generated by cppsrc.sh
	On 2015-01-07  0:05:01,17
	by Paweu
*/
#include <pch.h>
//#include "MoveContollers.h"
#include <MoonGlare.h>
#include "StaticMoveController.h"
namespace MoveControllers {

GABI_IMPLEMENT_CLASS(StaticMoveController);
IMPLEMENT_SCRIPT_EVENT_VECTOR(StaticMoveControllerEvents);
RegisterApiDerivedClass(StaticMoveController, &StaticMoveController::RegisterScriptApi);
MoveControllerClassRegister::Register<StaticMoveController> StaticMoveControllerReg("StaticController");

StaticMoveController::StaticMoveController(::Core::Objects::Object *Owner) :
		BaseClass(Owner),
		m_StaticRotation(0, 0, 0),
		m_StaticSpeed(0, 0, 0),
		m_Acceleration(0, 0, 0),
		m_Rotation(0, 0, 0) {
	SetScriptHandlers(new ScriptEventClass());
}

StaticMoveController::StaticMoveController(const StaticMoveController& source, ::Core::Objects::Object *Owner) :
		BaseClass(source, Owner),
		m_StaticRotation(source.m_StaticRotation),
		m_StaticSpeed(source.m_StaticSpeed) {
	//SetScriptHandlers(source.m_ScriptHandlers->Duplicate());
}

StaticMoveController::~StaticMoveController() {
}

//-------------------------------------------------------------------------------------------------

void StaticMoveController::RegisterScriptApi(ApiInitializer &api) {
	api
	.deriveClass<StaticMoveController, cRootClass>("StaticMoveController")
		.addFunction("SetStaticRotation", &StaticMoveController::SetStaticRotation)
		.addFunction("SetStaticSpeed", &StaticMoveController::SetStaticSpeed)
		.addFunction("SetStaticAcceleration", &StaticMoveController::SetStaticAcceleration)
	.endClass();
}

//-------------------------------------------------------------------------------------------------

iMoveController* StaticMoveController::Duplicate(::Core::Objects::Object* NewOwner) const {
	return new ThisClass(*this, NewOwner);
}

void StaticMoveController::DoMove(const ::Core::MoveConfig& conf) {
	if (!IsRunning()) return;

	m_Rotation += m_StaticRotation * conf.TimeDelta;
	//m_Owner->SetLookDirection(m_Rotation);
	auto body = m_Owner->GetBody();
	//LinearSpeed[1] = body->GetLinearVelocity()[1];
	body->SetLinearVelocity(m_Acceleration * conf.TimeDelta + body->GetLinearVelocity());
	//m_Owner->GetBody()->ApplyCentralForce(LinearSpeed * 700.0f);
	//motion.SetQuaterion(q);
	//motion.Update();

//	m_Owner->SetPosition(m_Owner->GetPosition() + LinearSpeed * conf.TimeDelta);
	m_Owner->UpdateMotionState();

#if 0
	auto Position = m_Owner->GetMotionState().GetPosition();
	auto Rotation = m_Owner->GetMotionState().GetRotation();
	Position += m_StaticSpeed * conf.FrameTime;
	Rotation += m_StaticRotation * conf.FrameTime;
	m_Owner->GetMotionState().SetLocation(Position, Rotation);
#endif // 0
}

bool StaticMoveController::LoadFromXML(const xml_node Node) {
	XML::Vector::Read(Node, "Rotation", m_StaticRotation, m_StaticRotation);
	XML::Vector::Read(Node, "Speed", m_StaticSpeed, m_StaticSpeed);
	XML::Vector::Read(Node, "Acceleration", m_Acceleration, m_Acceleration);
	return BaseClass::LoadFromXML(Node);
}

//-------------------------------------------------------------------------------------------------

int StaticMoveController::InvokeOnStart() { SCRIPT_INVOKE(OnStart, m_Owner); }
int StaticMoveController::InvokeOnStop() { SCRIPT_INVOKE(OnStop, m_Owner); }

//-------------------------------------------------------------------------------------------------

void StaticMoveController::SetStaticRotation(float x, float y, float z) {
	m_StaticRotation = Physics::vec3(x, y, z);
}

void StaticMoveController::SetStaticSpeed(float x, float y, float z) {
	m_StaticSpeed = Physics::vec3(x, y, z);
}

void StaticMoveController::SetStaticAcceleration(float x, float y, float z) {
	m_Acceleration = Physics::vec3(x, y, z);
}

} //namespace MoveControllers 

