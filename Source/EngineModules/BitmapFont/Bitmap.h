/*
	Generated by cppsrc.sh
	On 2014-12-16  6:13:04,05
	by Paweu
*/

#pragma once
#ifndef Bitmap_H
#define Bitmap_H

namespace MoonGlare {
namespace Modules {
namespace BitmapFont {

using namespace DataClasses::Fonts;

class BitmapFont : public iFont {
	SPACERTTI_DECLARE_CLASS(BitmapFont, iFont);
public:
	BitmapFont(const string& Name);
	~BitmapFont();

	FontRect TextSize(const wstring &text, const Descriptor *style = nullptr, bool UniformPosition = false) const override;

	float GetHeight() const { return (float)m_BFD.CharHeight; }
	const TextureFile& GetTexture() const { return m_Texture; }

protected:
	class cBFDHeader {
	public:
		cBFDHeader() {
			Width = Height = CharWidth = CharHeight = 0;
			BeginingKey = 0;
			memset(KeyWidths, 0, 256);
		}
		unsigned Width, Height, CharWidth, CharHeight;
		unsigned char BeginingKey, KeyWidths[256];
	};

	TextureFile m_Texture;
	cBFDHeader m_BFD;
	string m_TextureFile;
	string m_BfdFile;

	virtual bool DoInitialize() override;
	virtual bool GenerateCommands(Renderer::Commands::CommandQueue &q, Renderer::Frame *frame, const std::wstring &text, const FontRenderRequest &options) override;
};

} //namespace BitmapFont 
} //namespace Modules 
} //namespace MoonGlare 

#endif
