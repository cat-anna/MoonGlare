/*
  * Generated by cppsrc.sh
  * On 2015-05-24  9:54:01,64
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/

#pragma once
#ifndef MenuItemInfo_H
#define MenuItemInfo_H

namespace MoonGlare {
namespace Modules {
namespace MenuScene {

class MenuScene;
	
DECLARE_SCRIPT_EVENT_VECTOR(MenuItemScriptEvents, iScriptEvents,
		SCRIPT_EVENT_ADD(
			(OnExit)(OnEnter)
			(OnSubExit)(OnSubEnter)
			(SetValue)(GetValue)
			(GenerateList)
			(OnClick)
		),
		SCRIPT_EVENT_REMOVE());

struct MenuItemInfo;
using SharedMenuItemInfo = std::shared_ptr < MenuItemInfo > ;
using WeakMenuItemInfo = std::weak_ptr < MenuItemInfo > ;
using MenuItemList = std::list < SharedMenuItemInfo > ;

enum class MenuItemType {
	Unknown, Menu, Return, List, Button, CheckBox, Separator, SteppedProgressBar, Label,
};

struct MenuItemTypeEnumConverter : GabiLib::EnumConverter < MenuItemType, MenuItemType::Unknown > {
	MenuItemTypeEnumConverter() {
		Add("Unknown", Enum::Unknown); 
		Add("Menu", Enum::Menu);
		Add("Return", Enum::Return);
		Add("Label", Enum::Label);
		Add("Button", Enum::Button);
		Add("CheckBox", Enum::CheckBox);
		Add("Separator", Enum::Separator);
		Add("ProgressBar", Enum::SteppedProgressBar);
		Add("List", Enum::List);
	}
};
using MenuItemTypeEnum = GabiLib::EnumConverterHolder < MenuItemTypeEnumConverter >;

struct MenuItemInfo : public cRootClass, public std::enable_shared_from_this<MenuItemInfo> {
	GABI_DECLARE_STATIC_CLASS(MenuItemInfo, cRootClass);
	DECLARE_EXCACT_SCRIPT_CLASS_GETTER();
	DECLARE_SCRIPT_HANDLERS_ROOT(MenuItemScriptEvents);
public:
	MenuItemInfo(MenuScene *Owner, SharedMenuItemInfo Parent);
	
	virtual bool Load(xml_node root);

	/** Return nonzero to forbid change */
	virtual int InvokeOnEnter();
	/** Return nonzero to forbid change */
	virtual int InvokeOnExit();
	/** Return nonzero to forbid change */
	virtual int InvokeOnSubEnter();
	/** Return nonzero to forbid change */
	virtual int InvokeOnSubExit();

	DefineDirectGetter(Type, MenuItemType);
	DefineRefGetterConst(BaseWidgetName, string);
	DefineDirectGetter(Widget, GUI::iWidget *);

	SharedMenuItemInfo GetParent() const { return m_Parent.lock(); }
	string GetCaption();
	const string& GetCaptionID() const { return m_CaptionId; }

	virtual bool BuildItemGUI(GUI::Widgets::Panel *parent) = 0;
	static void RegisterScriptApi(ApiInitializer &api);

	virtual void HandleMouseUp(const GUI::Events::MouseUpEvent& ev, int WidgetID) { };
	virtual void HandleMouseEnter(const GUI::Events::MouseEnterEvent& ev, int WidgetID) { };
	virtual void HandleMouseLeave(const GUI::Events::MouseLeaveEvent& ev, int WidgetID) { };

	virtual MenuItemInfo* FindItem(const char *CaptionID) { return nullptr; }
protected:
	MenuItemType m_Type = MenuItemType::Unknown;
	MenuScene *m_OwnerScene;
	xml_node m_ItemNode;
	GUI::iWidget *m_Widget = nullptr;
	int m_ItemId = 0;

	//MenuItemScriptEvents* GetScriptEvents() { return &m_Events; }
private:
	WeakMenuItemInfo m_Parent;
	string m_CaptionId, m_BaseWidgetName;
//	MenuItemScriptEvents m_Events;

	MenuItemInfo* RawGetParent() { return m_Parent.lock().get(); } //scripts use only
};

//----------------------------------------------------------------

class SubMenuItem : public MenuItemInfo {
	GABI_DECLARE_STATIC_CLASS(SubMenuItem, MenuItemInfo);
	DECLARE_EXCACT_SCRIPT_CLASS_GETTER();
public:
	SubMenuItem(MenuScene *Owner, SharedMenuItemInfo Parent);

	virtual bool Load(xml_node root);

	virtual bool BuildItemGUI(GUI::Widgets::Panel *parent) override;
	virtual void HandleMouseUp(const GUI::Events::MouseUpEvent& ev, int WidgetID) override;

	MenuItemList* GetChildItems() { return m_ChildItems.get(); }
	static void RegisterScriptApi(ApiInitializer &api);

	virtual MenuItemInfo* FindItem(const char *CaptionID);
private:
	std::unique_ptr<MenuItemList> m_ChildItems = std::make_unique<MenuItemList>();
};

} //namespace MenuScene 
} //namespace Modules 
} //namespace MoonGlare 

#endif
