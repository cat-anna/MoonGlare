/*
  * Generated by cppsrc.sh
  * On 2015-03-07 23:01:04,40
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/
#include <pch.h>
#include <MoonGlare.h>
#include <Engine/ModulesManager.h>
#include <Engine/GUI/nGUI.h>
#include <Engine/GUI/Widgets/Panel.h>
#include <Engine/GUI/Widgets/Table.h>
#include <Engine/GUI/Widgets/Label.h>
#include <Engine/GUI/Widgets/SplitPanel.h>
#include <Engine/GUI/Widgets/Image.h>
#include "MenuItemInfo.h"
#include "MenuWidget.h"
#include "MenuScene.h"

namespace MoonGlare {
namespace Modules {
namespace MenuScene {

struct MenuSceneModule : public MoonGlare::Modules::ModuleInfo {
	MenuSceneModule(): BaseClass("MenuScene", ModuleType::Functional) { }
};
DEFINE_MODULE(MenuSceneModule);

//----------------------------------------------------------------

bool MenuSceneConfig::Load(const xml_node node) {
	StyleName = node.child("Style").text().as_string("Menu");
	StringTable = node.child("StringTable").text().as_string("Menus");
	XML::Vector::Read(node, "ItemSize", ItemSize);
	return true;
}

//----------------------------------------------------------------

GABI_IMPLEMENT_CLASS(MenuScene);
RegisterApiDerivedClass(MenuScene, &MenuScene::RegisterScriptApi);
IMPLEMENT_SCRIPT_EVENT_VECTOR(MenuItemScriptEvents);
::Core::Scene::SceneClassRegister::Register<MenuScene> MenuSceneReg;

MenuScene::MenuScene():
		BaseClass() {
}

MenuScene::~MenuScene() {
}

//----------------------------------------------------------------

void MenuScene::RegisterScriptApi(ApiInitializer &api) {
	api
	.deriveClass<ThisClass, BaseClass>("cMenuScene")
		.addFunction("GoBack", &ThisClass::GoBack)
	.endClass();
}

//----------------------------------------------------------------

void MenuScene::DoMove(const Core::MoveConfig &conf) {
	BaseClass::DoMove(conf);

	m_ActionQueue.DispatchPendingActions();
}

//----------------------------------------------------------------

void MenuScene::BeginScene() {
	BaseClass::BeginScene();
	if (!EnterMenuImpl(m_MenuTreeRoot)) {
		AddLog(Error, "Unable to enter root menu.");
	}
}

void MenuScene::EndScene() {
	m_MenuTable = nullptr;
	m_MenuStack.clear();
	BaseClass::EndScene();
}

bool MenuScene::DoInitialize() {
	if (!BaseClass::DoInitialize())
		return false;

	m_GUI = std::make_unique<GUI::GUIEngine>();
	m_GUI->Initialize(Graphic::GetRenderDevice()->GetContext().get());
	GetGUI()->GetRootWidget()->SetStyleByName(m_Config.StyleName);
	m_GUI->EnableCursor(true);

	m_MenuTreeRoot = std::make_shared<SubMenuItem>(this, SharedMenuItemInfo(nullptr));
	m_MenuTreeRoot->Load(GetRootNode().child("Menu"));

	return true;
}

bool MenuScene::DoFinalize() {
	if (m_GUI) 
		m_GUI->Finalize();
	m_MenuStack.clear();
	m_MenuTreeRoot.reset();
	m_GUI.reset();
	return BaseClass::DoFinalize();
}

//----------------------------------------------------------------

bool MenuScene::LoadMeta(const xml_node Node) {
	if (!BaseClass::LoadMeta(Node))
		return false;

	m_Config.Load(GetRootNode().child("MenuConfig"));

	return true;
}

bool MenuScene::RebuildMenu() {
	if (m_MenuStack.empty())
		return false;
	MenuState &state = m_MenuStack.front();
	if (!state.MenuItem)
		return false;

	if (m_OuterPanel) {
		GetGUI()->GetRootWidget()->RemoveWidget(m_OuterPanel);
		//delete m_OuterPanel;
		m_OuterPanel = nullptr;
		m_MenuTable = nullptr;
		//return true;
	}

	if (!m_MenuTable) {
		m_OuterPanel = new GUI::Widgets::Panel(nullptr);
		GetGUI()->GetRootWidget()->AddWidget(m_OuterPanel);
		m_OuterPanel->Lock();
		m_OuterPanel->SetAlignMode(GUI::AlignMode::Parent);
		m_OuterPanel->SetMargin(GUI::Margin(20));

		m_MenuTable = new GUI::Widgets::Table(m_OuterPanel);
		m_OuterPanel->AddWidget(m_MenuTable);

		//m_MenuTable->SetMargin(GUI::Margin(50));

		m_MenuTable->SetName("MenuTable");
	} 

	SubMenuItem *menu = dynamic_cast<SubMenuItem*>(state.MenuItem.get());
	if (!menu) {
		AddLog(Error, "Invalid menuitem type!");
		return false;
	}
	
	auto *menuitems = menu->GetChildItems();
	if (!menuitems)
		return false;
	m_OuterPanel->RecalculateMetrics();

	if (m_Config.ItemSize[0] > 1 && m_Config.ItemSize[1] > 1) {
		m_MenuTable->SetAlignMode(GUI::AlignMode::None);
		m_MenuTable->SetSize(GUI::Point(m_Config.ItemSize[0], m_Config.ItemSize[1] * menuitems->size()));
		auto os = m_OuterPanel->GetSize();
		os /= 2.0f;
		m_MenuTable->SetPosition(GUI::Point(os[0] - m_Config.ItemSize[0] / 2.0f, 50));
	} else {
		m_MenuTable->SetAlignMode(GUI::AlignMode::Parent);
	}
	m_OuterPanel->Unlock();
	m_OuterPanel->RecalculateMetrics();
	m_MenuTable->SetCellCount(GUI::Point(1, menuitems->size()));
	m_OuterPanel->RecalculateMetrics();
	m_MenuTable->Lock();

	int index = 0; 
	for (auto &it : *menuitems) {
		auto *panel = new GUI::Widgets::Panel(m_MenuTable);
		panel->SetAlignMode(GUI::AlignMode::Parent);
		m_MenuTable->SetWidget(panel, index);
		++index;
		it->BuildItemGUI(panel);
		auto w = it->GetWidget();
		if (w)
			w->SetName(it->GetBaseWidgetName());
		m_MenuTable->RecalculateMetrics();
	}

	m_MenuTable->Unlock();
	m_MenuTable->RecalculateMetrics();
	return true;
}

//----------------------------------------------------------------

bool MenuScene::EnterMenuImpl(SharedMenuItemInfo MenuItem) {
	if (!MenuItem || MenuItem->GetType() != MenuItemType::Menu) {
		AddLog(Error, "Invalid MenuItem. Cannot enter.");
		return false;
	}

	if (!m_MenuStack.empty()) {
		MenuState &state = m_MenuStack.front();
		if (state.MenuItem) {
			if (state.MenuItem->InvokeOnEnter())
				return false;
		}
	}

	m_MenuStack.emplace_front();
	MenuState &last = m_MenuStack.front();
	last.MenuItem = MenuItem;

	if (!RebuildMenu()) {
		AddLog(Error, "Unable to rebuild menu!");
		return false;
	}

	//call on enter;
	last.MenuItem->InvokeOnEnter();

	return true;
}

//----------------------------------------------------------------

bool MenuScene::GoBackImpl() {
	do {
		if (m_MenuStack.empty())
			break;
		MenuState *state = &m_MenuStack.front();
		if (!state->MenuItem)
			break;
		
		if (state->MenuItem->InvokeOnExit())
			return false;

		m_MenuStack.pop_front();
		if (m_MenuStack.empty())
			break;
		state = &m_MenuStack.front();
		if (!state->MenuItem)
			break;
		state->MenuItem->InvokeOnSubExit();
		return RebuildMenu();
	} while (false);

	FinishScene();
	return false;
}

//----------------------------------------------------------------

int MenuScene::InvokeOnEscape() { 

	if (GoBackImpl()) {
		//SetSceneState()
		return 1;
	}
	SCRIPT_INVOKE(OnEscape); 
}

int MenuScene::InvokeOnTimer(int TimerID) { SCRIPT_INVOKE(OnTimer, TimerID); }
int MenuScene::InvokeOnBeginScene() { SCRIPT_INVOKE(OnBeginScene); }
int MenuScene::InvokeOnEndScene() { SCRIPT_INVOKE(OnEndScene); }
int MenuScene::InvokeOnInitialize() { SCRIPT_INVOKE(OnInitialize); }
int MenuScene::InvokeOnFinalize() { SCRIPT_INVOKE(OnFinalize); }

} //namespace MenuScene 
} //namespace Modules 
} //namespace MoonGlare 
