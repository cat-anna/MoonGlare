/*
  * Generated by cppsrc.sh
  * On 2016-09-23 21:24:39,56
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/
#include <pch.h>
#include <MoonGlare.h>
#include <Engine/DataClasses/iFont.h>
#include "../nfGUI.h"

#include <Core/Component/ComponentManager.h>
#include <Core/Component/ComponentRegister.h>
#include "RectTransformComponent.h"
#include "TextComponent.h"

#include <Renderer/Commands/OpenGL/ControllCommands.h>
#include <Renderer/Commands/OpenGL/ShaderCommands.h>
#include <Renderer/Commands/OpenGL/TextureCommands.h>
#include <Renderer/Commands/OpenGL/ArrayCommands.h>
#include <Renderer/RenderInput.h>
#include "../GUIShader.h"

#include <Math.x2c.h>
#include <ComponentCommon.x2c.h>
#include <TextComponent.x2c.h>

#include <Source/Renderer/RenderDevice.h>
#include <Source/Renderer/Frame.h>

#include <Source/Renderer/Resources/ResourceManager.h>

namespace MoonGlare {
namespace GUI {
namespace Component {

//---------------------------------------------------------------------------------------

::Space::RTTI::TypeInfoInitializer<TextComponent, TextComponentEntry> TextComponentTypeInfo;
RegisterComponentID<TextComponent>TextComponentIDReg("Text", true, &TextComponent::RegisterScriptApi);

//---------------------------------------------------------------------------------------

TextComponent::TextComponent(ComponentManager * Owner)
		: TemplateStandardComponent(Owner) {
	m_RectTransform = nullptr;
	m_Shader = nullptr;
}

TextComponent::~TextComponent() {
}

//---------------------------------------------------------------------------------------

void TextComponent::RegisterScriptApi(ApiInitializer & root) {
	root
		.beginClass<TextComponentEntry>("cTextComponentEntry")
			.addProperty("Color", &TextComponentEntry::GetColor, &TextComponentEntry::SetColor)
			.addProperty("Text", &TextComponentEntry::GetText, &TextComponentEntry::SetText)
			.addProperty("FontSize", &TextComponentEntry::GetFontSize, &TextComponentEntry::SetFontSize)
		.endClass()
		; 
}

//---------------------------------------------------------------------------------------

bool TextComponent::Initialize() {
	//memset(&m_Array, 0, m_Array.Capacity() * sizeof(m_Array[0]));
	//m_Array.fill(TextComponentEntry());
	for (auto &item : m_Array)
		item.Reset();
	m_Array.ClearAllocation();

	m_RectTransform = GetManager()->GetComponent<RectTransformComponent>();
	if (!m_RectTransform) {
		AddLog(Error, "Failed to get RectTransformComponent instance!");
		return false;
	}

	::Graphic::GetRenderDevice()->RequestContextManip([this]() {
		if (!m_Shader) {
			if (!Graphic::GetShaderMgr()->GetSpecialShaderType<GUIShader>("GUI", m_Shader)) {
				AddLogf(Error, "Failed to load GUI shader");
			}
		}
	});

	m_FontDeviceOptions.m_UseUniformMode = m_RectTransform->IsUniformMode();
	m_FontDeviceOptions.m_DeviceSize = emath::MathCast<emath::ivec2>(math::fvec2(Graphic::GetRenderDevice()->GetContextSize()));
	
	m_TextProcessor.SetTables(GetDataMgr()->GetStringTables());

	return true;
}

bool TextComponent::Finalize() {
	return true;
}

//---------------------------------------------------------------------------------------

void TextComponent::Step(const Core::MoveConfig & conf) {
	auto &Queue = conf.m_RenderInput->m_CommandQueues[Renderer::RendererConf::CommandQueueID::GUI];
	bool CanRender = false;

	if (m_Shader) {
		CanRender = true;
	}

	size_t LastInvalidEntry = 0;
	size_t InvalidEntryCount = 0;

	for (size_t i = 0; i < m_Array.Allocated(); ++i) {
		auto &entry = m_Array[i];

		if (!entry.m_Flags.m_Map.m_Valid) {
			//mark and continue
			LastInvalidEntry = i;
			++InvalidEntryCount;
			continue;
		}

		if (!GetHandleTable()->IsValid(this, entry.m_SelfHandle)) {
			entry.m_Flags.m_Map.m_Valid = false;
			LastInvalidEntry = i;
			++InvalidEntryCount;
			continue;
		}

		auto *rtentry = m_RectTransform->GetEntry(entry.m_OwnerEntity);
		if (!rtentry) {
			LastInvalidEntry = i;
			++InvalidEntryCount;
			continue;
		}

		if (!entry.m_Flags.m_Map.m_Active)
			continue;

		Renderer::RendererConf::CommandKey key{ rtentry->m_Z };

		if (entry.m_Flags.m_Map.m_Dirty || rtentry->m_Flags.m_Map.m_Changed) {
			entry.Update(conf.m_BufferFrame, m_FontDeviceOptions, *rtentry, m_RectTransform->IsUniformMode(), m_TextProcessor);
		}

		if (!CanRender)
			continue;

		m_Shader->SetWorldMatrix(Queue, key, emath::MathCast<emath::fmat4>(entry.m_Matrix), m_RectTransform->GetCamera().GetProjectionMatrix());
	
		m_Shader->SetColor(Queue, key, math::vec4(1));

		auto texres = Queue.PushCommand<Renderer::Commands::Texture2DResourceBind>(key);
		texres->m_Handle = entry.m_FontResources.m_Texture;
		texres->m_HandleArray = conf.m_BufferFrame->GetResourceManager()->GetTextureAllocator().GetHandleArrayBase();

		auto vaob = conf.m_BufferFrame->GetResourceManager()->GetVAOResource().GetVAOBuilder(Queue, entry.m_FontResources.m_VAO);
		Queue.PushCommand<Renderer::Commands::VAOBindResource>(key)->m_VAO = vaob.m_HandlePtr;

		auto arg = Queue.PushCommand<Renderer::Commands::VAODrawTriangles>(key);
		arg->m_NumIndices = 6;
		arg->m_IndexValueType = Renderer::TypeId<uint8_t>;
	}

	if (InvalidEntryCount > 0) {
		AddLogf(Performance, "TransformComponent:%p InvalidEntryCount:%lu LastInvalidEntry:%lu", this, InvalidEntryCount, LastInvalidEntry);
		TrivialReleaseElement(LastInvalidEntry);
	}
}

//---------------------------------------------------------------------------------------

bool TextComponent::Load(xml_node node, Entity Owner, Handle & hout) {
	size_t index;
	if (!m_Array.Allocate(index)) {
		AddLogf(Error, "Failed to allocate index!");
		return false;
	}
	auto &entry = m_Array[index];
	entry.Reset();
	if (!GetHandleTable()->Allocate(this, Owner, entry.m_SelfHandle, index)) {
		AddLog(Error, "Failed to allocate handle");
		//no need to deallocate entry. It will be handled by internal garbage collecting mechanism
		return false;
	}
	hout = entry.m_SelfHandle;
	entry.m_OwnerEntity = Owner;

	x2c::Component::TextComponent::TextEntry_t te;
	te.ResetToDefault();
	if (!te.Read(node)) {
		AddLog(Error, "Failed to read ImageEntry!");
		return false;
	}

	entry.m_Font = GetDataMgr()->GetFont(te.m_FontName);
	if (!entry.m_Font) {
		AddLogf(Error, "Unknown font: %s", te.m_FontName.c_str());
		return false;
	}

	entry.m_AlignMode = te.m_TextAlignMode;
	entry.m_FontStyle.m_Color = emath::fvec4(1, 1, 1, 1);
	entry.m_FontStyle.m_Size = te.m_FontSize;
	entry.m_Text = te.m_Text;
	entry.m_Flags.m_Map.m_Active = te.m_Active;

	entry.m_Flags.m_Map.m_Valid = true;
	entry.m_Flags.m_Map.m_Dirty = true;
	entry.m_Flags.m_Map.m_TextDirty = true;
	m_EntityMapper.SetComponentMapping(entry);
	return true;
}

//---------------------------------------------------------------------------------------

void TextComponentEntry::Update(Renderer::Frame *frame, const DataClasses::Fonts::iFont::FontDeviceOptions &devopt, RectTransformComponentEntry & Parent, bool Uniform, TextProcessor &tproc) {
	if (m_Flags.m_Map.m_TextDirty) {
		std::string processed;
		tproc.Process(m_Text, processed);
		std::wstring txt = Utils::Strings::towstring(processed);
		m_Flags.m_Map.m_TextDirty = !m_Font->RenderText(txt, frame, m_FontStyle, devopt, m_FontRect, m_FontResources);
	}

	auto tsize = m_FontRect.m_TextBlockSize; 
	auto psize = Parent.m_ScreenRect.GetSize();

	math::vec3 Pos(0);

	switch (m_AlignMode) {
	case TextAlignMode::LeftTop:
		break;
	case TextAlignMode::MiddleTop:
		Pos.x = psize.x / 2.0f - tsize.x / 2.0f;
		break;
	case TextAlignMode::RightTop:
		Pos.x = psize.x - tsize.x;
		break;

	case TextAlignMode::LeftMiddle:
		Pos.y = psize.y / 2.0f - tsize.y / 2.0f;
		break;
	case TextAlignMode::Middle:
		Pos = math::vec3((psize - tsize) / 2.0f, 0);
		break;
	case TextAlignMode::RightMiddle:
		Pos.x = psize.x - tsize.x;
		Pos.y = psize.y / 2.0f - tsize.y / 2.0f;
		break;

	case TextAlignMode::LeftBottom:
		Pos.y += psize.y - tsize.y;
		break;
	case TextAlignMode::MiddleBottom:
		Pos.y = psize.y - tsize.y;
		Pos.x = psize.x / 2.0f - tsize.x / 2.0f;
		break;
	case TextAlignMode::RightBottom:
		Pos = math::vec3(psize - tsize, 0);
		break;

		//case TextAlignMode::Justified: break;
	default:
		LogInvalidEnum(m_AlignMode);
		break;
	}

	m_translate = glm::translate(math::mat4(), Pos);
	m_Matrix = Parent.m_GlobalMatrix * m_translate;
	m_Flags.m_Map.m_Dirty = m_Flags.m_Map.m_TextDirty;
}

} //namespace Component 
} //namespace GUI 
} //namespace MoonGlare 
