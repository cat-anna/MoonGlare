/*
  * Generated by cppsrc.sh
  * On 2015-03-06  9:44:21,50
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/

#pragma once

namespace MoonGlare {
namespace GUI {

class Animation {
public:
    Animation();
    ~Animation();

    //DefineRefGetterConst(Name, string);
    math::vec2 GetFrameSize() const { return m_FrameSize; }

    bool Load(const std::string &fileuri, unsigned StartFrame, unsigned FrameCount, math::uvec2 FrameStripCount, math::uvec2 Spacing, math::vec2 FrameSize, bool Uniform, const emath::fvec2 &ScreenSize);

    struct Frame {
        uint16_t baseVertex;
        uint16_t baseIndex;
        uint16_t numIndices;
        uint16_t indexElementType;
    };

    Frame GetFrame(uint32_t index) {
        if (index > m_EndFrame)
            index = m_EndFrame;
        else
            if (index < m_StartFrame)
                index = m_StartFrame;
        return frames[index];
    }

    Renderer::MaterialResourceHandle material{};
    Renderer::VAOResourceHandle vaoHandle{};
    bool m_DrawEnabled;
protected:

    math::fvec2 m_TextureSize;
    string m_Name;
    float m_Speed;
    unsigned m_StartFrame, m_EndFrame;
    math::vec2 m_FrameSize;
    math::uvec2 m_FrameSpacing;
    math::uvec2 m_FrameCount;
    std::vector<Frame> frames;
    bool GenerateFrames(math::vec2 FrameSize, math::vec2 FrameStripCount);
};

} //namespace GUI 
} //namespace MoonGlare 
