/*
  * Generated by cppsrc.sh
  * On 2015-03-13 23:11:22.87
  * by Immethis
*/
/*--END OF HEADER BLOCK--*/

#pragma once

namespace MoonGlare {
namespace FileSystem {
namespace MoonGlareContainer {

struct ReaderLoadMetaStruct;
using  ReaderLoadMeta = std::unique_ptr < ReaderLoadMetaStruct > ;

struct ReaderFile;

class Reader : public iContainer {
	GABI_DECLARE_STATIC_CLASS(Reader, iContainer)
public:
	Reader(const string &File);
	virtual ~Reader();

	virtual FileReader GetFileReader(const string& file) const override;
	virtual bool EnumerateFolder(const RawFilePointer *root, FolderEnumerateFunc func) const override;
	virtual bool FileExists(const string& file) const override;

	virtual const string& GetFileName() const override;

	bool ReadBlock(UniqueCharTable &data, const Headers::CurrentVersion::DataBlock &block) {
		return m_File.ReadBlock(data, block);
	}

	FileReader GetFileReader(const ReaderFile *file) const;
protected:
	Reader();
	using ReaderFile = ReaderFile;
	using ReaderLoadMeta = ReaderLoadMeta;

	CFile m_File;
	string m_FileName;

	ReaderFile *m_RootFile;
	std::list<std::unique_ptr<ReaderFile[]>> m_FileTableList;

	ReaderFile* AllocFile();


	const ReaderFile* FindFile(const string &File) const;

	bool OpenContainer(ReaderLoadMeta &meta);
	bool LoadSections(ReaderLoadMeta &meta);
	bool LoadStringTable(ReaderLoadMeta &meta);
	bool LoadFileStructure(ReaderLoadMeta &meta);
};

} //namespace MoonGlareContainer 
} //namespace FileSystem 
} //namespace MoonGlare 
