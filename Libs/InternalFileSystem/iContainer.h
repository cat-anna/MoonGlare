/*
  * Generated by cppsrc.sh
  * On 2015-02-26  0:40:38,80
  * by Paweu
*/
/*--END OF HEADER BLOCK--*/

#pragma once
#ifndef Container_H
#define Container_H

namespace MoonGlare {
namespace FileSystem {

/** File pointer is allways managed by container itself */
struct RawFilePointer {
	virtual ~RawFilePointer() { }
	//RawFilePointer() { }
	//RawFilePointer(const RawFilePointer&) = delete;
	//RawFilePointer(const RawFilePointer&&) = delete;
	//RawFilePointer& operator=(const RawFilePointer&) = delete;

	virtual FileSize GetFileSize() const { return 0; };
};

class iContainer : public GabiLib::GabiObject {
	GABI_DECLARE_ABSTRACT_CLASS(iContainer, GabiLib::GabiObject)
	DISABLE_COPY();
public:
 	iContainer();
 	virtual ~iContainer();

	/** DEBUG FUNCITON. Dump container content into stream */
	virtual void DumpFileTree(ostream& out) const;

	/** Get file reader. Returns nullptr if file cannot be read */
	virtual FileReader GetFileReader(const string& file) const;
	/** Get file reader. Returns nullptr if file cannot be read */
	virtual FileReader GetFileReader(const RawFilePointer *file) const;
	/** Get file writter. Returns nullptr if file cannto be written */
	virtual FileWritter GetFileWritter(const string& file);
	/** Get file writter. Returns nullptr if file cannto be written */
	virtual FileWritter GetFileWritter(const RawFilePointer *file);

	/** Returns true if file or directory exists. */
	virtual bool FileExists(const string& file) const;

	/** Get count of filed inside container. (Folders are not included)*/
	virtual size_t FilesCount() const;
	/** Get total container size. (without metadata) */
	virtual size_t ContainerSize() const;

	virtual const string& GetFileName() const;
	virtual const string& GetContainerName() const;

	enum class MetadataRetriveStatus {
		Success,
		FatalError,
		InvalidIndex,
		InvalidRequest,
		ReadError,
		InternalError,
	};

	//virtual MetadataRetriveStatus GetMetadataCount() const = 0;
	//virtual MetadataRetriveStatus GetContainerMetadata(XMLFile &meta, unsigned MetadataIndex) const = 0;

	/** Enumeratrion function used during folder content enumeration */
	using FolderEnumerateFunc = std::function < void(const string &FileName, FileType type, const RawFilePointer *ptr) > ;

	/** Enumerate content of directory by pointer. Returns false if Path is not valid folder. set root = nullptr to enumerate root */
	virtual bool EnumerateFolder(const RawFilePointer *root, FolderEnumerateFunc func) const;

	struct Flags {
		enum {
			Readable	= 0x10000000,
			Writable	= 0x20000000,

			Ready		= 0x01000000,
		};
	};

	/** Can container be read? */
	DefineFlagGetter(m_Flags, Flags::Readable, Readable)
	/** Can data be written into container? */
	DefineFlagGetter(m_Flags, Flags::Writable, Writable)
	/** Is container ready for use? */
	DefineFlagGetter(m_Flags, Flags::Ready, Ready)
protected:
	DefineFlagSetter(m_Flags, Flags::Readable, Readable)
	DefineFlagSetter(m_Flags, Flags::Writable, Writable)
	DefineFlagSetter(m_Flags, Flags::Ready, Ready)

	unsigned m_Flags;
private: 
};

} //namespace FileSystem 
} //namespace MoonGlare 

#endif
